{
	"info": {
		"_postman_id": "d3708551-010e-499f-8c79-4d57dd9f2507",
		"name": "OamLog+testcases_softwareUpgrade",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "16731944"
	},
	"item": [
		{
			"name": "UserInput",
			"item": [
				{
					"name": "for loading user input",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"\\n\\n\\n===========================================================================================\");\r",
									"console.log(\"====================================== OamLog ====================================\");\r",
									"console.log(\"==========================================================================================\");\r",
									"/****************************************************************************************\r",
									"* Loading Input Data from File\r",
									"****************************************************************************************/\r",
									"try {\r",
									"    var inputFromFile;\r",
									"    inputFromFile = data;\r",
									"\r",
									"} catch (error) {\r",
									"    console.log(\"! Input data could not be loaded.\");\r",
									"}\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									"* Setting Environmental Variables \r",
									"****************************************************************************************/\r",
									"try {\r",
									"    pm.environment.clear();\r",
									"\r",
									"    let TYPE_OF_TESTING;\r",
									"    TYPE_OF_TESTING = inputFromFile.typeOfTesting;  // Data file should contain either \"Acceptance\" or \"Continuous Integration\".\r",
									"                                                    // In case of \"Acceptance\", Continuous Integration test cases would be executed, too.\r",
									"\r",
									"    let APPLICATION;\r",
									"    APPLICATION = inputFromFile.application;\r",
									"\r",
									"    let DUMMY_URI;\r",
									"    DUMMY_URI = inputFromFile.dummyUrl;\r",
									"\r",
									"    pm.environment.set(\"typeOfTesting\", TYPE_OF_TESTING);\r",
									"    pm.environment.set(\"application\", APPLICATION);\r",
									"    pm.environment.set(\"dummyUri\", DUMMY_URI);\r",
									"\r",
									"} catch (error) {\r",
									"    console.log(\"! Environment variables could not be set.\");\r",
									"}\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									"* Setting Collection Variables \r",
									"****************************************************************************************/\r",
									"try {\r",
									"    pm.collectionVariables.clear();\r",
									"\r",
									"} catch (error) {\r",
									"    console.log(\"! Collection variables could not be set.\");\r",
									"}\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									"* Setting Local Variables and Preparing the Request\r",
									"****************************************************************************************/\r",
									"try {\r",
									"    pm.variables.clear();\r",
									"\r",
									"    let URI;\r",
									"    URI = pm.environment.get(\"dummyUri\");\r",
									"\r",
									"    pm.variables.set(\"uri\", URI);\r",
									"    pm.request.headers.upsert({ key: \"Authorization\", value: \"\" });\r",
									"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });\r",
									"    pm.request.headers.upsert({ key: \"Content-Type\", value: \"application/json\" });\r",
									"\r",
									"} catch (error) {\r",
									"    console.log(\"! Local variables could not be set.\");\r",
									"}\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									"* Functions\r",
									"****************************************************************************************/\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{uri}}",
							"host": [
								"{{uri}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "functions()",
			"item": []
		},
		{
			"name": "/v1/bequeath-your-data-and-die",
			"item": [
				{
					"name": "Continuous Integration",
					"item": [
						{
							"name": "Service Idempotent?",
							"item": [
								{
									"name": "reference /core-model-1-4:control-construct",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"console.log(\"\\n-----  /v1/bequeath-your-data-and-die integration -- is service idempotent? -------------------------------\");\r",
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"var APPLICATION;\r",
													"try {\r",
													"    APPLICATION = pm.environment.get(\"application\");\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Environment variables could not be loaded.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Setting Local Variables and Preparing the Request\r",
													"****************************************************************************************/\r",
													"try {\r",
													"    let URI;\r",
													"    URI = APPLICATION.serverUrl + \"/core-model-1-4:control-construct\";\r",
													"\r",
													"    let REQUEST_BODY;\r",
													"    REQUEST_BODY = \"\";\r",
													"\r",
													"    let AUTHORIZATION;\r",
													"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
													"\r",
													"    let ACCEPT;\r",
													"    ACCEPT = \"application/json\";\r",
													"\r",
													"    let CONTENT_TYPE;\r",
													"    CONTENT_TYPE = \"application/json\";\r",
													"\r",
													"\r",
													"    pm.variables.clear();\r",
													"\r",
													"    pm.variables.set(\"uri\", URI);\r",
													"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
													"\r",
													"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
													"\r",
													"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
													"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Local variables could not be set.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Extracting Result\r",
													"****************************************************************************************/\r",
													"var ltpList;\r",
													"var fcList;\r",
													"try {\r",
													"    let response;\r",
													"    response = pm.response;\r",
													"    \r",
													"    let responseCode;\r",
													"    responseCode = parseInt(response.code);\r",
													"    \r",
													"    if ( Math.floor(responseCode/100) === 2 ) {\r",
													"        let responseObject;\r",
													"        responseObject = JSON.parse(response.stream);\r",
													"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
													"        fcList = responseObject[\"core-model-1-4:control-construct\"][\"forwarding-domain\"][0][\"forwarding-construct\"];\r",
													"\r",
													"    } else {\r",
													"        ltpList = [];\r",
													"        fcList = [];\r",
													"    }\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! ltpList could not be extracted.\");\r",
													"}\r",
													"\r",
													"var currentOperationServer;\r",
													"var newReleaseHttpClientLtp;\r",
													"var newReleaseTcpClientLtp;\r",
													"try {\r",
													"    currentOperationServer = FindOperationServer(\"/v1/bequeath-your-data-and-die\", ltpList);\r",
													"\r",
													"    //Bequeath Transfer Of List Of Applications\r",
													"    let bequeathingDataCausesTransferOfListOfApplicationsOperationClientLtp = FindOperationClientUsingCallback(\"PromptForBequeathingDataCausesTransferOfListOfApplications\", fcList, ltpList)\r",
													"\r",
													"    newReleaseHttpClientLtp = FindServingLtp(bequeathingDataCausesTransferOfListOfApplicationsOperationClientLtp, ltpList);\r",
													"    newReleaseTcpClientLtp = FindServingLtp(newReleaseHttpClientLtp, ltpList);\r",
													"    \r",
													"} catch (error) {\r",
													"    console.log(error);\r",
													"    console.log(\"! Reference objects could not be extracted.\");\r",
													"} \r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Setting Collection Variables\r",
													"****************************************************************************************/\r",
													"try {\r",
													"    pm.collectionVariables.clear();\r",
													"    \r",
													"    pm.collectionVariables.set(\"currentOperationServer\", currentOperationServer);\r",
													"    pm.collectionVariables.set(\"newReleaseHttpClientLtp\", newReleaseHttpClientLtp);\r",
													"    pm.collectionVariables.set(\"newReleaseTcpClientLtp\", newReleaseTcpClientLtp);\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Collection variables could not be set.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													"\r",
													"function FindOperationServer(operationName, ltpList) {\r",
													"    let operationServer;\r",
													"    operationServer = \"\";\r",
													"    try {\r",
													"        let sampleUuid;\r",
													"        for(let i=0; i<ltpList.length; i++) {\r",
													"            sampleUuid = ltpList[i][\"uuid\"];\r",
													"            if(sampleUuid.includes(\"op-s-\")) {\r",
													"                let sampleOperationName;\r",
													"                sampleOperationName = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
													"                if(sampleOperationName == operationName) {\r",
													"                    operationServer = ltpList[i];\r",
													"                    return operationServer;\r",
													"                }\r",
													"            }\r",
													"        }\r",
													"    } catch (error) {\r",
													"        console.log(\"! Exception in function : FindOperationServer. \");\r",
													"    }\r",
													"    return operationServer;\r",
													"}\r",
													"\r",
													"\r",
													"function FindOutputFcPortList(forwardingName, fcList) {\r",
													"    let outputFcPortList;\r",
													"    outputFcPortList = [];\r",
													"    try {\r",
													"        for( let i=0; i<fcList.length; i++ ) {\r",
													"            for(let j=0; j<fcList[i][\"name\"].length; j++) {               \r",
													"                if(fcList[i][\"name\"][j][\"value\"] == forwardingName) {\r",
													"                    fcPortList = fcList[i][\"fc-port\"];\r",
													"                    for(let k=0;k<fcPortList.length;k++) {\r",
													"                        if(fcPortList[k][\"port-direction\"] == \"core-model-1-4:PORT_DIRECTION_TYPE_OUTPUT\") {\r",
													"                            outputFcPortList.push(fcPortList[k]);\r",
													"                        }\r",
													"                    }\r",
													"                    return outputFcPortList;\r",
													"                }\r",
													"            }\r",
													"        }\r",
													"    } catch (error) {\r",
													"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
													"    }\r",
													"    return outputFcPortList;\r",
													"}\r",
													"\r",
													"function FindActualInstanceByUuid(expectedUuid, actualLtpList) {\r",
													"    let actualInstance;\r",
													"    actualInstance = {};\r",
													"    try {\r",
													"        for ( let i=0; i<actualLtpList.length; i++ ) {\r",
													"            let sampleUuid;\r",
													"            sampleUuid = actualLtpList[i][\"uuid\"];\r",
													"            if( sampleUuid == expectedUuid ) {\r",
													"                actualInstance = actualLtpList[i];\r",
													"                return actualInstance;\r",
													"            }\r",
													"        }\r",
													"\r",
													"    } catch (error) {\r",
													"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
													"    }\r",
													"    return undefined;\r",
													"}\r",
													"\r",
													"function FindServingLtp(clientLtp, ltpList) {\r",
													"    let servingLtp;\r",
													"    servingLtp = {};\r",
													"    try{\r",
													"        let serverLtpUuid;\r",
													"        serverLtpUuid = clientLtp[\"server-ltp\"][0];\r",
													"        for( let i=0; i<ltpList.length; i++ ) {\r",
													"            let sampleUuid;\r",
													"            sampleUuid = ltpList[i][\"uuid\"];\r",
													"            if( sampleUuid == serverLtpUuid ) {\r",
													"                servingLtp = ltpList[i];\r",
													"                return servingLtp;\r",
													"            }\r",
													"        }\r",
													"    } catch(error) {\r",
													"        console.log(error);\r",
													"        console.log(\"! Exception in function : FindServingLtp. \")\r",
													"    }\r",
													"    return servingLtp;\r",
													"}\r",
													"\r",
													"function FindOperationClientUsingCallback(callback, fcList, ltpList) {\r",
													"    let operationClientLtp\r",
													"    try {\r",
													"        let outputFcPortList = FindOutputFcPortList(callback, fcList);\r",
													"        let randomOutputFcPort = outputFcPortList[Math.floor(Math.random() * outputFcPortList.length)];\r",
													"        let outputLtpUuid = randomOutputFcPort[\"logical-termination-point\"];\r",
													"        operationClientLtp = FindActualInstanceByUuid(outputLtpUuid, ltpList);\r",
													"    } catch (error) {\r",
													"        console.log(error);\r",
													"        console.log(\"! Exception in function FindOperationClientUsingCallback. \");\r",
													"    }\r",
													"    return  operationClientLtp\r",
													"}\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "x-mock-response-code",
												"value": "200",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{uri}}",
											"host": [
												"{{uri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Expected /v1/bequeath-your-data-and-die - service idempotent? with attributes",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"var APPLICATION;\r",
													"var OPERATION_KEY;\r",
													"var newApplicationName;\r",
													"var newApplicationRelease;\r",
													"var dummyApplicationProtocol;\r",
													"var dummyApplicationAddress;\r",
													"var dummyApplicationPort;\r",
													"try {\r",
													"    APPLICATION = pm.environment.get(\"application\");\r",
													"\r",
													"    let currentOperationServer;\r",
													"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
													"\r",
													"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
													"\r",
													"    let newReleaseHttpClientLtp;\r",
													"    newReleaseHttpClientLtp = pm.collectionVariables.get(\"newReleaseHttpClientLtp\");\r",
													"\r",
													"    newApplicationName = newReleaseHttpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
													"\r",
													"    newApplicationRelease = newReleaseHttpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"release-number\"];\r",
													"\r",
													"    let newReleaseTcpClientLtp;\r",
													"    newReleaseTcpClientLtp = pm.collectionVariables.get(\"newReleaseTcpClientLtp\");\r",
													"\r",
													"    let protocol = newReleaseTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
													"    dummyApplicationProtocol = GenerateDummyRemoteProtocol(protocol);\r",
													"    dummyApplicationProtocol = dummyApplicationProtocol.substring(('tcp-client-interface-1-0:PROTOCOL_TYPE_').length);\r",
													"\r",
													"    let dummyIpv4Address = RandomIpAddress();\r",
													"    dummyApplicationAddress = {\r",
													"        \"ip-address\": {\r",
													"            \"ipv-4-address\": dummyIpv4Address\r",
													"        }\r",
													"    };\r",
													"    dummyApplicationPort = RandomTcpPort();\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(error);\r",
													"    console.log(\"! Input Data could not be loaded.\");\r",
													"}\r",
													"\r",
													"/****************************************************************************************\r",
													"* Defining Dummy Parameters\r",
													"****************************************************************************************/\r",
													"var USER_NAME;\r",
													"var ORIGINATOR;\r",
													"var X_CORRELATOR;\r",
													"var TRACE_INDICATOR;\r",
													"var CUSTOMER_JOURNEY;\r",
													"try {\r",
													"    USER_NAME = APPLICATION.userName;\r",
													"    ORIGINATOR = \"Postman\";\r",
													"    X_CORRELATOR = CreateXCorrelator();\r",
													"    TRACE_INDICATOR = \"1\";\r",
													"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
													"    \r",
													"} catch (error) {\r",
													"    console.log(\"! Could not define dummy values for parameters. \");\r",
													"}\r",
													"\r",
													"/****************************************************************************************\r",
													"* Defining Request Body\r",
													"****************************************************************************************/\r",
													"var REQUEST_BODY;\r",
													"try {\r",
													"    REQUEST_BODY = '{'\r",
													"        + '\"new-application-name\" : ' + '\"' + newApplicationName + '\",'\r",
													"        + '\"new-application-release\" : ' + '\"' + newApplicationRelease + '\",'\r",
													"        + '\"new-application-protocol\" : ' + '\"' + dummyApplicationProtocol + '\",'\r",
													"        + '\"new-application-address\" : ' + JSON.stringify(dummyApplicationAddress) + ','\r",
													"        + '\"new-application-port\" : ' +  dummyApplicationPort\r",
													"    +'}';\r",
													"} catch (error) {\r",
													"    console.log(\"!Could not define request body. \");\r",
													"}\r",
													"/****************************************************************************************\r",
													"* Setting Collection Variables\r",
													"****************************************************************************************/\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Setting Local Variables and Preparing the Request\r",
													"****************************************************************************************/\r",
													"try {\r",
													"    let URI;\r",
													"    URI = APPLICATION.serverUrl + \"/v1/bequeath-your-data-and-die\";\r",
													"\r",
													"    let ACCEPT;\r",
													"    ACCEPT = \"application/json\";\r",
													"\r",
													"    let CONTENT_TYPE;\r",
													"    CONTENT_TYPE = \"application/json\";\r",
													"\r",
													"    pm.variables.clear();\r",
													"\r",
													"    pm.variables.set(\"uri\", URI);\r",
													"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
													"\r",
													"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
													"\r",
													"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
													"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
													"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
													"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
													"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
													"\r",
													"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
													"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(error);\r",
													"    console.log(\"! Local variables could not be set.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													"\r",
													"function CreateXCorrelator() {\r",
													"    let xCorrelator;\r",
													"    xCorrelator = \"\";\r",
													"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
													"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
													"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
													"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
													"    xCorrelator += GenerateRandomHexString(12);\r",
													"    return xCorrelator;\r",
													"}\r",
													"\r",
													"function GenerateRandomHexString(length) {\r",
													"    var randomRandomHexString = \"\";\r",
													"    while (randomRandomHexString.length < length) {\r",
													"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
													"    }\r",
													"    return randomRandomHexString.substring(0,length);\r",
													"}\r",
													"\r",
													"function RandomIpAddress() {\r",
													"    let randomAddress\r",
													"    let addressParts = [];\r",
													"    for ( let i=0; i<4; i++ ) {\r",
													"        addressParts[i] = String(Math.floor(Math.random() * 256));\r",
													"    }\r",
													"    randomAddress = addressParts[0] + \".\" + addressParts[1] + \".\" + addressParts[2] + \".\" + addressParts[3];\r",
													"    return randomAddress;\r",
													"}\r",
													"\r",
													"function RandomTcpPort() {\r",
													"    let randomPort;\r",
													"    randomPort = 2000 + Math.floor( Math.random() * 1000 );\r",
													"    return randomPort;\r",
													"}\r",
													"\r",
													"function GenerateDummyRemoteProtocol(currentProtocol) {\r",
													"    let alternativeProtocolList;\r",
													"    alternativeProtocolList = [  \"tcp-client-interface-1-0:PROTOCOL_TYPE_HTTP\",\r",
													"                                    \"tcp-client-interface-1-0:PROTOCOL_TYPE_HTTPS\"\r",
													"                                ];\r",
													"    let indexOfCurrentProtocol;\r",
													"    indexOfCurrentProtocol = alternativeProtocolList.indexOf(currentProtocol);\r",
													"    if (indexOfCurrentProtocol > -1) {\r",
													"        alternativeProtocolList.splice(indexOfCurrentProtocol, 1);\r",
													"    }\r",
													"\r",
													"    let alternativeProtocol;\r",
													"    let alternativeProtocolIndex;\r",
													"    alternativeProtocolIndex = Math.floor(Math.random() * alternativeProtocolList.length);\r",
													"    alternativeProtocol = alternativeProtocolList[alternativeProtocolIndex]; \r",
													"\r",
													"    return alternativeProtocol;\r",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Extracting Result\r",
													"****************************************************************************************/\r",
													"var RESPONSE_CODE;\r",
													"try {\r",
													"    let response;\r",
													"    response = pm.response;\r",
													"\r",
													"    RESPONSE_CODE = parseInt(response.code);\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Response Code could not be extracted.\");\r",
													"}    \r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Testing\r",
													"****************************************************************************************/\r",
													"try {\r",
													"    pm.test(\"POST /v1/bequeath-your-data-and-die responds 204\", function () {\r",
													"        pm.expect(RESPONSE_CODE).to.equal(204);\r",
													"    });\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Testing could not be executed.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-mock-response-code",
												"value": "204",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{uri}}",
											"host": [
												"{{uri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "initial newRelease/remote-protocol",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"var APPLICATION;\r",
													"var newReleaseTcpClientUuid;\r",
													"var initialReleaseRemoteProtocol;\r",
													"try {\r",
													"    APPLICATION = pm.environment.get(\"application\");\r",
													"    \r",
													"    let newReleaseTcpClientLtp;\r",
													"    newReleaseTcpClientLtp = pm.collectionVariables.get(\"newReleaseTcpClientLtp\");\r",
													"\r",
													"    newReleaseTcpClientUuid = newReleaseTcpClientLtp[\"uuid\"];\r",
													"\r",
													"    initialReleaseRemoteProtocol = newReleaseTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Variables could not be loaded.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Setting Local Variables and Preparing the Request\r",
													"****************************************************************************************/\r",
													"try {\r",
													"    let URI;\r",
													"    URI = APPLICATION.serverUrl \r",
													"            + \"/core-model-1-4:control-construct/logical-termination-point=\" \r",
													"            + newReleaseTcpClientUuid\r",
													"            + \"/layer-protocol=0/tcp-client-interface-1-0:tcp-client-interface-pac/tcp-client-interface-configuration/remote-protocol\";\r",
													"\r",
													"    let REQUEST_BODY;\r",
													"    REQUEST_BODY = '{ '\r",
													"                    +   '\"tcp-client-interface-1-0:remote-protocol\": \"' + initialReleaseRemoteProtocol + '\"'\r",
													"                    + ' }';\r",
													"\r",
													"    let AUTHORIZATION;\r",
													"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
													"\r",
													"    let ACCEPT;\r",
													"    ACCEPT = \"application/json\";\r",
													"\r",
													"    let CONTENT_TYPE;\r",
													"    CONTENT_TYPE = \"application/json\";\r",
													"\r",
													"\r",
													"    pm.variables.clear();\r",
													"\r",
													"    pm.variables.set(\"uri\", URI);\r",
													"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
													"\r",
													"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
													"\r",
													"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
													"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(error)\r",
													"    console.log(\"! Local variables could not be set.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-mock-response-code",
												"value": "204",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{uri}}",
											"host": [
												"{{uri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "initial newRelease/remote-address",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"var APPLICATION;\r",
													"var newReleaseTcpClientUuid;\r",
													"var initialReleaseRemoteAddress;\r",
													"try {\r",
													"    APPLICATION = pm.environment.get(\"application\");\r",
													"    \r",
													"    let newReleaseTcpClientLtp;\r",
													"    newReleaseTcpClientLtp = pm.collectionVariables.get(\"newReleaseTcpClientLtp\");\r",
													"\r",
													"    newReleaseTcpClientUuid = newReleaseTcpClientLtp[\"uuid\"];\r",
													"\r",
													"    initialReleaseRemoteAddress = newReleaseTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-address\"];\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Variables could not be loaded.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Setting Local Variables and Preparing the Request\r",
													"****************************************************************************************/\r",
													"try {\r",
													"    let URI;\r",
													"    URI = APPLICATION.serverUrl \r",
													"            + \"/core-model-1-4:control-construct/logical-termination-point=\"\r",
													"            + newReleaseTcpClientUuid\r",
													"            + \"/layer-protocol=0/tcp-client-interface-1-0:tcp-client-interface-pac/tcp-client-interface-configuration/remote-address\";\r",
													"\r",
													"    let REQUEST_BODY;\r",
													"    REQUEST_BODY = '{ '\r",
													"                    +   '\"tcp-client-interface-1-0:remote-address\": ' + JSON.stringify(initialReleaseRemoteAddress)\r",
													"                    + ' }';\r",
													"\r",
													"    let AUTHORIZATION;\r",
													"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
													"\r",
													"    let ACCEPT;\r",
													"    ACCEPT = \"application/json\";\r",
													"\r",
													"    let CONTENT_TYPE;\r",
													"    CONTENT_TYPE = \"application/json\";\r",
													"\r",
													"    pm.variables.clear();\r",
													"\r",
													"    pm.variables.set(\"uri\", URI);\r",
													"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
													"\r",
													"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
													"\r",
													"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
													"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(error)\r",
													"    console.log(\"! Local variables could not be set.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-mock-response-code",
												"value": "204",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{uri}}",
											"host": [
												"{{uri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "initial newRelease/remote-port",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"var APPLICATION;\r",
													"var newReleaseTcpClientUuid;\r",
													"var initialReleaseRemotePort;\r",
													"try {\r",
													"    APPLICATION = pm.environment.get(\"application\");\r",
													"    \r",
													"    let newReleaseTcpClientLtp;\r",
													"    newReleaseTcpClientLtp = pm.collectionVariables.get(\"newReleaseTcpClientLtp\");\r",
													"\r",
													"    newReleaseTcpClientUuid = newReleaseTcpClientLtp[\"uuid\"];\r",
													"\r",
													"    initialReleaseRemotePort = newReleaseTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-port\"];\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Variables could not be loaded.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Setting Local Variables and Preparing the Request\r",
													"****************************************************************************************/\r",
													"try {\r",
													"    let URI;\r",
													"    URI = APPLICATION.serverUrl \r",
													"            + \"/core-model-1-4:control-construct/logical-termination-point=\" \r",
													"            + newReleaseTcpClientUuid\r",
													"            + \"/layer-protocol=0/tcp-client-interface-1-0:tcp-client-interface-pac/tcp-client-interface-configuration/remote-port\";\r",
													"\r",
													"    let REQUEST_BODY;\r",
													"    REQUEST_BODY = '{ '\r",
													"                    +   '\"tcp-client-interface-1-0:remote-port\": ' + initialReleaseRemotePort\r",
													"                    + ' }';\r",
													"\r",
													"    let AUTHORIZATION;\r",
													"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
													"\r",
													"    let ACCEPT;\r",
													"    ACCEPT = \"application/json\";\r",
													"\r",
													"    let CONTENT_TYPE;\r",
													"    CONTENT_TYPE = \"application/json\";\r",
													"\r",
													"\r",
													"    pm.variables.clear();\r",
													"\r",
													"    pm.variables.set(\"uri\", URI);\r",
													"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
													"\r",
													"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
													"\r",
													"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
													"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(error)\r",
													"    console.log(\"! Local variables could not be set.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-mock-response-code",
												"value": "204",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{uri}}",
											"host": [
												"{{uri}}"
											]
										}
									},
									"response": []
								}
							],
							"description": "## Is service idempotent?\n#### Preparation:\n- GETing CC (/core-model-1-4:control-construct)\n  - searching CC for op-s of /v1/bequeath-your-data-and-die, storing operation-key\n  - searcing CC for output port of PromptForBequeathingDataCausesTransferOfListOfApplications, find corresponding op-c, http-c and tcp-c, store them\n- POST /v1/bequeath-your-data-and-die with\n   - new-application-name and new-application-release according to chosen http-c\n   - new-application-protocol, new-application-address and new-application-port with random generated dummy values (assure sufficiently high probability that set does not exist!)\n   -operation-key from above\n   - reasonable parameter\"\n\n#### Testing:\n- checking for ResponseCode==204 (not 400 because of idempotence)\n\n#### Clearing:\n- PUT NewRelease/remote-protocol with original value\n- PUT NewRelease/remote-address with original value\n- PUT NewRelease/remote-port with original value"
						},
						{
							"name": "request header parameter completeness",
							"item": [
								{
									"name": "reference /core-model-1-4:control-construct",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"console.log(\"\\n-----  /v1/bequeath-your-data-and-die integration -- request headers parameters completeness -------------------------------\");\r",
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"var APPLICATION;\r",
													"try {\r",
													"    APPLICATION = pm.environment.get(\"application\");\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Environment variables could not be loaded.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Setting Local Variables and Preparing the Request\r",
													"****************************************************************************************/\r",
													"try {\r",
													"    let URI;\r",
													"    URI = APPLICATION.serverUrl + \"/core-model-1-4:control-construct\";\r",
													"\r",
													"    let REQUEST_BODY;\r",
													"    REQUEST_BODY = \"\";\r",
													"\r",
													"    let AUTHORIZATION;\r",
													"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
													"\r",
													"    let ACCEPT;\r",
													"    ACCEPT = \"application/json\";\r",
													"\r",
													"    let CONTENT_TYPE;\r",
													"    CONTENT_TYPE = \"application/json\";\r",
													"\r",
													"\r",
													"    pm.variables.clear();\r",
													"\r",
													"    pm.variables.set(\"uri\", URI);\r",
													"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
													"\r",
													"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
													"\r",
													"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
													"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Local variables could not be set.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Extracting Result\r",
													"****************************************************************************************/\r",
													"var ltpList;\r",
													"var fcList;\r",
													"try {\r",
													"    let response;\r",
													"    response = pm.response;\r",
													"    \r",
													"    let responseCode;\r",
													"    responseCode = parseInt(response.code);\r",
													"    \r",
													"    if ( Math.floor(responseCode/100) === 2 ) {\r",
													"        let responseObject;\r",
													"        responseObject = JSON.parse(response.stream);\r",
													"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
													"        fcList = responseObject[\"core-model-1-4:control-construct\"][\"forwarding-domain\"][0][\"forwarding-construct\"];\r",
													"\r",
													"    } else {\r",
													"        ltpList = [];\r",
													"        fcList = [];\r",
													"    }\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! ltpList could not be extracted.\");\r",
													"}\r",
													"\r",
													"var currentOperationServer;\r",
													"var newReleaseHttpClientLtp;\r",
													"var newReleaseTcpClientLtp;\r",
													"try {\r",
													"    currentOperationServer = FindOperationServer(\"/v1/bequeath-your-data-and-die\", ltpList);\r",
													"\r",
													"    //Bequeath Transfer Of List Of Applications\r",
													"    let bequeathingDataCausesTransferOfListOfApplicationsOperationClientLtp = FindOperationClientUsingCallback(\"PromptForBequeathingDataCausesTransferOfListOfApplications\", fcList, ltpList)\r",
													"\r",
													"    newReleaseHttpClientLtp = FindServingLtp(bequeathingDataCausesTransferOfListOfApplicationsOperationClientLtp, ltpList);\r",
													"    newReleaseTcpClientLtp = FindServingLtp(newReleaseHttpClientLtp, ltpList);\r",
													"    \r",
													"} catch (error) {\r",
													"    console.log(error);\r",
													"    console.log(\"! Reference objects could not be extracted.\");\r",
													"} \r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Setting Collection Variables\r",
													"****************************************************************************************/\r",
													"try {\r",
													"    pm.collectionVariables.clear();\r",
													"    \r",
													"    pm.collectionVariables.set(\"currentOperationServer\", currentOperationServer);\r",
													"    pm.collectionVariables.set(\"newReleaseHttpClientLtp\", newReleaseHttpClientLtp);\r",
													"    pm.collectionVariables.set(\"newReleaseTcpClientLtp\", newReleaseTcpClientLtp);\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Collection variables could not be set.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													"\r",
													"function FindOperationServer(operationName, ltpList) {\r",
													"    let operationServer;\r",
													"    operationServer = \"\";\r",
													"    try {\r",
													"        let sampleUuid;\r",
													"        for(let i=0; i<ltpList.length; i++) {\r",
													"            sampleUuid = ltpList[i][\"uuid\"];\r",
													"            if(sampleUuid.includes(\"op-s-\")) {\r",
													"                let sampleOperationName;\r",
													"                sampleOperationName = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
													"                if(sampleOperationName == operationName) {\r",
													"                    operationServer = ltpList[i];\r",
													"                    return operationServer;\r",
													"                }\r",
													"            }\r",
													"        }\r",
													"    } catch (error) {\r",
													"        console.log(\"! Exception in function : FindOperationServer. \");\r",
													"    }\r",
													"    return operationServer;\r",
													"}\r",
													"\r",
													"\r",
													"function FindOutputFcPortList(forwardingName, fcList) {\r",
													"    let outputFcPortList;\r",
													"    outputFcPortList = [];\r",
													"    try {\r",
													"        for( let i=0; i<fcList.length; i++ ) {\r",
													"            for(let j=0; j<fcList[i][\"name\"].length; j++) {               \r",
													"                if(fcList[i][\"name\"][j][\"value\"] == forwardingName) {\r",
													"                    fcPortList = fcList[i][\"fc-port\"];\r",
													"                    for(let k=0;k<fcPortList.length;k++) {\r",
													"                        if(fcPortList[k][\"port-direction\"] == \"core-model-1-4:PORT_DIRECTION_TYPE_OUTPUT\") {\r",
													"                            outputFcPortList.push(fcPortList[k]);\r",
													"                        }\r",
													"                    }\r",
													"                    return outputFcPortList;\r",
													"                }\r",
													"            }\r",
													"        }\r",
													"    } catch (error) {\r",
													"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
													"    }\r",
													"    return outputFcPortList;\r",
													"}\r",
													"\r",
													"function FindActualInstanceByUuid(expectedUuid, actualLtpList) {\r",
													"    let actualInstance;\r",
													"    actualInstance = {};\r",
													"    try {\r",
													"        for ( let i=0; i<actualLtpList.length; i++ ) {\r",
													"            let sampleUuid;\r",
													"            sampleUuid = actualLtpList[i][\"uuid\"];\r",
													"            if( sampleUuid == expectedUuid ) {\r",
													"                actualInstance = actualLtpList[i];\r",
													"                return actualInstance;\r",
													"            }\r",
													"        }\r",
													"\r",
													"    } catch (error) {\r",
													"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
													"    }\r",
													"    return undefined;\r",
													"}\r",
													"\r",
													"function FindServingLtp(clientLtp, ltpList) {\r",
													"    let servingLtp;\r",
													"    servingLtp = {};\r",
													"    try{\r",
													"        let serverLtpUuid;\r",
													"        serverLtpUuid = clientLtp[\"server-ltp\"][0];\r",
													"        for( let i=0; i<ltpList.length; i++ ) {\r",
													"            let sampleUuid;\r",
													"            sampleUuid = ltpList[i][\"uuid\"];\r",
													"            if( sampleUuid == serverLtpUuid ) {\r",
													"                servingLtp = ltpList[i];\r",
													"                return servingLtp;\r",
													"            }\r",
													"        }\r",
													"    } catch(error) {\r",
													"        console.log(error);\r",
													"        console.log(\"! Exception in function : FindServingLtp. \")\r",
													"    }\r",
													"    return servingLtp;\r",
													"}\r",
													"\r",
													"\r",
													"function FindOperationClientUsingCallback(callback, fcList, ltpList) {\r",
													"    let operationClientLtp\r",
													"    try {\r",
													"        let outputFcPortList = FindOutputFcPortList(callback, fcList);\r",
													"        let randomOutputFcPort = outputFcPortList[Math.floor(Math.random() * outputFcPortList.length)];\r",
													"        let outputLtpUuid = randomOutputFcPort[\"logical-termination-point\"];\r",
													"        operationClientLtp = FindActualInstanceByUuid(outputLtpUuid, ltpList);\r",
													"    } catch (error) {\r",
													"        console.log(error);\r",
													"        console.log(\"! Exception in function FindOperationClientUsingCallback. \");\r",
													"    }\r",
													"    return  operationClientLtp\r",
													"}\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "x-mock-response-code",
												"value": "200",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{uri}}",
											"host": [
												"{{uri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Expected  /v1/bequeath-your-data-and-die - request header parameter completeness",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"var APPLICATION;\r",
													"var OPERATION_KEY;\r",
													"var newApplicationName;\r",
													"var newApplicationRelease;\r",
													"var dummyApplicationProtocol;\r",
													"var dummyApplicationAddress;\r",
													"var dummyApplicationPort;\r",
													"try {\r",
													"    APPLICATION = pm.environment.get(\"application\");\r",
													"\r",
													"    let currentOperationServer;\r",
													"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
													"    \r",
													"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
													"\r",
													"    let newReleaseHttpClientLtp;\r",
													"    newReleaseHttpClientLtp = pm.collectionVariables.get(\"newReleaseHttpClientLtp\");\r",
													"\r",
													"    newApplicationName = newReleaseHttpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
													"\r",
													"    newApplicationRelease = newReleaseHttpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"release-number\"];\r",
													"\r",
													"    let newReleaseTcpClientLtp;\r",
													"    newReleaseTcpClientLtp = pm.collectionVariables.get(\"newReleaseTcpClientLtp\");\r",
													"\r",
													"    let protocol = newReleaseTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
													"    dummyApplicationProtocol = GenerateDummyRemoteProtocol(protocol);\r",
													"    dummyApplicationProtocol = dummyApplicationProtocol.substring(('tcp-client-interface-1-0:PROTOCOL_TYPE_').length);\r",
													"\r",
													"    let dummyIpv4Address = RandomIpAddress();\r",
													"    dummyApplicationAddress = {\r",
													"        \"ip-address\": {\r",
													"            \"ipv-4-address\": dummyIpv4Address\r",
													"        }\r",
													"    };\r",
													"\r",
													"    dummyApplicationPort = RandomTcpPort();\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(error);\r",
													"    console.log(\"! Input Data could not be loaded.\");\r",
													"}\r",
													"\r",
													"/****************************************************************************************\r",
													"* Defining Dummy Parameters\r",
													"****************************************************************************************/\r",
													"var USER_NAME;\r",
													"var ORIGINATOR;\r",
													"var X_CORRELATOR;\r",
													"var TRACE_INDICATOR;\r",
													"var CUSTOMER_JOURNEY;\r",
													"try {\r",
													"    USER_NAME = APPLICATION.userName;\r",
													"    ORIGINATOR = \"Postman\";\r",
													"    X_CORRELATOR = CreateXCorrelator();\r",
													"    TRACE_INDICATOR = \"1\";\r",
													"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
													"    \r",
													"} catch (error) {\r",
													"    console.log(\"! Could not define dummy values for parameters. \");\r",
													"}\r",
													"\r",
													"/****************************************************************************************\r",
													"* Defining Request Body\r",
													"****************************************************************************************/\r",
													"var REQUEST_BODY;\r",
													"try {\r",
													"    REQUEST_BODY = '{'\r",
													"        + '\"new-application-name\" : ' + '\"' + newApplicationName + '\",'\r",
													"        + '\"new-application-release\" : ' + '\"' + newApplicationRelease + '\",'\r",
													"        + '\"new-application-protocol\" : ' + '\"' + dummyApplicationProtocol + '\",'\r",
													"        + '\"new-application-address\" : ' + JSON.stringify(dummyApplicationAddress) + ','\r",
													"        + '\"new-application-port\" : ' + dummyApplicationPort\r",
													"    +'}';\r",
													"} catch (error) {\r",
													"    console.log(\"!Could not define request body. \");\r",
													"}\r",
													"/****************************************************************************************\r",
													"* Setting Collection Variables\r",
													"****************************************************************************************/\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Setting Local Variables and Preparing the Request\r",
													"****************************************************************************************/\r",
													"try {\r",
													"    let URI;\r",
													"    URI = APPLICATION.serverUrl + \"/v1/bequeath-your-data-and-die\";\r",
													"\r",
													"    let ACCEPT;\r",
													"    ACCEPT = \"application/json\";\r",
													"\r",
													"    let CONTENT_TYPE;\r",
													"    CONTENT_TYPE = \"application/json\";\r",
													"\r",
													"    let parameters;\r",
													"    parameters = [\"user\", \"originator\", \"x-correlator\", \"trace-indicator\", \"customer-journey\"];\r",
													"\r",
													"    let missingParameter;\r",
													"    missingParameter = GetMissingParameter(parameters);\r",
													"\r",
													"    pm.variables.clear();\r",
													"\r",
													"    pm.variables.set(\"uri\", URI);\r",
													"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
													"\r",
													"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
													"\r",
													"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
													"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
													"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
													"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
													"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
													"\r",
													"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
													"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
													"\r",
													"    pm.request.headers.remove(missingParameter);\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(error);\r",
													"    console.log(\"! Local variables could not be set.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													"\r",
													"function CreateXCorrelator() {\r",
													"    let xCorrelator;\r",
													"    xCorrelator = \"\";\r",
													"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
													"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
													"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
													"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
													"    xCorrelator += GenerateRandomHexString(12);\r",
													"    return xCorrelator;\r",
													"}\r",
													"\r",
													"function GenerateRandomHexString(length) {\r",
													"    var randomRandomHexString = \"\";\r",
													"    while (randomRandomHexString.length < length) {\r",
													"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
													"    }\r",
													"    return randomRandomHexString.substring(0,length);\r",
													"}\r",
													"\r",
													"function GetMissingParameter(parameters) {\r",
													"    let missingParameter;\r",
													"    missingParameter = parameters[Math.floor(Math.random()*parameters.length)];\r",
													"    return missingParameter;\r",
													"}\r",
													"\r",
													"function RandomIpAddress() {\r",
													"    let randomAddress\r",
													"    let addressParts = [];\r",
													"    for ( let i=0; i<4; i++ ) {\r",
													"        addressParts[i] = String(Math.floor(Math.random() * 256));\r",
													"    }\r",
													"    randomAddress = addressParts[0] + \".\" + addressParts[1] + \".\" + addressParts[2] + \".\" + addressParts[3];\r",
													"    return randomAddress;\r",
													"}\r",
													"\r",
													"function RandomTcpPort() {\r",
													"    let randomPort;\r",
													"    randomPort = 2000 + Math.floor( Math.random() * 1000 );\r",
													"    return randomPort;\r",
													"}\r",
													"\r",
													"function GenerateDummyRemoteProtocol(currentProtocol) {\r",
													"    let alternativeProtocolList;\r",
													"    alternativeProtocolList = [  \"tcp-client-interface-1-0:PROTOCOL_TYPE_HTTP\",\r",
													"                                    \"tcp-client-interface-1-0:PROTOCOL_TYPE_HTTPS\"\r",
													"                                ];\r",
													"    let indexOfCurrentProtocol;\r",
													"    indexOfCurrentProtocol = alternativeProtocolList.indexOf(currentProtocol);\r",
													"    if (indexOfCurrentProtocol > -1) {\r",
													"        alternativeProtocolList.splice(indexOfCurrentProtocol, 1);\r",
													"    }\r",
													"\r",
													"    let alternativeProtocol;\r",
													"    let alternativeProtocolIndex;\r",
													"    alternativeProtocolIndex = Math.floor(Math.random() * alternativeProtocolList.length);\r",
													"    alternativeProtocol = alternativeProtocolList[alternativeProtocolIndex]; \r",
													"\r",
													"    return alternativeProtocol;\r",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Extracting Result\r",
													"****************************************************************************************/\r",
													"var RESPONSE_CODE;\r",
													"try {\r",
													"    let response;\r",
													"    response = pm.response;\r",
													"\r",
													"    RESPONSE_CODE = parseInt(response.code);\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Response Code could not be extracted.\");\r",
													"}    \r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Testing\r",
													"****************************************************************************************/\r",
													"try {\r",
													"    pm.test(\"As expected, POST /v1/bequeath-your-data-and-die responds 400, because of missing parameter\", function () {\r",
													"        pm.expect(RESPONSE_CODE).to.equal(400);\r",
													"    });\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Testing could not be executed.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-mock-response-code",
												"value": "400",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{uri}}",
											"host": [
												"{{uri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "initial newRelease/remote-protocol",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"var APPLICATION;\r",
													"var newReleaseTcpClientUuid;\r",
													"var initialReleaseRemoteProtocol;\r",
													"try {\r",
													"    APPLICATION = pm.environment.get(\"application\");\r",
													"    \r",
													"    let newReleaseTcpClientLtp;\r",
													"    newReleaseTcpClientLtp = pm.collectionVariables.get(\"newReleaseTcpClientLtp\");\r",
													"\r",
													"    newReleaseTcpClientUuid = newReleaseTcpClientLtp[\"uuid\"];\r",
													"\r",
													"    initialReleaseRemoteProtocol = newReleaseTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Variables could not be loaded.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Setting Local Variables and Preparing the Request\r",
													"****************************************************************************************/\r",
													"try {\r",
													"    let URI;\r",
													"    URI = APPLICATION.serverUrl \r",
													"            + \"/core-model-1-4:control-construct/logical-termination-point=\" \r",
													"            + newReleaseTcpClientUuid\r",
													"            + \"/layer-protocol=0/tcp-client-interface-1-0:tcp-client-interface-pac/tcp-client-interface-configuration/remote-protocol\";\r",
													"\r",
													"    let REQUEST_BODY;\r",
													"    REQUEST_BODY = '{ '\r",
													"                    +   '\"tcp-client-interface-1-0:remote-protocol\": \"' + initialReleaseRemoteProtocol + '\"'\r",
													"                    + ' }';\r",
													"\r",
													"    let AUTHORIZATION;\r",
													"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
													"\r",
													"    let ACCEPT;\r",
													"    ACCEPT = \"application/json\";\r",
													"\r",
													"    let CONTENT_TYPE;\r",
													"    CONTENT_TYPE = \"application/json\";\r",
													"\r",
													"\r",
													"    pm.variables.clear();\r",
													"\r",
													"    pm.variables.set(\"uri\", URI);\r",
													"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
													"\r",
													"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
													"\r",
													"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
													"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(error)\r",
													"    console.log(\"! Local variables could not be set.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-mock-response-code",
												"value": "204",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{uri}}",
											"host": [
												"{{uri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "initial newRelease/remote-address",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"var APPLICATION;\r",
													"var newReleaseTcpClientUuid;\r",
													"var initialReleaseRemoteAddress;\r",
													"try {\r",
													"    APPLICATION = pm.environment.get(\"application\");\r",
													"    \r",
													"    let newReleaseTcpClientLtp;\r",
													"    newReleaseTcpClientLtp = pm.collectionVariables.get(\"newReleaseTcpClientLtp\");\r",
													"\r",
													"    newReleaseTcpClientUuid = newReleaseTcpClientLtp[\"uuid\"];\r",
													"\r",
													"    initialReleaseRemoteAddress = newReleaseTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-address\"];\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Variables could not be loaded.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Setting Local Variables and Preparing the Request\r",
													"****************************************************************************************/\r",
													"try {\r",
													"    let URI;\r",
													"    URI = APPLICATION.serverUrl \r",
													"            + \"/core-model-1-4:control-construct/logical-termination-point=\"\r",
													"            + newReleaseTcpClientUuid\r",
													"            + \"/layer-protocol=0/tcp-client-interface-1-0:tcp-client-interface-pac/tcp-client-interface-configuration/remote-address\";\r",
													"\r",
													"    let REQUEST_BODY;\r",
													"    REQUEST_BODY = '{ '\r",
													"                    +   '\"tcp-client-interface-1-0:remote-address\": ' + JSON.stringify(initialReleaseRemoteAddress)\r",
													"                    + ' }';\r",
													"\r",
													"    let AUTHORIZATION;\r",
													"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
													"\r",
													"    let ACCEPT;\r",
													"    ACCEPT = \"application/json\";\r",
													"\r",
													"    let CONTENT_TYPE;\r",
													"    CONTENT_TYPE = \"application/json\";\r",
													"\r",
													"    pm.variables.clear();\r",
													"\r",
													"    pm.variables.set(\"uri\", URI);\r",
													"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
													"\r",
													"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
													"\r",
													"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
													"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(error)\r",
													"    console.log(\"! Local variables could not be set.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-mock-response-code",
												"value": "204",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{uri}}",
											"host": [
												"{{uri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "initial newRelease/remote-port",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"var APPLICATION;\r",
													"var newReleaseTcpClientUuid;\r",
													"var initialReleaseRemotePort;\r",
													"try {\r",
													"    APPLICATION = pm.environment.get(\"application\");\r",
													"    \r",
													"    let newReleaseTcpClientLtp;\r",
													"    newReleaseTcpClientLtp = pm.collectionVariables.get(\"newReleaseTcpClientLtp\");\r",
													"\r",
													"    newReleaseTcpClientUuid = newReleaseTcpClientLtp[\"uuid\"];\r",
													"\r",
													"    initialReleaseRemotePort = newReleaseTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-port\"];\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Variables could not be loaded.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Setting Local Variables and Preparing the Request\r",
													"****************************************************************************************/\r",
													"try {\r",
													"    let URI;\r",
													"    URI = APPLICATION.serverUrl \r",
													"            + \"/core-model-1-4:control-construct/logical-termination-point=\" \r",
													"            + newReleaseTcpClientUuid\r",
													"            + \"/layer-protocol=0/tcp-client-interface-1-0:tcp-client-interface-pac/tcp-client-interface-configuration/remote-port\";\r",
													"\r",
													"    let REQUEST_BODY;\r",
													"    REQUEST_BODY = '{ '\r",
													"                    +   '\"tcp-client-interface-1-0:remote-port\": ' + initialReleaseRemotePort\r",
													"                    + ' }';\r",
													"\r",
													"    let AUTHORIZATION;\r",
													"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
													"\r",
													"    let ACCEPT;\r",
													"    ACCEPT = \"application/json\";\r",
													"\r",
													"    let CONTENT_TYPE;\r",
													"    CONTENT_TYPE = \"application/json\";\r",
													"\r",
													"\r",
													"    pm.variables.clear();\r",
													"\r",
													"    pm.variables.set(\"uri\", URI);\r",
													"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
													"\r",
													"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
													"\r",
													"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
													"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(error)\r",
													"    console.log(\"! Local variables could not be set.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-mock-response-code",
												"value": "204",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{uri}}",
											"host": [
												"{{uri}}"
											]
										}
									},
									"response": []
								}
							],
							"description": "## Get parameters checked for completeness?\n#### Preparation:\n- GETing CC (/core-model-1-4:control-construct)\n  - searching CC for op-s of /v1/bequeath-your-data-and-die, storing operation-key\n  - searcing CC for output port of PromptForBequeathingDataCausesTransferOfListOfApplications, find corresponding op-c, http-c and tcp-c, store them\n- POST /v1/bequeath-your-data-and-die with\n  - new-application-name and new-application-release according to chosen http-c\n  - new-application-protocol, new-application-address and new-application-port with random generated dummy values (assure sufficiently high probability that set does not exist!)\n  - operation-key from above\n  - all parameters with realistic values, BUT one randomly chosen parameter (user, originator, x-correlator, trace-indicator or customer-journey) missing (not empty string!)\n\n#### Testing:\n- checking for ResponseCode == 400\n\n#### Clearing:\n- PUT NewRelease/remote-protocol with original value\n- PUT NewRelease/remote-address with original value\n- PUT NewRelease/remote-port with original value"
						},
						{
							"name": "originator parameter correctness",
							"item": [
								{
									"name": "reference /core-model-1-4:control-construct",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"console.log(\"\\n-----  /v1/bequeath-your-data-and-die integration -- originator correctness check -------------------------------\");\r",
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"var APPLICATION;\r",
													"try {\r",
													"    APPLICATION = pm.environment.get(\"application\");\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Environment variables could not be loaded.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Setting Local Variables and Preparing the Request\r",
													"****************************************************************************************/\r",
													"try {\r",
													"    let URI;\r",
													"    URI = APPLICATION.serverUrl + \"/core-model-1-4:control-construct\";\r",
													"\r",
													"    let REQUEST_BODY;\r",
													"    REQUEST_BODY = \"\";\r",
													"\r",
													"    let AUTHORIZATION;\r",
													"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
													"\r",
													"    let ACCEPT;\r",
													"    ACCEPT = \"application/json\";\r",
													"\r",
													"    let CONTENT_TYPE;\r",
													"    CONTENT_TYPE = \"application/json\";\r",
													"\r",
													"\r",
													"    pm.variables.clear();\r",
													"\r",
													"    pm.variables.set(\"uri\", URI);\r",
													"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
													"\r",
													"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
													"\r",
													"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
													"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Local variables could not be set.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Extracting Result\r",
													"****************************************************************************************/\r",
													"var ltpList;\r",
													"var fcList;\r",
													"try {\r",
													"    let response;\r",
													"    response = pm.response;\r",
													"    \r",
													"    let responseCode;\r",
													"    responseCode = parseInt(response.code);\r",
													"    \r",
													"    if ( Math.floor(responseCode/100) === 2 ) {\r",
													"        let responseObject;\r",
													"        responseObject = JSON.parse(response.stream);\r",
													"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
													"        fcList = responseObject[\"core-model-1-4:control-construct\"][\"forwarding-domain\"][0][\"forwarding-construct\"];\r",
													"\r",
													"    } else {\r",
													"        ltpList = [];\r",
													"        fcList = [];\r",
													"    }\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! ltpList could not be extracted.\");\r",
													"}\r",
													"\r",
													"var currentOperationServer;\r",
													"var newReleaseHttpClientLtp;\r",
													"var newReleaseTcpClientLtp;\r",
													"try {\r",
													"    currentOperationServer = FindOperationServer(\"/v1/bequeath-your-data-and-die\", ltpList);\r",
													"\r",
													"    //Bequeath Transfer Of List Of Applications\r",
													"    let bequeathingDataCausesTransferOfListOfApplicationsOperationClientLtp = FindOperationClientUsingCallback(\"PromptForBequeathingDataCausesTransferOfListOfApplications\", fcList, ltpList)\r",
													"\r",
													"    newReleaseHttpClientLtp = FindServingLtp(bequeathingDataCausesTransferOfListOfApplicationsOperationClientLtp, ltpList);\r",
													"    newReleaseTcpClientLtp = FindServingLtp(newReleaseHttpClientLtp, ltpList);\r",
													"    \r",
													"} catch (error) {\r",
													"    console.log(error);\r",
													"    console.log(\"! Reference objects could not be extracted.\");\r",
													"} \r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Setting Collection Variables\r",
													"****************************************************************************************/\r",
													"try {\r",
													"    pm.collectionVariables.clear();\r",
													"    \r",
													"    pm.collectionVariables.set(\"currentOperationServer\", currentOperationServer);\r",
													"    pm.collectionVariables.set(\"newReleaseHttpClientLtp\", newReleaseHttpClientLtp);\r",
													"    pm.collectionVariables.set(\"newReleaseTcpClientLtp\", newReleaseTcpClientLtp);\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Collection variables could not be set.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													"\r",
													"function FindOperationServer(operationName, ltpList) {\r",
													"    let operationServer;\r",
													"    operationServer = \"\";\r",
													"    try {\r",
													"        let sampleUuid;\r",
													"        for(let i=0; i<ltpList.length; i++) {\r",
													"            sampleUuid = ltpList[i][\"uuid\"];\r",
													"            if(sampleUuid.includes(\"op-s-\")) {\r",
													"                let sampleOperationName;\r",
													"                sampleOperationName = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
													"                if(sampleOperationName == operationName) {\r",
													"                    operationServer = ltpList[i];\r",
													"                    return operationServer;\r",
													"                }\r",
													"            }\r",
													"        }\r",
													"    } catch (error) {\r",
													"        console.log(\"! Exception in function : FindOperationServer. \");\r",
													"    }\r",
													"    return operationServer;\r",
													"}\r",
													"\r",
													"\r",
													"function FindOutputFcPortList(forwardingName, fcList) {\r",
													"    let outputFcPortList;\r",
													"    outputFcPortList = [];\r",
													"    try {\r",
													"        for( let i=0; i<fcList.length; i++ ) {\r",
													"            for(let j=0; j<fcList[i][\"name\"].length; j++) {               \r",
													"                if(fcList[i][\"name\"][j][\"value\"] == forwardingName) {\r",
													"                    fcPortList = fcList[i][\"fc-port\"];\r",
													"                    for(let k=0;k<fcPortList.length;k++) {\r",
													"                        if(fcPortList[k][\"port-direction\"] == \"core-model-1-4:PORT_DIRECTION_TYPE_OUTPUT\") {\r",
													"                            outputFcPortList.push(fcPortList[k]);\r",
													"                        }\r",
													"                    }\r",
													"                    return outputFcPortList;\r",
													"                }\r",
													"            }\r",
													"        }\r",
													"    } catch (error) {\r",
													"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
													"    }\r",
													"    return outputFcPortList;\r",
													"}\r",
													"\r",
													"function FindActualInstanceByUuid(expectedUuid, actualLtpList) {\r",
													"    let actualInstance;\r",
													"    actualInstance = {};\r",
													"    try {\r",
													"        for ( let i=0; i<actualLtpList.length; i++ ) {\r",
													"            let sampleUuid;\r",
													"            sampleUuid = actualLtpList[i][\"uuid\"];\r",
													"            if( sampleUuid == expectedUuid ) {\r",
													"                actualInstance = actualLtpList[i];\r",
													"                return actualInstance;\r",
													"            }\r",
													"        }\r",
													"\r",
													"    } catch (error) {\r",
													"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
													"    }\r",
													"    return undefined;\r",
													"}\r",
													"\r",
													"function FindServingLtp(clientLtp, ltpList) {\r",
													"    let servingLtp;\r",
													"    servingLtp = {};\r",
													"    try{\r",
													"        let serverLtpUuid;\r",
													"        serverLtpUuid = clientLtp[\"server-ltp\"][0];\r",
													"        for( let i=0; i<ltpList.length; i++ ) {\r",
													"            let sampleUuid;\r",
													"            sampleUuid = ltpList[i][\"uuid\"];\r",
													"            if( sampleUuid == serverLtpUuid ) {\r",
													"                servingLtp = ltpList[i];\r",
													"                return servingLtp;\r",
													"            }\r",
													"        }\r",
													"    } catch(error) {\r",
													"        console.log(error);\r",
													"        console.log(\"! Exception in function : FindServingLtp. \")\r",
													"    }\r",
													"    return servingLtp;\r",
													"}\r",
													"\r",
													"\r",
													"function FindOperationClientUsingCallback(callback, fcList, ltpList) {\r",
													"    let operationClientLtp\r",
													"    try {\r",
													"        let outputFcPortList = FindOutputFcPortList(callback, fcList);\r",
													"        let randomOutputFcPort = outputFcPortList[Math.floor(Math.random() * outputFcPortList.length)];\r",
													"        let outputLtpUuid = randomOutputFcPort[\"logical-termination-point\"];\r",
													"        operationClientLtp = FindActualInstanceByUuid(outputLtpUuid, ltpList);\r",
													"    } catch (error) {\r",
													"        console.log(error);\r",
													"        console.log(\"! Exception in function FindOperationClientUsingCallback. \");\r",
													"    }\r",
													"    return  operationClientLtp\r",
													"}\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "x-mock-response-code",
												"value": "200",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{uri}}",
											"host": [
												"{{uri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Expected /v1/bequeath-your-data-and-die too short originator",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"console.log(\"\\n----- originator parameter correctness check - length too short -------------------------------\");\r",
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"var APPLICATION;\r",
													"var OPERATION_KEY;\r",
													"var newApplicationName;\r",
													"var newApplicationRelease;\r",
													"var dummyApplicationProtocol;\r",
													"var dummyApplicationAddress;\r",
													"var dummyApplicationPort;\r",
													"try {\r",
													"    APPLICATION = pm.environment.get(\"application\");\r",
													"\r",
													"    let currentOperationServer;\r",
													"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
													"    \r",
													"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
													"\r",
													"    let newReleaseHttpClientLtp;\r",
													"    newReleaseHttpClientLtp = pm.collectionVariables.get(\"newReleaseHttpClientLtp\");\r",
													"\r",
													"    newApplicationName = newReleaseHttpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
													"\r",
													"    newApplicationRelease = newReleaseHttpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"release-number\"];\r",
													"\r",
													"    let newReleaseTcpClientLtp;\r",
													"    newReleaseTcpClientLtp = pm.collectionVariables.get(\"newReleaseTcpClientLtp\");\r",
													"\r",
													"    let protocol = newReleaseTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
													"    dummyApplicationProtocol = GenerateDummyRemoteProtocol(protocol);\r",
													"    dummyApplicationProtocol = dummyApplicationProtocol.substring(('tcp-client-interface-1-0:PROTOCOL_TYPE_').length);\r",
													"\r",
													"    let dummyIpv4Address = RandomIpAddress();\r",
													"    dummyApplicationAddress = {\r",
													"        \"ip-address\": {\r",
													"            \"ipv-4-address\": dummyIpv4Address\r",
													"        }\r",
													"    };\r",
													"    dummyApplicationPort = RandomTcpPort();\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(error);\r",
													"    console.log(\"! Input Data could not be loaded.\");\r",
													"}\r",
													"\r",
													"/****************************************************************************************\r",
													"* Defining Dummy Parameters\r",
													"****************************************************************************************/\r",
													"var USER_NAME;\r",
													"var FAULTY_ORIGINATOR;\r",
													"var X_CORRELATOR;\r",
													"var TRACE_INDICATOR;\r",
													"var CUSTOMER_JOURNEY;\r",
													"try {\r",
													"    USER_NAME = APPLICATION.userName;\r",
													"    FAULTY_ORIGINATOR = GenerateFaultyOriginator();\r",
													"    X_CORRELATOR = CreateXCorrelator();\r",
													"    TRACE_INDICATOR = \"1\";\r",
													"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
													"    \r",
													"} catch (error) {\r",
													"    console.log(\"! Could not define dummy values for parameters. \");\r",
													"}\r",
													"\r",
													"/****************************************************************************************\r",
													"* Defining Request Body\r",
													"****************************************************************************************/\r",
													"var REQUEST_BODY;\r",
													"try {\r",
													"    REQUEST_BODY = '{'\r",
													"        + '\"new-application-name\" : ' + '\"' + newApplicationName + '\",'\r",
													"        + '\"new-application-release\" : ' + '\"' + newApplicationRelease + '\",'\r",
													"        + '\"new-application-protocol\" : ' + '\"' + dummyApplicationProtocol + '\",'\r",
													"        + '\"new-application-address\" : ' + JSON.stringify(dummyApplicationAddress) + ','\r",
													"        + '\"new-application-port\" : ' + dummyApplicationPort\r",
													"    +'}';\r",
													"} catch (error) {\r",
													"    console.log(\"!Could not define request body. \");\r",
													"}\r",
													"/****************************************************************************************\r",
													"* Setting Collection Variables\r",
													"****************************************************************************************/\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Setting Local Variables and Preparing the Request\r",
													"****************************************************************************************/\r",
													"try {\r",
													"    let URI;\r",
													"    URI = APPLICATION.serverUrl + \"/v1/bequeath-your-data-and-die\";\r",
													"\r",
													"    let ACCEPT;\r",
													"    ACCEPT = \"application/json\";\r",
													"\r",
													"    let CONTENT_TYPE;\r",
													"    CONTENT_TYPE = \"application/json\";\r",
													"\r",
													"    pm.variables.clear();\r",
													"\r",
													"    pm.variables.set(\"uri\", URI);\r",
													"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
													"\r",
													"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
													"\r",
													"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
													"    pm.request.headers.upsert({key:\"originator\", value:FAULTY_ORIGINATOR});\r",
													"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
													"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
													"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
													"\r",
													"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
													"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(error);\r",
													"    console.log(\"! Local variables could not be set.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													"function GenerateFaultyOriginator() {\r",
													"    let faultyOriginator;\r",
													"    let length;\r",
													"    let minLength;\r",
													"    minLength = 0;\r",
													"    let maxLength;\r",
													"    maxLength = 2;\r",
													"    length = Math.floor(Math.random() * maxLength) + minLength;\r",
													"    faultyOriginator = GenerateRandomString(length);\r",
													"    return faultyOriginator;\r",
													"}\r",
													"\r",
													"function GenerateRandomString(length) {\r",
													"    let randomString;\r",
													"    randomString = \"\";\r",
													"    try {\r",
													"        let characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\r",
													"        let charactersLength = characters.length;\r",
													"        for (let i = 0; i < length; i++) {\r",
													"            randomString += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
													"        }\r",
													"    } catch (error) {\r",
													"        console.log(\"! Could not generate random string. \");\r",
													"    }\r",
													"    return randomString;\r",
													"}\r",
													"\r",
													"function CreateXCorrelator() {\r",
													"    let xCorrelator;\r",
													"    xCorrelator = \"\";\r",
													"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
													"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
													"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
													"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
													"    xCorrelator += GenerateRandomHexString(12);\r",
													"    return xCorrelator;\r",
													"}\r",
													"\r",
													"function GenerateRandomHexString(length) {\r",
													"    var randomRandomHexString = \"\";\r",
													"    while (randomRandomHexString.length < length) {\r",
													"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
													"    }\r",
													"    return randomRandomHexString.substring(0,length);\r",
													"}\r",
													"\r",
													"function RandomIpAddress() {\r",
													"    let randomAddress\r",
													"    let addressParts = [];\r",
													"    for ( let i=0; i<4; i++ ) {\r",
													"        addressParts[i] = String(Math.floor(Math.random() * 256));\r",
													"    }\r",
													"    randomAddress = addressParts[0] + \".\" + addressParts[1] + \".\" + addressParts[2] + \".\" + addressParts[3];\r",
													"    return randomAddress;\r",
													"}\r",
													"\r",
													"function RandomTcpPort() {\r",
													"    let randomPort;\r",
													"    randomPort = 2000 + Math.floor( Math.random() * 1000 );\r",
													"    return randomPort;\r",
													"}\r",
													"\r",
													"function GenerateDummyRemoteProtocol(currentProtocol) {\r",
													"    let alternativeProtocolList;\r",
													"    alternativeProtocolList = [  \"tcp-client-interface-1-0:PROTOCOL_TYPE_HTTP\",\r",
													"                                    \"tcp-client-interface-1-0:PROTOCOL_TYPE_HTTPS\"\r",
													"                                ];\r",
													"    let indexOfCurrentProtocol;\r",
													"    indexOfCurrentProtocol = alternativeProtocolList.indexOf(currentProtocol);\r",
													"    if (indexOfCurrentProtocol > -1) {\r",
													"        alternativeProtocolList.splice(indexOfCurrentProtocol, 1);\r",
													"    }\r",
													"\r",
													"    let alternativeProtocol;\r",
													"    let alternativeProtocolIndex;\r",
													"    alternativeProtocolIndex = Math.floor(Math.random() * alternativeProtocolList.length);\r",
													"    alternativeProtocol = alternativeProtocolList[alternativeProtocolIndex]; \r",
													"\r",
													"    return alternativeProtocol;\r",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Extracting Result\r",
													"****************************************************************************************/\r",
													"var RESPONSE_CODE;\r",
													"try {\r",
													"    let response;\r",
													"    response = pm.response;\r",
													"\r",
													"    RESPONSE_CODE = parseInt(response.code);\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Response Code could not be extracted.\");\r",
													"}    \r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Testing\r",
													"****************************************************************************************/\r",
													"try {\r",
													"    pm.test(\"As expected, POST /v1/bequeath-your-data-and-die responds 400, because of faulty originator parameter(too short string)\", function () {\r",
													"        pm.expect(RESPONSE_CODE).to.equal(400);\r",
													"    });\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Testing could not be executed.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-mock-response-code",
												"value": "400",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{uri}}",
											"host": [
												"{{uri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "initial newRelease/remote-protocol",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"var APPLICATION;\r",
													"var newReleaseTcpClientUuid;\r",
													"var initialReleaseRemoteProtocol;\r",
													"try {\r",
													"    APPLICATION = pm.environment.get(\"application\");\r",
													"    \r",
													"    let newReleaseTcpClientLtp;\r",
													"    newReleaseTcpClientLtp = pm.collectionVariables.get(\"newReleaseTcpClientLtp\");\r",
													"\r",
													"    newReleaseTcpClientUuid = newReleaseTcpClientLtp[\"uuid\"];\r",
													"\r",
													"    initialReleaseRemoteProtocol = newReleaseTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Variables could not be loaded.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Setting Local Variables and Preparing the Request\r",
													"****************************************************************************************/\r",
													"try {\r",
													"    let URI;\r",
													"    URI = APPLICATION.serverUrl \r",
													"            + \"/core-model-1-4:control-construct/logical-termination-point=\" \r",
													"            + newReleaseTcpClientUuid\r",
													"            + \"/layer-protocol=0/tcp-client-interface-1-0:tcp-client-interface-pac/tcp-client-interface-configuration/remote-protocol\";\r",
													"\r",
													"    let REQUEST_BODY;\r",
													"    REQUEST_BODY = '{ '\r",
													"                    +   '\"tcp-client-interface-1-0:remote-protocol\": \"' + initialReleaseRemoteProtocol + '\"'\r",
													"                    + ' }';\r",
													"\r",
													"    let AUTHORIZATION;\r",
													"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
													"\r",
													"    let ACCEPT;\r",
													"    ACCEPT = \"application/json\";\r",
													"\r",
													"    let CONTENT_TYPE;\r",
													"    CONTENT_TYPE = \"application/json\";\r",
													"\r",
													"\r",
													"    pm.variables.clear();\r",
													"\r",
													"    pm.variables.set(\"uri\", URI);\r",
													"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
													"\r",
													"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
													"\r",
													"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
													"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(error)\r",
													"    console.log(\"! Local variables could not be set.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-mock-response-code",
												"value": "204",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{uri}}",
											"host": [
												"{{uri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "initial newRelease/remote-address",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"var APPLICATION;\r",
													"var newReleaseTcpClientUuid;\r",
													"var initialReleaseRemoteAddress;\r",
													"try {\r",
													"    APPLICATION = pm.environment.get(\"application\");\r",
													"    \r",
													"    let newReleaseTcpClientLtp;\r",
													"    newReleaseTcpClientLtp = pm.collectionVariables.get(\"newReleaseTcpClientLtp\");\r",
													"\r",
													"    newReleaseTcpClientUuid = newReleaseTcpClientLtp[\"uuid\"];\r",
													"\r",
													"    initialReleaseRemoteAddress = newReleaseTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-address\"];\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Variables could not be loaded.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Setting Local Variables and Preparing the Request\r",
													"****************************************************************************************/\r",
													"try {\r",
													"    let URI;\r",
													"    URI = APPLICATION.serverUrl \r",
													"            + \"/core-model-1-4:control-construct/logical-termination-point=\"\r",
													"            + newReleaseTcpClientUuid\r",
													"            + \"/layer-protocol=0/tcp-client-interface-1-0:tcp-client-interface-pac/tcp-client-interface-configuration/remote-address\";\r",
													"\r",
													"    let REQUEST_BODY;\r",
													"    REQUEST_BODY = '{ '\r",
													"                    +   '\"tcp-client-interface-1-0:remote-address\": ' + JSON.stringify(initialReleaseRemoteAddress)\r",
													"                    + ' }';\r",
													"\r",
													"    let AUTHORIZATION;\r",
													"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
													"\r",
													"    let ACCEPT;\r",
													"    ACCEPT = \"application/json\";\r",
													"\r",
													"    let CONTENT_TYPE;\r",
													"    CONTENT_TYPE = \"application/json\";\r",
													"\r",
													"    pm.variables.clear();\r",
													"\r",
													"    pm.variables.set(\"uri\", URI);\r",
													"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
													"\r",
													"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
													"\r",
													"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
													"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(error)\r",
													"    console.log(\"! Local variables could not be set.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-mock-response-code",
												"value": "204",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{uri}}",
											"host": [
												"{{uri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "initial newRelease/remote-port",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"var APPLICATION;\r",
													"var newReleaseTcpClientUuid;\r",
													"var initialReleaseRemotePort;\r",
													"try {\r",
													"    APPLICATION = pm.environment.get(\"application\");\r",
													"    \r",
													"    let newReleaseTcpClientLtp;\r",
													"    newReleaseTcpClientLtp = pm.collectionVariables.get(\"newReleaseTcpClientLtp\");\r",
													"\r",
													"    newReleaseTcpClientUuid = newReleaseTcpClientLtp[\"uuid\"];\r",
													"\r",
													"    initialReleaseRemotePort = newReleaseTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-port\"];\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Variables could not be loaded.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Setting Local Variables and Preparing the Request\r",
													"****************************************************************************************/\r",
													"try {\r",
													"    let URI;\r",
													"    URI = APPLICATION.serverUrl \r",
													"            + \"/core-model-1-4:control-construct/logical-termination-point=\" \r",
													"            + newReleaseTcpClientUuid\r",
													"            + \"/layer-protocol=0/tcp-client-interface-1-0:tcp-client-interface-pac/tcp-client-interface-configuration/remote-port\";\r",
													"\r",
													"    let REQUEST_BODY;\r",
													"    REQUEST_BODY = '{ '\r",
													"                    +   '\"tcp-client-interface-1-0:remote-port\": ' + initialReleaseRemotePort\r",
													"                    + ' }';\r",
													"\r",
													"    let AUTHORIZATION;\r",
													"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
													"\r",
													"    let ACCEPT;\r",
													"    ACCEPT = \"application/json\";\r",
													"\r",
													"    let CONTENT_TYPE;\r",
													"    CONTENT_TYPE = \"application/json\";\r",
													"\r",
													"\r",
													"    pm.variables.clear();\r",
													"\r",
													"    pm.variables.set(\"uri\", URI);\r",
													"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
													"\r",
													"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
													"\r",
													"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
													"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(error)\r",
													"    console.log(\"! Local variables could not be set.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-mock-response-code",
												"value": "204",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{uri}}",
											"host": [
												"{{uri}}"
											]
										}
									},
									"response": []
								}
							],
							"description": "## Gets originator checked for compliance with specification?\n#### Preparation:\n- GETing CC (/core-model-1-4:control-construct)\n  - searching CC for op-s of /v1/bequeath-your-data-and-die, storing operation-key\n  - searcing CC for output port of PromptForBequeathingDataCausesTransferOfListOfApplications, find corresponding op-c, http-c and tcp-c, store them\n- POST /v1/bequeath-your-data-and-die with\n  - new-application-name and new-application-release according to chosen http-c\n  - new-application-protocol, new-application-address and new-application-port with random generated dummy values (assure sufficiently high probability that set does not exist!)\n  - operation-key from above\n  - all parameters with realistic values, BUT \noriginator set to be a string of 0, 1 or 2 (random) letters length (too short).\n\n#### Testing:\n- checking for ResponseCode==400\n\n#### Clearing:\n- PUT NewRelease/remote-protocol with original value\n- PUT NewRelease/remote-address with original value\n- PUT NewRelease/remote-port with original value"
						},
						{
							"name": "x-correlator pattern",
							"item": [
								{
									"name": "reference /core-model-1-4:control-construct",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"console.log(\"\\n----- /v1/bequeath-your-data-and-die integration -- x-correlator pattern correctness check -------------------------------\");\r",
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"var APPLICATION;\r",
													"try {\r",
													"    APPLICATION = pm.environment.get(\"application\");\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Environment variables could not be loaded.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Setting Local Variables and Preparing the Request\r",
													"****************************************************************************************/\r",
													"try {\r",
													"    let URI;\r",
													"    URI = APPLICATION.serverUrl + \"/core-model-1-4:control-construct\";\r",
													"\r",
													"    let REQUEST_BODY;\r",
													"    REQUEST_BODY = \"\";\r",
													"\r",
													"    let AUTHORIZATION;\r",
													"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
													"\r",
													"    let ACCEPT;\r",
													"    ACCEPT = \"application/json\";\r",
													"\r",
													"    let CONTENT_TYPE;\r",
													"    CONTENT_TYPE = \"application/json\";\r",
													"\r",
													"\r",
													"    pm.variables.clear();\r",
													"\r",
													"    pm.variables.set(\"uri\", URI);\r",
													"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
													"\r",
													"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
													"\r",
													"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
													"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Local variables could not be set.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Extracting Result\r",
													"****************************************************************************************/\r",
													"var ltpList;\r",
													"var fcList;\r",
													"try {\r",
													"    let response;\r",
													"    response = pm.response;\r",
													"    \r",
													"    let responseCode;\r",
													"    responseCode = parseInt(response.code);\r",
													"    \r",
													"    if ( Math.floor(responseCode/100) === 2 ) {\r",
													"        let responseObject;\r",
													"        responseObject = JSON.parse(response.stream);\r",
													"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
													"        fcList = responseObject[\"core-model-1-4:control-construct\"][\"forwarding-domain\"][0][\"forwarding-construct\"];\r",
													"\r",
													"    } else {\r",
													"        ltpList = [];\r",
													"        fcList = [];\r",
													"    }\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! ltpList could not be extracted.\");\r",
													"}\r",
													"\r",
													"var currentOperationServer;\r",
													"var newReleaseHttpClientLtp;\r",
													"var newReleaseTcpClientLtp;\r",
													"try {\r",
													"    currentOperationServer = FindOperationServer(\"/v1/bequeath-your-data-and-die\", ltpList);\r",
													"\r",
													"    //Bequeath Transfer Of List Of Applications\r",
													"    let bequeathingDataCausesTransferOfListOfApplicationsOperationClientLtp = FindOperationClientUsingCallback(\"PromptForBequeathingDataCausesTransferOfListOfApplications\", fcList, ltpList)\r",
													"\r",
													"    newReleaseHttpClientLtp = FindServingLtp(bequeathingDataCausesTransferOfListOfApplicationsOperationClientLtp, ltpList);\r",
													"    newReleaseTcpClientLtp = FindServingLtp(newReleaseHttpClientLtp, ltpList);\r",
													"    \r",
													"} catch (error) {\r",
													"    console.log(error);\r",
													"    console.log(\"! Reference objects could not be extracted.\");\r",
													"} \r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Setting Collection Variables\r",
													"****************************************************************************************/\r",
													"try {\r",
													"    pm.collectionVariables.clear();\r",
													"    \r",
													"    pm.collectionVariables.set(\"currentOperationServer\", currentOperationServer);\r",
													"    pm.collectionVariables.set(\"newReleaseHttpClientLtp\", newReleaseHttpClientLtp);\r",
													"    pm.collectionVariables.set(\"newReleaseTcpClientLtp\", newReleaseTcpClientLtp);\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Collection variables could not be set.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													"\r",
													"function FindOperationServer(operationName, ltpList) {\r",
													"    let operationServer;\r",
													"    operationServer = \"\";\r",
													"    try {\r",
													"        let sampleUuid;\r",
													"        for(let i=0; i<ltpList.length; i++) {\r",
													"            sampleUuid = ltpList[i][\"uuid\"];\r",
													"            if(sampleUuid.includes(\"op-s-\")) {\r",
													"                let sampleOperationName;\r",
													"                sampleOperationName = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
													"                if(sampleOperationName == operationName) {\r",
													"                    operationServer = ltpList[i];\r",
													"                    return operationServer;\r",
													"                }\r",
													"            }\r",
													"        }\r",
													"    } catch (error) {\r",
													"        console.log(\"! Exception in function : FindOperationServer. \");\r",
													"    }\r",
													"    return operationServer;\r",
													"}\r",
													"\r",
													"\r",
													"function FindOutputFcPortList(forwardingName, fcList) {\r",
													"    let outputFcPortList;\r",
													"    outputFcPortList = [];\r",
													"    try {\r",
													"        for( let i=0; i<fcList.length; i++ ) {\r",
													"            for(let j=0; j<fcList[i][\"name\"].length; j++) {               \r",
													"                if(fcList[i][\"name\"][j][\"value\"] == forwardingName) {\r",
													"                    fcPortList = fcList[i][\"fc-port\"];\r",
													"                    for(let k=0;k<fcPortList.length;k++) {\r",
													"                        if(fcPortList[k][\"port-direction\"] == \"core-model-1-4:PORT_DIRECTION_TYPE_OUTPUT\") {\r",
													"                            outputFcPortList.push(fcPortList[k]);\r",
													"                        }\r",
													"                    }\r",
													"                    return outputFcPortList;\r",
													"                }\r",
													"            }\r",
													"        }\r",
													"    } catch (error) {\r",
													"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
													"    }\r",
													"    return outputFcPortList;\r",
													"}\r",
													"\r",
													"function FindActualInstanceByUuid(expectedUuid, actualLtpList) {\r",
													"    let actualInstance;\r",
													"    actualInstance = {};\r",
													"    try {\r",
													"        for ( let i=0; i<actualLtpList.length; i++ ) {\r",
													"            let sampleUuid;\r",
													"            sampleUuid = actualLtpList[i][\"uuid\"];\r",
													"            if( sampleUuid == expectedUuid ) {\r",
													"                actualInstance = actualLtpList[i];\r",
													"                return actualInstance;\r",
													"            }\r",
													"        }\r",
													"\r",
													"    } catch (error) {\r",
													"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
													"    }\r",
													"    return undefined;\r",
													"}\r",
													"\r",
													"function FindServingLtp(clientLtp, ltpList) {\r",
													"    let servingLtp;\r",
													"    servingLtp = {};\r",
													"    try{\r",
													"        let serverLtpUuid;\r",
													"        serverLtpUuid = clientLtp[\"server-ltp\"][0];\r",
													"        for( let i=0; i<ltpList.length; i++ ) {\r",
													"            let sampleUuid;\r",
													"            sampleUuid = ltpList[i][\"uuid\"];\r",
													"            if( sampleUuid == serverLtpUuid ) {\r",
													"                servingLtp = ltpList[i];\r",
													"                return servingLtp;\r",
													"            }\r",
													"        }\r",
													"    } catch(error) {\r",
													"        console.log(error);\r",
													"        console.log(\"! Exception in function : FindServingLtp. \")\r",
													"    }\r",
													"    return servingLtp;\r",
													"}\r",
													"\r",
													"\r",
													"function FindOperationClientUsingCallback(callback, fcList, ltpList) {\r",
													"    let operationClientLtp\r",
													"    try {\r",
													"        let outputFcPortList = FindOutputFcPortList(callback, fcList);\r",
													"        let randomOutputFcPort = outputFcPortList[Math.floor(Math.random() * outputFcPortList.length)];\r",
													"        let outputLtpUuid = randomOutputFcPort[\"logical-termination-point\"];\r",
													"        operationClientLtp = FindActualInstanceByUuid(outputLtpUuid, ltpList);\r",
													"    } catch (error) {\r",
													"        console.log(error);\r",
													"        console.log(\"! Exception in function FindOperationClientUsingCallback. \");\r",
													"    }\r",
													"    return  operationClientLtp\r",
													"}\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "x-mock-response-code",
												"value": "200",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{uri}}",
											"host": [
												"{{uri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Expected /v1/bequeath-your-data-and-die with Too short x-correlator",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"console.log(\"\\n----- x-correlator parameter correctness check - too short -------------------------------\");\r",
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"var APPLICATION;\r",
													"var OPERATION_KEY;\r",
													"var newApplicationName;\r",
													"var newApplicationRelease;\r",
													"var dummyApplicationProtocol;\r",
													"var dummyApplicationAddress;\r",
													"var dummyApplicationPort;\r",
													"try {\r",
													"    APPLICATION = pm.environment.get(\"application\");\r",
													"\r",
													"    let currentOperationServer;\r",
													"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
													"    \r",
													"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
													"\r",
													"    let newReleaseHttpClientLtp;\r",
													"    newReleaseHttpClientLtp = pm.collectionVariables.get(\"newReleaseHttpClientLtp\");\r",
													"\r",
													"    newApplicationName = newReleaseHttpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
													"\r",
													"    newApplicationRelease = newReleaseHttpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"release-number\"];\r",
													"\r",
													"    let newReleaseTcpClientLtp;\r",
													"    newReleaseTcpClientLtp = pm.collectionVariables.get(\"newReleaseTcpClientLtp\");\r",
													"\r",
													"    let protocol = newReleaseTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
													"    dummyApplicationProtocol = GenerateDummyRemoteProtocol(protocol);\r",
													"    dummyApplicationProtocol = dummyApplicationProtocol.substring(('tcp-client-interface-1-0:PROTOCOL_TYPE_').length);\r",
													"\r",
													"    let dummyIpv4Address = RandomIpAddress();\r",
													"    dummyApplicationAddress = {\r",
													"        \"ip-address\": {\r",
													"            \"ipv-4-address\": dummyIpv4Address\r",
													"        }\r",
													"    };\r",
													"    dummyApplicationPort = RandomTcpPort();\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(error);\r",
													"    console.log(\"! Input Data could not be loaded.\");\r",
													"}\r",
													"\r",
													"/****************************************************************************************\r",
													"* Defining Dummy Parameters\r",
													"****************************************************************************************/\r",
													"var USER_NAME;\r",
													"var ORIGINATOR;\r",
													"var FAULTY_X_CORRELATOR;\r",
													"var TRACE_INDICATOR;\r",
													"var CUSTOMER_JOURNEY;\r",
													"try {\r",
													"    USER_NAME = APPLICATION.userName;\r",
													"    ORIGINATOR = \"Postman\";\r",
													"    FAULTY_X_CORRELATOR = GenerateFaultyXCorrelator();\r",
													"    TRACE_INDICATOR = \"1\";\r",
													"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
													"    \r",
													"} catch (error) {\r",
													"    console.log(error)\r",
													"    console.log(\"! Could not define dummy values for parameters. \");\r",
													"}\r",
													"\r",
													"/****************************************************************************************\r",
													"* Defining Request Body\r",
													"****************************************************************************************/\r",
													"var REQUEST_BODY;\r",
													"try {\r",
													"    REQUEST_BODY = '{'\r",
													"        + '\"new-application-name\" : ' + '\"' + newApplicationName + '\",'\r",
													"        + '\"new-application-release\" : ' + '\"' + newApplicationRelease + '\",'\r",
													"        + '\"new-application-protocol\" : ' + '\"' + dummyApplicationProtocol + '\",'\r",
													"        + '\"new-application-address\" : ' + JSON.stringify(dummyApplicationAddress) + ','\r",
													"        + '\"new-application-port\" : ' + dummyApplicationPort\r",
													"    +'}';\r",
													"} catch (error) {\r",
													"    console.log(\"!Could not define request body. \");\r",
													"}\r",
													"/****************************************************************************************\r",
													"* Setting Collection Variables\r",
													"****************************************************************************************/\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Setting Local Variables and Preparing the Request\r",
													"****************************************************************************************/\r",
													"try {\r",
													"    let URI;\r",
													"    URI = APPLICATION.serverUrl + \"/v1/bequeath-your-data-and-die\";\r",
													"\r",
													"    let ACCEPT;\r",
													"    ACCEPT = \"application/json\";\r",
													"\r",
													"    let CONTENT_TYPE;\r",
													"    CONTENT_TYPE = \"application/json\";\r",
													"\r",
													"    pm.variables.clear();\r",
													"\r",
													"    pm.variables.set(\"uri\", URI);\r",
													"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
													"\r",
													"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
													"\r",
													"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
													"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
													"    pm.request.headers.upsert({key:\"x-correlator\", value:FAULTY_X_CORRELATOR});\r",
													"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
													"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
													"\r",
													"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
													"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Local variables could not be set.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													"\r",
													"function GenerateFaultyXCorrelator() {\r",
													"    let xCorrelator;\r",
													"    xCorrelator = \"\";\r",
													"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
													"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
													"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
													"    xCorrelator += GenerateRandomHexString(4);\r",
													"    return xCorrelator;\r",
													"}\r",
													"\r",
													"function GenerateRandomHexString(length) {\r",
													"    var randomRandomHexString = \"\";\r",
													"    while (randomRandomHexString.length < length) {\r",
													"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
													"    }\r",
													"    return randomRandomHexString.substring(0,length);\r",
													"}\r",
													"\r",
													"function RandomIpAddress() {\r",
													"    let randomAddress\r",
													"    let addressParts = [];\r",
													"    for ( let i=0; i<4; i++ ) {\r",
													"        addressParts[i] = String(Math.floor(Math.random() * 256));\r",
													"    }\r",
													"    randomAddress = addressParts[0] + \".\" + addressParts[1] + \".\" + addressParts[2] + \".\" + addressParts[3];\r",
													"    return randomAddress;\r",
													"}\r",
													"\r",
													"function RandomTcpPort() {\r",
													"    let randomPort;\r",
													"    randomPort = 2000 + Math.floor( Math.random() * 1000 );\r",
													"    return randomPort;\r",
													"}\r",
													"\r",
													"function GenerateDummyRemoteProtocol(currentProtocol) {\r",
													"    let alternativeProtocolList;\r",
													"    alternativeProtocolList = [  \"tcp-client-interface-1-0:PROTOCOL_TYPE_HTTP\",\r",
													"                                    \"tcp-client-interface-1-0:PROTOCOL_TYPE_HTTPS\"\r",
													"                                ];\r",
													"    let indexOfCurrentProtocol;\r",
													"    indexOfCurrentProtocol = alternativeProtocolList.indexOf(currentProtocol);\r",
													"    if (indexOfCurrentProtocol > -1) {\r",
													"        alternativeProtocolList.splice(indexOfCurrentProtocol, 1);\r",
													"    }\r",
													"\r",
													"    let alternativeProtocol;\r",
													"    let alternativeProtocolIndex;\r",
													"    alternativeProtocolIndex = Math.floor(Math.random() * alternativeProtocolList.length);\r",
													"    alternativeProtocol = alternativeProtocolList[alternativeProtocolIndex]; \r",
													"\r",
													"    return alternativeProtocol;\r",
													"}\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Extracting Result\r",
													"****************************************************************************************/\r",
													"var RESPONSE_CODE;\r",
													"try {\r",
													"    let response;\r",
													"    response = pm.response;\r",
													"\r",
													"    RESPONSE_CODE = parseInt(response.code);\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Response Code could not be extracted.\");\r",
													"}    \r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Testing\r",
													"****************************************************************************************/\r",
													"try {\r",
													"    pm.test(\"As expected, POST /v1/bequeath-your-data-and-die responds 400, because of too short x-correlator value \", function () {\r",
													"        pm.expect(RESPONSE_CODE).to.equal(400);\r",
													"    });\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Testing could not be executed.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-mock-response-code",
												"value": "400",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{uri}}",
											"host": [
												"{{uri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Expected  /v1/bequeath-your-data-and-die with Too long x-correlator",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"console.log(\"\\n----- x-correlator parameter correctness check - too long -------------------------------\");\r",
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"var APPLICATION;\r",
													"var OPERATION_KEY;\r",
													"var newApplicationName;\r",
													"var newApplicationRelease;\r",
													"var dummyApplicationProtocol;\r",
													"var dummyApplicationAddress;\r",
													"var dummyApplicationPort;\r",
													"try {\r",
													"    APPLICATION = pm.environment.get(\"application\");\r",
													"\r",
													"    let currentOperationServer;\r",
													"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
													"    \r",
													"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
													"\r",
													"    let newReleaseHttpClientLtp;\r",
													"    newReleaseHttpClientLtp = pm.collectionVariables.get(\"newReleaseHttpClientLtp\");\r",
													"\r",
													"    newApplicationName = newReleaseHttpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
													"\r",
													"    newApplicationRelease = newReleaseHttpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"release-number\"];\r",
													"\r",
													"    let newReleaseTcpClientLtp;\r",
													"    newReleaseTcpClientLtp = pm.collectionVariables.get(\"newReleaseTcpClientLtp\");\r",
													"\r",
													"    let protocol = newReleaseTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
													"    dummyApplicationProtocol = GenerateDummyRemoteProtocol(protocol);\r",
													"    dummyApplicationProtocol = dummyApplicationProtocol.substring(('tcp-client-interface-1-0:PROTOCOL_TYPE_').length);\r",
													"\r",
													"    let dummyIpv4Address = RandomIpAddress();\r",
													"    dummyApplicationAddress = {\r",
													"        \"ip-address\": {\r",
													"            \"ipv-4-address\": dummyIpv4Address\r",
													"        }\r",
													"    };\r",
													"    dummyApplicationPort = RandomTcpPort();\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(error);\r",
													"    console.log(\"! Input Data could not be loaded.\");\r",
													"}\r",
													"\r",
													"/****************************************************************************************\r",
													"* Defining Dummy Parameters\r",
													"****************************************************************************************/\r",
													"var USER_NAME;\r",
													"var ORIGINATOR;\r",
													"var FAULTY_X_CORRELATOR;\r",
													"var TRACE_INDICATOR;\r",
													"var CUSTOMER_JOURNEY;\r",
													"try {\r",
													"    USER_NAME = APPLICATION.userName;\r",
													"    ORIGINATOR = \"Postman\";\r",
													"    FAULTY_X_CORRELATOR = GenerateFaultyXCorrelator();\r",
													"    TRACE_INDICATOR = \"1\";\r",
													"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
													"    \r",
													"} catch (error) {\r",
													"    console.log(error)\r",
													"    console.log(\"! Could not define dummy values for parameters. \");\r",
													"}\r",
													"\r",
													"/****************************************************************************************\r",
													"* Defining Request Body\r",
													"****************************************************************************************/\r",
													"var REQUEST_BODY;\r",
													"try {\r",
													"    REQUEST_BODY = '{'\r",
													"        + '\"new-application-name\" : ' + '\"' + newApplicationName + '\",'\r",
													"        + '\"new-application-release\" : ' + '\"' + newApplicationRelease + '\",'\r",
													"        + '\"new-application-protocol\" : ' + '\"' + dummyApplicationProtocol + '\",'\r",
													"        + '\"new-application-address\" : ' + JSON.stringify(dummyApplicationAddress) + ',' \r",
													"        + '\"new-application-port\" : ' + dummyApplicationPort\r",
													"    +'}';\r",
													"} catch (error) {\r",
													"    console.log(\"!Could not define request body. \");\r",
													"}\r",
													"/****************************************************************************************\r",
													"* Setting Collection Variables\r",
													"****************************************************************************************/\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Setting Local Variables and Preparing the Request\r",
													"****************************************************************************************/\r",
													"try {\r",
													"    let URI;\r",
													"    URI = APPLICATION.serverUrl + \"/v1/bequeath-your-data-and-die\";\r",
													"\r",
													"    let ACCEPT;\r",
													"    ACCEPT = \"application/json\";\r",
													"\r",
													"    let CONTENT_TYPE;\r",
													"    CONTENT_TYPE = \"application/json\";\r",
													"\r",
													"    pm.variables.clear();\r",
													"\r",
													"    pm.variables.set(\"uri\", URI);\r",
													"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
													"\r",
													"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
													"\r",
													"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
													"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
													"    pm.request.headers.upsert({key:\"x-correlator\", value:FAULTY_X_CORRELATOR});\r",
													"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
													"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
													"\r",
													"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
													"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Local variables could not be set.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													"\r",
													"function GenerateFaultyXCorrelator() {\r",
													"    let xCorrelator;\r",
													"    xCorrelator = \"\";\r",
													"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
													"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
													"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
													"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
													"    xCorrelator += GenerateRandomHexString(12) + \"-\";\r",
													"    xCorrelator += GenerateRandomHexString(12);\r",
													"    return xCorrelator;\r",
													"}\r",
													"\r",
													"function GenerateRandomHexString(length) {\r",
													"    var randomRandomHexString = \"\";\r",
													"    while (randomRandomHexString.length < length) {\r",
													"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
													"    }\r",
													"    return randomRandomHexString.substring(0,length);\r",
													"}\r",
													"\r",
													"function RandomIpAddress() {\r",
													"    let randomAddress\r",
													"    let addressParts = [];\r",
													"    for ( let i=0; i<4; i++ ) {\r",
													"        addressParts[i] = String(Math.floor(Math.random() * 256));\r",
													"    }\r",
													"    randomAddress = addressParts[0] + \".\" + addressParts[1] + \".\" + addressParts[2] + \".\" + addressParts[3];\r",
													"    return randomAddress;\r",
													"}\r",
													"\r",
													"function RandomTcpPort() {\r",
													"    let randomPort;\r",
													"    randomPort = 2000 + Math.floor( Math.random() * 1000 );\r",
													"    return randomPort;\r",
													"}\r",
													"\r",
													"function GenerateDummyRemoteProtocol(currentProtocol) {\r",
													"    let alternativeProtocolList;\r",
													"    alternativeProtocolList = [  \"tcp-client-interface-1-0:PROTOCOL_TYPE_HTTP\",\r",
													"                                    \"tcp-client-interface-1-0:PROTOCOL_TYPE_HTTPS\"\r",
													"                                ];\r",
													"    let indexOfCurrentProtocol;\r",
													"    indexOfCurrentProtocol = alternativeProtocolList.indexOf(currentProtocol);\r",
													"    if (indexOfCurrentProtocol > -1) {\r",
													"        alternativeProtocolList.splice(indexOfCurrentProtocol, 1);\r",
													"    }\r",
													"\r",
													"    let alternativeProtocol;\r",
													"    let alternativeProtocolIndex;\r",
													"    alternativeProtocolIndex = Math.floor(Math.random() * alternativeProtocolList.length);\r",
													"    alternativeProtocol = alternativeProtocolList[alternativeProtocolIndex]; \r",
													"\r",
													"    return alternativeProtocol;\r",
													"}\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Extracting Result\r",
													"****************************************************************************************/\r",
													"var RESPONSE_CODE;\r",
													"try {\r",
													"    let response;\r",
													"    response = pm.response;\r",
													"\r",
													"    RESPONSE_CODE = parseInt(response.code);\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Response Code could not be extracted.\");\r",
													"}    \r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Testing\r",
													"****************************************************************************************/\r",
													"try {\r",
													"    pm.test(\"As expected, POST /v1/bequeath-your-data-and-die responds 400, because of too long x-correlator value \", function () {\r",
													"        pm.expect(RESPONSE_CODE).to.equal(400);\r",
													"    });\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Testing could not be executed.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-mock-response-code",
												"value": "400",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{uri}}",
											"host": [
												"{{uri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Expected /v1/bequeath-your-data-and-die with incorrect characters count x-correlator",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"console.log(\"\\n----- x-correlator parameter correctness check - incorrect characters count -------------------------------\");\r",
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"var APPLICATION;\r",
													"var OPERATION_KEY;\r",
													"var newApplicationName;\r",
													"var newApplicationRelease;\r",
													"var dummyApplicationProtocol;\r",
													"var dummyApplicationAddress;\r",
													"var dummyApplicationPort;\r",
													"try {\r",
													"    APPLICATION = pm.environment.get(\"application\");\r",
													"\r",
													"    let currentOperationServer;\r",
													"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
													"    \r",
													"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
													"\r",
													"    let newReleaseHttpClientLtp;\r",
													"    newReleaseHttpClientLtp = pm.collectionVariables.get(\"newReleaseHttpClientLtp\");\r",
													"\r",
													"    newApplicationName = newReleaseHttpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
													"\r",
													"    newApplicationRelease = newReleaseHttpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"release-number\"];\r",
													"    \r",
													"    let newReleaseTcpClientLtp;\r",
													"    newReleaseTcpClientLtp = pm.collectionVariables.get(\"newReleaseTcpClientLtp\");\r",
													"\r",
													"    let protocol = newReleaseTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
													"    dummyApplicationProtocol = GenerateDummyRemoteProtocol(protocol);\r",
													"    dummyApplicationProtocol = dummyApplicationProtocol.substring(('tcp-client-interface-1-0:PROTOCOL_TYPE_').length);\r",
													"\r",
													"    let dummyIpv4Address = RandomIpAddress();\r",
													"    dummyApplicationAddress = {\r",
													"        \"ip-address\": {\r",
													"            \"ipv-4-address\": dummyIpv4Address\r",
													"        }\r",
													"    };\r",
													"    dummyApplicationPort = RandomTcpPort();\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(error);\r",
													"    console.log(\"! Input Data could not be loaded.\");\r",
													"}\r",
													"\r",
													"/****************************************************************************************\r",
													"* Defining Dummy Parameters\r",
													"****************************************************************************************/\r",
													"var USER_NAME;\r",
													"var ORIGINATOR;\r",
													"var FAULTY_X_CORRELATOR;\r",
													"var TRACE_INDICATOR;\r",
													"var CUSTOMER_JOURNEY;\r",
													"try {\r",
													"    USER_NAME = APPLICATION.userName;\r",
													"    ORIGINATOR = \"Postman\";\r",
													"    FAULTY_X_CORRELATOR = GenerateFaultyXCorrelator();\r",
													"    TRACE_INDICATOR = \"1\";\r",
													"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
													"    \r",
													"} catch (error) {\r",
													"    console.log(error)\r",
													"    console.log(\"! Could not define dummy values for parameters. \");\r",
													"}\r",
													"\r",
													"/****************************************************************************************\r",
													"* Defining Request Body\r",
													"****************************************************************************************/\r",
													"var REQUEST_BODY;\r",
													"try {\r",
													"    REQUEST_BODY = '{'\r",
													"        + '\"new-application-name\" : ' + '\"' + newApplicationName + '\",'\r",
													"        + '\"new-application-release\" : ' + '\"' + newApplicationRelease + '\",'\r",
													"        + '\"new-application-protocol\" : ' + '\"' + dummyApplicationProtocol + '\",'\r",
													"        + '\"new-application-address\" : ' + JSON.stringify(dummyApplicationAddress) + ','\r",
													"        + '\"new-application-port\" : ' +  dummyApplicationPort\r",
													"    +'}';\r",
													"} catch (error) {\r",
													"    console.log(\"!Could not define request body. \");\r",
													"}\r",
													"/****************************************************************************************\r",
													"* Setting Collection Variables\r",
													"****************************************************************************************/\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Setting Local Variables and Preparing the Request\r",
													"****************************************************************************************/\r",
													"try {\r",
													"    let URI;\r",
													"    URI = APPLICATION.serverUrl + \"/v1/bequeath-your-data-and-die\";\r",
													"\r",
													"    let ACCEPT;\r",
													"    ACCEPT = \"application/json\";\r",
													"\r",
													"    let CONTENT_TYPE;\r",
													"    CONTENT_TYPE = \"application/json\";\r",
													"\r",
													"    pm.variables.clear();\r",
													"\r",
													"    pm.variables.set(\"uri\", URI);\r",
													"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
													"\r",
													"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
													"\r",
													"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
													"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
													"    pm.request.headers.upsert({key:\"x-correlator\", value:FAULTY_X_CORRELATOR});\r",
													"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
													"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
													"\r",
													"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
													"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Local variables could not be set.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													"\r",
													"function GenerateFaultyXCorrelator() {\r",
													"    let xCorrelator;\r",
													"    xCorrelator = \"\";\r",
													"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
													"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
													"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
													"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
													"    xCorrelator += GenerateRandomHexString(12);\r",
													"\r",
													"    let faultyElementLength;\r",
													"    faultyElementLength = Math.floor(Math.random() * 3) + 1;\r",
													"    let faultyElement;\r",
													"    faultyElement = GenerateRandomHexString(faultyElementLength);\r",
													"\r",
													"    let xCorrelatorParts;\r",
													"    xCorrelatorParts = xCorrelator.split(\"-\");\r",
													"    let faultyXCorrelatorPart;\r",
													"    faultyXCorrelatorPart = Math.floor(Math.random() * xCorrelatorParts.length);\r",
													"\r",
													"    xCorrelatorParts[faultyXCorrelatorPart] = faultyElement;\r",
													"    xCorrelator = xCorrelatorParts.join(\"-\");\r",
													"    return xCorrelator;\r",
													"}\r",
													"\r",
													"function GenerateRandomHexString(length) {\r",
													"    var randomRandomHexString = \"\";\r",
													"    while (randomRandomHexString.length < length) {\r",
													"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
													"    }\r",
													"    return randomRandomHexString.substring(0,length);\r",
													"}\r",
													"\r",
													"function RandomIpAddress() {\r",
													"    let randomAddress\r",
													"    let addressParts = [];\r",
													"    for ( let i=0; i<4; i++ ) {\r",
													"        addressParts[i] = String(Math.floor(Math.random() * 256));\r",
													"    }\r",
													"    randomAddress = addressParts[0] + \".\" + addressParts[1] + \".\" + addressParts[2] + \".\" + addressParts[3];\r",
													"    return randomAddress;\r",
													"}\r",
													"\r",
													"function RandomTcpPort() {\r",
													"    let randomPort;\r",
													"    randomPort = 2000 + Math.floor( Math.random() * 1000 );\r",
													"    return randomPort;\r",
													"}\r",
													"\r",
													"function GenerateDummyRemoteProtocol(currentProtocol) {\r",
													"    let alternativeProtocolList;\r",
													"    alternativeProtocolList = [  \"tcp-client-interface-1-0:PROTOCOL_TYPE_HTTP\",\r",
													"                                    \"tcp-client-interface-1-0:PROTOCOL_TYPE_HTTPS\"\r",
													"                                ];\r",
													"    let indexOfCurrentProtocol;\r",
													"    indexOfCurrentProtocol = alternativeProtocolList.indexOf(currentProtocol);\r",
													"    if (indexOfCurrentProtocol > -1) {\r",
													"        alternativeProtocolList.splice(indexOfCurrentProtocol, 1);\r",
													"    }\r",
													"\r",
													"    let alternativeProtocol;\r",
													"    let alternativeProtocolIndex;\r",
													"    alternativeProtocolIndex = Math.floor(Math.random() * alternativeProtocolList.length);\r",
													"    alternativeProtocol = alternativeProtocolList[alternativeProtocolIndex]; \r",
													"\r",
													"    return alternativeProtocol;\r",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Extracting Result\r",
													"****************************************************************************************/\r",
													"var RESPONSE_CODE;\r",
													"try {\r",
													"    let response;\r",
													"    response = pm.response;\r",
													"\r",
													"    RESPONSE_CODE = parseInt(response.code);\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Response Code could not be extracted.\");\r",
													"}    \r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Testing\r",
													"****************************************************************************************/\r",
													"try {\r",
													"    pm.test(\"As expected, POST /v1/bequeath-your-data-and-die responds 400, because of incorrect character count of x-correlator value \", function () {\r",
													"        pm.expect(RESPONSE_CODE).to.equal(400);\r",
													"    });\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Testing could not be executed.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-mock-response-code",
												"value": "400",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{uri}}",
											"host": [
												"{{uri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Expected /v1/bequeath-your-data-and-die with incorrect separator x-correlator",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"console.log(\"\\n----- x-correlator parameter correctness check - incorrect separator -------------------------------\");\r",
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"var APPLICATION;\r",
													"var OPERATION_KEY;\r",
													"var newApplicationName;\r",
													"var newApplicationRelease;\r",
													"var dummyApplicationProtocol;\r",
													"var dummyApplicationAddress;\r",
													"var dummyApplicationPort;\r",
													"try {\r",
													"    APPLICATION = pm.environment.get(\"application\");\r",
													"\r",
													"    let currentOperationServer;\r",
													"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
													"    \r",
													"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
													"\r",
													"    let newReleaseHttpClientLtp;\r",
													"    newReleaseHttpClientLtp = pm.collectionVariables.get(\"newReleaseHttpClientLtp\");\r",
													"\r",
													"    newApplicationName = newReleaseHttpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
													"\r",
													"    newApplicationRelease = newReleaseHttpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"release-number\"];\r",
													"\r",
													"    let newReleaseTcpClientLtp;\r",
													"    newReleaseTcpClientLtp = pm.collectionVariables.get(\"newReleaseTcpClientLtp\");\r",
													"\r",
													"    let protocol = newReleaseTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
													"    dummyApplicationProtocol = GenerateDummyRemoteProtocol(protocol);\r",
													"    dummyApplicationProtocol = dummyApplicationProtocol.substring(('tcp-client-interface-1-0:PROTOCOL_TYPE_').length);\r",
													"\r",
													"    let dummyIpv4Address = RandomIpAddress();\r",
													"    dummyApplicationAddress = {\r",
													"        \"ip-address\": {\r",
													"            \"ipv-4-address\": dummyIpv4Address\r",
													"        }\r",
													"    };\r",
													"    dummyApplicationPort = RandomTcpPort();\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(error);\r",
													"    console.log(\"! Input Data could not be loaded.\");\r",
													"}\r",
													"\r",
													"/****************************************************************************************\r",
													"* Defining Dummy Parameters\r",
													"****************************************************************************************/\r",
													"var USER_NAME;\r",
													"var ORIGINATOR;\r",
													"var FAULTY_X_CORRELATOR;\r",
													"var TRACE_INDICATOR;\r",
													"var CUSTOMER_JOURNEY;\r",
													"try {\r",
													"    USER_NAME = APPLICATION.userName;\r",
													"    ORIGINATOR = \"Postman\";\r",
													"    FAULTY_X_CORRELATOR = GenerateFaultyXCorrelator();\r",
													"    TRACE_INDICATOR = \"1\";\r",
													"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
													"    \r",
													"} catch (error) {\r",
													"    console.log(error)\r",
													"    console.log(\"! Could not define dummy values for parameters. \");\r",
													"}\r",
													"\r",
													"/****************************************************************************************\r",
													"* Defining Request Body\r",
													"****************************************************************************************/\r",
													"var REQUEST_BODY;\r",
													"try {\r",
													"    REQUEST_BODY = '{'\r",
													"        + '\"new-application-name\" : ' + '\"' + newApplicationName + '\",'\r",
													"        + '\"new-application-release\" : ' + '\"' + newApplicationRelease + '\",'\r",
													"        + '\"new-application-protocol\" : ' + '\"' + dummyApplicationProtocol + '\",'\r",
													"        + '\"new-application-address\" : ' + JSON.stringify(dummyApplicationAddress) + ','\r",
													"        + '\"new-application-port\" : ' + dummyApplicationPort\r",
													"    +'}';\r",
													"} catch (error) {\r",
													"    console.log(\"!Could not define request body. \");\r",
													"}\r",
													"/****************************************************************************************\r",
													"* Setting Collection Variables\r",
													"****************************************************************************************/\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Setting Local Variables and Preparing the Request\r",
													"****************************************************************************************/\r",
													"try {\r",
													"    let URI;\r",
													"    URI = APPLICATION.serverUrl + \"/v1/bequeath-your-data-and-die\";\r",
													"\r",
													"    let ACCEPT;\r",
													"    ACCEPT = \"application/json\";\r",
													"\r",
													"    let CONTENT_TYPE;\r",
													"    CONTENT_TYPE = \"application/json\";\r",
													"\r",
													"    pm.variables.clear();\r",
													"\r",
													"    pm.variables.set(\"uri\", URI);\r",
													"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
													"\r",
													"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
													"\r",
													"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
													"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
													"    pm.request.headers.upsert({key:\"x-correlator\", value:FAULTY_X_CORRELATOR});\r",
													"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
													"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
													"\r",
													"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
													"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Local variables could not be set.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													"\r",
													"function GenerateFaultyXCorrelator() {\r",
													"    let xCorrelator;\r",
													"    xCorrelator = \"\";\r",
													"\r",
													"    let separators;\r",
													"    separators = \".:;/\";\r",
													"    let separatorsLength;\r",
													"    separatorsLength = separators.length;\r",
													"\r",
													"    let faultySeparator;\r",
													"    faultySeparator = separators.charAt(Math.floor(Math.random() * separatorsLength));\r",
													"\r",
													"    xCorrelator += GenerateRandomHexString(8) + faultySeparator;\r",
													"    xCorrelator += GenerateRandomHexString(4) + faultySeparator;\r",
													"    xCorrelator += GenerateRandomHexString(4) + faultySeparator;\r",
													"    xCorrelator += GenerateRandomHexString(4) + faultySeparator;\r",
													"    xCorrelator += GenerateRandomHexString(12);\r",
													"\r",
													"    return xCorrelator;\r",
													"}\r",
													"\r",
													"function GenerateRandomHexString(length) {\r",
													"    var randomRandomHexString = \"\";\r",
													"    while (randomRandomHexString.length < length) {\r",
													"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
													"    }\r",
													"    return randomRandomHexString.substring(0,length);\r",
													"}\r",
													"\r",
													"function RandomIpAddress() {\r",
													"    let randomAddress\r",
													"    let addressParts = [];\r",
													"    for ( let i=0; i<4; i++ ) {\r",
													"        addressParts[i] = String(Math.floor(Math.random() * 256));\r",
													"    }\r",
													"    randomAddress = addressParts[0] + \".\" + addressParts[1] + \".\" + addressParts[2] + \".\" + addressParts[3];\r",
													"    return randomAddress;\r",
													"}\r",
													"\r",
													"function RandomTcpPort() {\r",
													"    let randomPort;\r",
													"    randomPort = 2000 + Math.floor( Math.random() * 1000 );\r",
													"    return randomPort;\r",
													"}\r",
													"\r",
													"function GenerateDummyRemoteProtocol(currentProtocol) {\r",
													"    let alternativeProtocolList;\r",
													"    alternativeProtocolList = [  \"tcp-client-interface-1-0:PROTOCOL_TYPE_HTTP\",\r",
													"                                    \"tcp-client-interface-1-0:PROTOCOL_TYPE_HTTPS\"\r",
													"                                ];\r",
													"    let indexOfCurrentProtocol;\r",
													"    indexOfCurrentProtocol = alternativeProtocolList.indexOf(currentProtocol);\r",
													"    if (indexOfCurrentProtocol > -1) {\r",
													"        alternativeProtocolList.splice(indexOfCurrentProtocol, 1);\r",
													"    }\r",
													"\r",
													"    let alternativeProtocol;\r",
													"    let alternativeProtocolIndex;\r",
													"    alternativeProtocolIndex = Math.floor(Math.random() * alternativeProtocolList.length);\r",
													"    alternativeProtocol = alternativeProtocolList[alternativeProtocolIndex]; \r",
													"\r",
													"    return alternativeProtocol;\r",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Extracting Result\r",
													"****************************************************************************************/\r",
													"var RESPONSE_CODE;\r",
													"try {\r",
													"    let response;\r",
													"    response = pm.response;\r",
													"\r",
													"    RESPONSE_CODE = parseInt(response.code);\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Response Code could not be extracted.\");\r",
													"}    \r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Testing\r",
													"****************************************************************************************/\r",
													"try {\r",
													"    pm.test(\"As expected, POST /v1/bequeath-your-data-and-die responds 400, because of incorrect separator in x-correlator value \", function () {\r",
													"        pm.expect(RESPONSE_CODE).to.equal(400);\r",
													"    });\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Testing could not be executed.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-mock-response-code",
												"value": "400",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{uri}}",
											"host": [
												"{{uri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "initial newRelease/remote-protocol",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"var APPLICATION;\r",
													"var newReleaseTcpClientUuid;\r",
													"var initialReleaseRemoteProtocol;\r",
													"try {\r",
													"    APPLICATION = pm.environment.get(\"application\");\r",
													"    \r",
													"    let newReleaseTcpClientLtp;\r",
													"    newReleaseTcpClientLtp = pm.collectionVariables.get(\"newReleaseTcpClientLtp\");\r",
													"\r",
													"    newReleaseTcpClientUuid = newReleaseTcpClientLtp[\"uuid\"];\r",
													"\r",
													"    initialReleaseRemoteProtocol = newReleaseTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Variables could not be loaded.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Setting Local Variables and Preparing the Request\r",
													"****************************************************************************************/\r",
													"try {\r",
													"    let URI;\r",
													"    URI = APPLICATION.serverUrl \r",
													"            + \"/core-model-1-4:control-construct/logical-termination-point=\" \r",
													"            + newReleaseTcpClientUuid\r",
													"            + \"/layer-protocol=0/tcp-client-interface-1-0:tcp-client-interface-pac/tcp-client-interface-configuration/remote-protocol\";\r",
													"\r",
													"    let REQUEST_BODY;\r",
													"    REQUEST_BODY = '{ '\r",
													"                    +   '\"tcp-client-interface-1-0:remote-protocol\": \"' + initialReleaseRemoteProtocol + '\"'\r",
													"                    + ' }';\r",
													"\r",
													"    let AUTHORIZATION;\r",
													"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
													"\r",
													"    let ACCEPT;\r",
													"    ACCEPT = \"application/json\";\r",
													"\r",
													"    let CONTENT_TYPE;\r",
													"    CONTENT_TYPE = \"application/json\";\r",
													"\r",
													"\r",
													"    pm.variables.clear();\r",
													"\r",
													"    pm.variables.set(\"uri\", URI);\r",
													"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
													"\r",
													"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
													"\r",
													"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
													"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(error)\r",
													"    console.log(\"! Local variables could not be set.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-mock-response-code",
												"value": "204",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{uri}}",
											"host": [
												"{{uri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "initial newRelease/remote-address",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"var APPLICATION;\r",
													"var newReleaseTcpClientUuid;\r",
													"var initialReleaseRemoteAddress;\r",
													"try {\r",
													"    APPLICATION = pm.environment.get(\"application\");\r",
													"    \r",
													"    let newReleaseTcpClientLtp;\r",
													"    newReleaseTcpClientLtp = pm.collectionVariables.get(\"newReleaseTcpClientLtp\");\r",
													"\r",
													"    newReleaseTcpClientUuid = newReleaseTcpClientLtp[\"uuid\"];\r",
													"\r",
													"    initialReleaseRemoteAddress = newReleaseTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-address\"];\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Variables could not be loaded.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Setting Local Variables and Preparing the Request\r",
													"****************************************************************************************/\r",
													"try {\r",
													"    let URI;\r",
													"    URI = APPLICATION.serverUrl \r",
													"            + \"/core-model-1-4:control-construct/logical-termination-point=\"\r",
													"            + newReleaseTcpClientUuid\r",
													"            + \"/layer-protocol=0/tcp-client-interface-1-0:tcp-client-interface-pac/tcp-client-interface-configuration/remote-address\";\r",
													"\r",
													"    let REQUEST_BODY;\r",
													"    REQUEST_BODY = '{ '\r",
													"                    +   '\"tcp-client-interface-1-0:remote-address\": ' + JSON.stringify(initialReleaseRemoteAddress)\r",
													"                    + ' }';\r",
													"\r",
													"    let AUTHORIZATION;\r",
													"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
													"\r",
													"    let ACCEPT;\r",
													"    ACCEPT = \"application/json\";\r",
													"\r",
													"    let CONTENT_TYPE;\r",
													"    CONTENT_TYPE = \"application/json\";\r",
													"\r",
													"    pm.variables.clear();\r",
													"\r",
													"    pm.variables.set(\"uri\", URI);\r",
													"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
													"\r",
													"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
													"\r",
													"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
													"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(error)\r",
													"    console.log(\"! Local variables could not be set.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-mock-response-code",
												"value": "204",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{uri}}",
											"host": [
												"{{uri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "initial newRelease/remote-port",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"var APPLICATION;\r",
													"var newReleaseTcpClientUuid;\r",
													"var initialReleaseRemotePort;\r",
													"try {\r",
													"    APPLICATION = pm.environment.get(\"application\");\r",
													"    \r",
													"    let newReleaseTcpClientLtp;\r",
													"    newReleaseTcpClientLtp = pm.collectionVariables.get(\"newReleaseTcpClientLtp\");\r",
													"\r",
													"    newReleaseTcpClientUuid = newReleaseTcpClientLtp[\"uuid\"];\r",
													"\r",
													"    initialReleaseRemotePort = newReleaseTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-port\"];\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Variables could not be loaded.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Setting Local Variables and Preparing the Request\r",
													"****************************************************************************************/\r",
													"try {\r",
													"    let URI;\r",
													"    URI = APPLICATION.serverUrl \r",
													"            + \"/core-model-1-4:control-construct/logical-termination-point=\" \r",
													"            + newReleaseTcpClientUuid\r",
													"            + \"/layer-protocol=0/tcp-client-interface-1-0:tcp-client-interface-pac/tcp-client-interface-configuration/remote-port\";\r",
													"\r",
													"    let REQUEST_BODY;\r",
													"    REQUEST_BODY = '{ '\r",
													"                    +   '\"tcp-client-interface-1-0:remote-port\": ' + initialReleaseRemotePort\r",
													"                    + ' }';\r",
													"\r",
													"    let AUTHORIZATION;\r",
													"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
													"\r",
													"    let ACCEPT;\r",
													"    ACCEPT = \"application/json\";\r",
													"\r",
													"    let CONTENT_TYPE;\r",
													"    CONTENT_TYPE = \"application/json\";\r",
													"\r",
													"\r",
													"    pm.variables.clear();\r",
													"\r",
													"    pm.variables.set(\"uri\", URI);\r",
													"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
													"\r",
													"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
													"\r",
													"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
													"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(error)\r",
													"    console.log(\"! Local variables could not be set.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-mock-response-code",
												"value": "204",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{uri}}",
											"host": [
												"{{uri}}"
											]
										}
									},
									"response": []
								}
							],
							"description": "## Gets x-correlator checked for complying the pattern?\n#### Preparation:\n- GETing CC (/core-model-1-4:control-construct)\n  - searching CC for op-s of /v1/bequeath-your-data-and-die, storing operation-key\n  - searcing CC for output port of PromptForBequeathingDataCausesTransferOfListOfApplications, find corresponding op-c, http-c and tcp-c, store them\n- POST /v1/bequeath-your-data-and-die with\n  - new-application-name and new-application-release according to chosen http-c\n  - new-application-protocol, new-application-address and new-application-port with random generated dummy values (assure sufficiently high probability that set does not exist!)\n  - operation-key from above\n  - reasonable parameters, BUT dummyXCorrelators differing from the pattern in various ways (e.g. empty string).\n\n#### Testing:\n- checking for ResponseCode==400\n\n#### Clearing:\n- PUT NewRelease/remote-protocol with original value\n- PUT NewRelease/remote-address with original value\n- PUT NewRelease/remote-port with original value"
						},
						{
							"name": "trace-indicator pattern",
							"item": [
								{
									"name": "reference /core-model-1-4:control-construct",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"console.log(\"\\n----- /v1/bequeath-your-data-and-die integration -- trace-indicator pattern correctness check -------------------------------\");\r",
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"var APPLICATION;\r",
													"try {\r",
													"    APPLICATION = pm.environment.get(\"application\");\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Environment variables could not be loaded.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Setting Local Variables and Preparing the Request\r",
													"****************************************************************************************/\r",
													"try {\r",
													"    let URI;\r",
													"    URI = APPLICATION.serverUrl + \"/core-model-1-4:control-construct\";\r",
													"\r",
													"    let REQUEST_BODY;\r",
													"    REQUEST_BODY = \"\";\r",
													"\r",
													"    let AUTHORIZATION;\r",
													"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
													"\r",
													"    let ACCEPT;\r",
													"    ACCEPT = \"application/json\";\r",
													"\r",
													"    let CONTENT_TYPE;\r",
													"    CONTENT_TYPE = \"application/json\";\r",
													"\r",
													"\r",
													"    pm.variables.clear();\r",
													"\r",
													"    pm.variables.set(\"uri\", URI);\r",
													"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
													"\r",
													"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
													"\r",
													"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
													"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Local variables could not be set.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Extracting Result\r",
													"****************************************************************************************/\r",
													"var ltpList;\r",
													"var fcList;\r",
													"try {\r",
													"    let response;\r",
													"    response = pm.response;\r",
													"    \r",
													"    let responseCode;\r",
													"    responseCode = parseInt(response.code);\r",
													"    \r",
													"    if ( Math.floor(responseCode/100) === 2 ) {\r",
													"        let responseObject;\r",
													"        responseObject = JSON.parse(response.stream);\r",
													"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
													"        fcList = responseObject[\"core-model-1-4:control-construct\"][\"forwarding-domain\"][0][\"forwarding-construct\"];\r",
													"\r",
													"    } else {\r",
													"        ltpList = [];\r",
													"        fcList = [];\r",
													"    }\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! ltpList could not be extracted.\");\r",
													"}\r",
													"\r",
													"var currentOperationServer;\r",
													"var newReleaseHttpClientLtp;\r",
													"var newReleaseTcpClientLtp;\r",
													"try {\r",
													"    currentOperationServer = FindOperationServer(\"/v1/bequeath-your-data-and-die\", ltpList);\r",
													"\r",
													"    //Bequeath Transfer Of List Of Applications\r",
													"    let bequeathingDataCausesTransferOfListOfApplicationsOperationClientLtp = FindOperationClientUsingCallback(\"PromptForBequeathingDataCausesTransferOfListOfApplications\", fcList, ltpList)\r",
													"\r",
													"    newReleaseHttpClientLtp = FindServingLtp(bequeathingDataCausesTransferOfListOfApplicationsOperationClientLtp, ltpList);\r",
													"    newReleaseTcpClientLtp = FindServingLtp(newReleaseHttpClientLtp, ltpList);\r",
													"    \r",
													"} catch (error) {\r",
													"    console.log(error);\r",
													"    console.log(\"! Reference objects could not be extracted.\");\r",
													"} \r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Setting Collection Variables\r",
													"****************************************************************************************/\r",
													"try {\r",
													"    pm.collectionVariables.clear();\r",
													"    \r",
													"    pm.collectionVariables.set(\"currentOperationServer\", currentOperationServer);\r",
													"    pm.collectionVariables.set(\"newReleaseHttpClientLtp\", newReleaseHttpClientLtp);\r",
													"    pm.collectionVariables.set(\"newReleaseTcpClientLtp\", newReleaseTcpClientLtp);\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Collection variables could not be set.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													"\r",
													"function FindOperationServer(operationName, ltpList) {\r",
													"    let operationServer;\r",
													"    operationServer = \"\";\r",
													"    try {\r",
													"        let sampleUuid;\r",
													"        for(let i=0; i<ltpList.length; i++) {\r",
													"            sampleUuid = ltpList[i][\"uuid\"];\r",
													"            if(sampleUuid.includes(\"op-s-\")) {\r",
													"                let sampleOperationName;\r",
													"                sampleOperationName = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
													"                if(sampleOperationName == operationName) {\r",
													"                    operationServer = ltpList[i];\r",
													"                    return operationServer;\r",
													"                }\r",
													"            }\r",
													"        }\r",
													"    } catch (error) {\r",
													"        console.log(\"! Exception in function : FindOperationServer. \");\r",
													"    }\r",
													"    return operationServer;\r",
													"}\r",
													"\r",
													"\r",
													"function FindOutputFcPortList(forwardingName, fcList) {\r",
													"    let outputFcPortList;\r",
													"    outputFcPortList = [];\r",
													"    try {\r",
													"        for( let i=0; i<fcList.length; i++ ) {\r",
													"            for(let j=0; j<fcList[i][\"name\"].length; j++) {               \r",
													"                if(fcList[i][\"name\"][j][\"value\"] == forwardingName) {\r",
													"                    fcPortList = fcList[i][\"fc-port\"];\r",
													"                    for(let k=0;k<fcPortList.length;k++) {\r",
													"                        if(fcPortList[k][\"port-direction\"] == \"core-model-1-4:PORT_DIRECTION_TYPE_OUTPUT\") {\r",
													"                            outputFcPortList.push(fcPortList[k]);\r",
													"                        }\r",
													"                    }\r",
													"                    return outputFcPortList;\r",
													"                }\r",
													"            }\r",
													"        }\r",
													"    } catch (error) {\r",
													"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
													"    }\r",
													"    return outputFcPortList;\r",
													"}\r",
													"\r",
													"function FindActualInstanceByUuid(expectedUuid, actualLtpList) {\r",
													"    let actualInstance;\r",
													"    actualInstance = {};\r",
													"    try {\r",
													"        for ( let i=0; i<actualLtpList.length; i++ ) {\r",
													"            let sampleUuid;\r",
													"            sampleUuid = actualLtpList[i][\"uuid\"];\r",
													"            if( sampleUuid == expectedUuid ) {\r",
													"                actualInstance = actualLtpList[i];\r",
													"                return actualInstance;\r",
													"            }\r",
													"        }\r",
													"\r",
													"    } catch (error) {\r",
													"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
													"    }\r",
													"    return undefined;\r",
													"}\r",
													"\r",
													"function FindServingLtp(clientLtp, ltpList) {\r",
													"    let servingLtp;\r",
													"    servingLtp = {};\r",
													"    try{\r",
													"        let serverLtpUuid;\r",
													"        serverLtpUuid = clientLtp[\"server-ltp\"][0];\r",
													"        for( let i=0; i<ltpList.length; i++ ) {\r",
													"            let sampleUuid;\r",
													"            sampleUuid = ltpList[i][\"uuid\"];\r",
													"            if( sampleUuid == serverLtpUuid ) {\r",
													"                servingLtp = ltpList[i];\r",
													"                return servingLtp;\r",
													"            }\r",
													"        }\r",
													"    } catch(error) {\r",
													"        console.log(error);\r",
													"        console.log(\"! Exception in function : FindServingLtp. \")\r",
													"    }\r",
													"    return servingLtp;\r",
													"}\r",
													"\r",
													"\r",
													"function FindOperationClientUsingCallback(callback, fcList, ltpList) {\r",
													"    let operationClientLtp\r",
													"    try {\r",
													"        let outputFcPortList = FindOutputFcPortList(callback, fcList);\r",
													"        let randomOutputFcPort = outputFcPortList[Math.floor(Math.random() * outputFcPortList.length)];\r",
													"        let outputLtpUuid = randomOutputFcPort[\"logical-termination-point\"];\r",
													"        operationClientLtp = FindActualInstanceByUuid(outputLtpUuid, ltpList);\r",
													"    } catch (error) {\r",
													"        console.log(error);\r",
													"        console.log(\"! Exception in function FindOperationClientUsingCallback. \");\r",
													"    }\r",
													"    return  operationClientLtp\r",
													"}\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "x-mock-response-code",
												"value": "200",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{uri}}",
											"host": [
												"{{uri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Expected /v1/bequeath-your-data-and-die with letters in trace-indicator",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"console.log(\"\\n----- trace-indicator parameter correctness check - presence of letters -------------------------------\");\r",
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"var APPLICATION;\r",
													"var OPERATION_KEY;\r",
													"var newApplicationName;\r",
													"var newApplicationRelease;\r",
													"var dummyApplicationProtocol;\r",
													"var dummyApplicationAddress;\r",
													"var dummyApplicationPort;\r",
													"try {\r",
													"    APPLICATION = pm.environment.get(\"application\");\r",
													"\r",
													"    let currentOperationServer;\r",
													"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
													"    \r",
													"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
													"\r",
													"    let newReleaseHttpClientLtp;\r",
													"    newReleaseHttpClientLtp = pm.collectionVariables.get(\"newReleaseHttpClientLtp\");\r",
													"\r",
													"    newApplicationName = newReleaseHttpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
													"\r",
													"    newApplicationRelease = newReleaseHttpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"release-number\"];\r",
													"\r",
													"    let newReleaseTcpClientLtp;\r",
													"    newReleaseTcpClientLtp = pm.collectionVariables.get(\"newReleaseTcpClientLtp\");\r",
													"\r",
													"    let protocol = newReleaseTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
													"    dummyApplicationProtocol = GenerateDummyRemoteProtocol(protocol);\r",
													"    dummyApplicationProtocol = dummyApplicationProtocol.substring(('tcp-client-interface-1-0:PROTOCOL_TYPE_').length);\r",
													"\r",
													"    let dummyIpv4Address = RandomIpAddress();\r",
													"    dummyApplicationAddress = {\r",
													"        \"ip-address\": {\r",
													"            \"ipv-4-address\": dummyIpv4Address\r",
													"        }\r",
													"    };\r",
													"    dummyApplicationPort = RandomTcpPort();\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(error);\r",
													"    console.log(\"! Input Data could not be loaded.\");\r",
													"}\r",
													"\r",
													"/****************************************************************************************\r",
													"* Defining Dummy Parameters\r",
													"****************************************************************************************/\r",
													"var USER_NAME;\r",
													"var ORIGINATOR;\r",
													"var X_CORRELATOR;\r",
													"var FAULTY_TRACE_INDICATOR;\r",
													"var CUSTOMER_JOURNEY;\r",
													"try {\r",
													"    USER_NAME = APPLICATION.userName;\r",
													"    ORIGINATOR = \"Postman\";\r",
													"    X_CORRELATOR = CreateXCorrelator();\r",
													"    FAULTY_TRACE_INDICATOR = GenerateFaultyTraceIndicator();\r",
													"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
													"    \r",
													"} catch (error) {\r",
													"    console.log(error)\r",
													"    console.log(\"! Could not define dummy values for parameters. \");\r",
													"}\r",
													"\r",
													"/****************************************************************************************\r",
													"* Defining Request Body\r",
													"****************************************************************************************/\r",
													"var REQUEST_BODY;\r",
													"try {\r",
													"    REQUEST_BODY = '{'\r",
													"        + '\"new-application-name\" : ' + '\"' + newApplicationName + '\",'\r",
													"        + '\"new-application-release\" : ' + '\"' + newApplicationRelease + '\",'\r",
													"        + '\"new-application-protocol\" : ' + '\"' + dummyApplicationProtocol + '\",'\r",
													"        + '\"new-application-address\" : ' + JSON.stringify(dummyApplicationAddress) + ','\r",
													"        + '\"new-application-port\" : ' +  dummyApplicationPort\r",
													"    +'}';\r",
													"} catch (error) {\r",
													"    console.log(\"!Could not define request body. \");\r",
													"}\r",
													"/****************************************************************************************\r",
													"* Setting Collection Variables\r",
													"****************************************************************************************/\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Setting Local Variables and Preparing the Request\r",
													"****************************************************************************************/\r",
													"try {\r",
													"    let URI;\r",
													"    URI = APPLICATION.serverUrl + \"/v1/bequeath-your-data-and-die\";\r",
													"\r",
													"    let ACCEPT;\r",
													"    ACCEPT = \"application/json\";\r",
													"\r",
													"    let CONTENT_TYPE;\r",
													"    CONTENT_TYPE = \"application/json\";\r",
													"\r",
													"    pm.variables.clear();\r",
													"\r",
													"    pm.variables.set(\"uri\", URI);\r",
													"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
													"\r",
													"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
													"\r",
													"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
													"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
													"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
													"    pm.request.headers.upsert({key:\"trace-indicator\", value:FAULTY_TRACE_INDICATOR});\r",
													"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
													"\r",
													"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
													"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Local variables could not be set.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													"function GenerateFaultyTraceIndicator() {\r",
													"    let traceIndicator;\r",
													"    traceIndicator = \"\";\r",
													"\r",
													"    let traceIndicatorParts;\r",
													"    traceIndicatorParts = [];\r",
													"    for(let i=0; i<3; i++) {\r",
													"        traceIndicatorParts[i] = Math.floor(Math.random() * 10);\r",
													"    }\r",
													"    let characters;\r",
													"    characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\r",
													"    let charactersLength;\r",
													"    charactersLength = characters.length;\r",
													"    let faultyElement;\r",
													"    faultyElement = characters.charAt(Math.floor(Math.random() * charactersLength));\r",
													"\r",
													"    let faultyTraceIndicatorPart;\r",
													"    faultyTraceIndicatorPart = Math.floor(Math.random() * 3);\r",
													"\r",
													"    traceIndicatorParts[faultyTraceIndicatorPart] = faultyElement;\r",
													"    traceIndicator = traceIndicatorParts.join(\".\");\r",
													"\r",
													"    return traceIndicator;\r",
													"}\r",
													"\r",
													"function CreateXCorrelator() {\r",
													"    let xCorrelator;\r",
													"    xCorrelator = \"\";\r",
													"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
													"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
													"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
													"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
													"    xCorrelator += GenerateRandomHexString(12);\r",
													"    return xCorrelator;\r",
													"}\r",
													"\r",
													"function GenerateRandomHexString(length) {\r",
													"    var randomRandomHexString = \"\";\r",
													"    while (randomRandomHexString.length < length) {\r",
													"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
													"    }\r",
													"    return randomRandomHexString.substring(0,length);\r",
													"}\r",
													"\r",
													"function RandomIpAddress() {\r",
													"    let randomAddress\r",
													"    let addressParts = [];\r",
													"    for ( let i=0; i<4; i++ ) {\r",
													"        addressParts[i] = String(Math.floor(Math.random() * 256));\r",
													"    }\r",
													"    randomAddress = addressParts[0] + \".\" + addressParts[1] + \".\" + addressParts[2] + \".\" + addressParts[3];\r",
													"    return randomAddress;\r",
													"}\r",
													"\r",
													"function RandomTcpPort() {\r",
													"    let randomPort;\r",
													"    randomPort = 2000 + Math.floor( Math.random() * 1000 );\r",
													"    return randomPort;\r",
													"}\r",
													"\r",
													"function GenerateDummyRemoteProtocol(currentProtocol) {\r",
													"    let alternativeProtocolList;\r",
													"    alternativeProtocolList = [  \"tcp-client-interface-1-0:PROTOCOL_TYPE_HTTP\",\r",
													"                                    \"tcp-client-interface-1-0:PROTOCOL_TYPE_HTTPS\"\r",
													"                                ];\r",
													"    let indexOfCurrentProtocol;\r",
													"    indexOfCurrentProtocol = alternativeProtocolList.indexOf(currentProtocol);\r",
													"    if (indexOfCurrentProtocol > -1) {\r",
													"        alternativeProtocolList.splice(indexOfCurrentProtocol, 1);\r",
													"    }\r",
													"\r",
													"    let alternativeProtocol;\r",
													"    let alternativeProtocolIndex;\r",
													"    alternativeProtocolIndex = Math.floor(Math.random() * alternativeProtocolList.length);\r",
													"    alternativeProtocol = alternativeProtocolList[alternativeProtocolIndex]; \r",
													"\r",
													"    return alternativeProtocol;\r",
													"}\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Extracting Result\r",
													"****************************************************************************************/\r",
													"var RESPONSE_CODE;\r",
													"try {\r",
													"    let response;\r",
													"    response = pm.response;\r",
													"\r",
													"    RESPONSE_CODE = parseInt(response.code);\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Response Code could not be extracted.\");\r",
													"}    \r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Testing\r",
													"****************************************************************************************/\r",
													"try {\r",
													"    pm.test(\"As expected, POST /v1/bequeath-your-data-and-die responds 400, because of presence of letters in trace-indicator value \", function () {\r",
													"        pm.expect(RESPONSE_CODE).to.equal(400);\r",
													"    });\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Testing could not be executed.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-mock-response-code",
												"value": "400",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{uri}}",
											"host": [
												"{{uri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Expected /v1/bequeath-your-data-and-die with incorrect separator trace-indicator",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"console.log(\"\\n----- trace-indicator parameter correctness check - incorrect separator -------------------------------\");\r",
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"var APPLICATION;\r",
													"var OPERATION_KEY;\r",
													"var newApplicationName;\r",
													"var newApplicationRelease;\r",
													"var dummyApplicationProtocol;\r",
													"var dummyApplicationAddress;\r",
													"var dummyApplicationPort;\r",
													"try {\r",
													"    APPLICATION = pm.environment.get(\"application\");\r",
													"\r",
													"    let currentOperationServer;\r",
													"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
													"    \r",
													"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
													"\r",
													"    let newReleaseHttpClientLtp;\r",
													"    newReleaseHttpClientLtp = pm.collectionVariables.get(\"newReleaseHttpClientLtp\");\r",
													"\r",
													"    newApplicationName = newReleaseHttpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
													"\r",
													"    newApplicationRelease = newReleaseHttpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"release-number\"];\r",
													"\r",
													"    let newReleaseTcpClientLtp;\r",
													"    newReleaseTcpClientLtp = pm.collectionVariables.get(\"newReleaseTcpClientLtp\");\r",
													"\r",
													"    let protocol = newReleaseTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
													"    dummyApplicationProtocol = GenerateDummyRemoteProtocol(protocol);\r",
													"    dummyApplicationProtocol = dummyApplicationProtocol.substring(('tcp-client-interface-1-0:PROTOCOL_TYPE_').length);\r",
													"\r",
													"    let dummyIpv4Address = RandomIpAddress();\r",
													"    dummyApplicationAddress = {\r",
													"        \"ip-address\": {\r",
													"            \"ipv-4-address\": dummyIpv4Address\r",
													"        }\r",
													"    };\r",
													"    dummyApplicationPort = RandomTcpPort();\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(error);\r",
													"    console.log(\"! Input Data could not be loaded.\");\r",
													"}\r",
													"\r",
													"/****************************************************************************************\r",
													"* Defining Dummy Parameters\r",
													"****************************************************************************************/\r",
													"var USER_NAME;\r",
													"var ORIGINATOR;\r",
													"var X_CORRELATOR;\r",
													"var FAULTY_TRACE_INDICATOR;\r",
													"var CUSTOMER_JOURNEY;\r",
													"try {\r",
													"    USER_NAME = APPLICATION.userName;\r",
													"    ORIGINATOR = \"Postman\";\r",
													"    X_CORRELATOR = CreateXCorrelator();\r",
													"    FAULTY_TRACE_INDICATOR = GenerateFaultyTraceIndicator();\r",
													"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
													"    \r",
													"} catch (error) {\r",
													"    console.log(error)\r",
													"    console.log(\"! Could not define dummy values for parameters. \");\r",
													"}\r",
													"\r",
													"/****************************************************************************************\r",
													"* Defining Request Body\r",
													"****************************************************************************************/\r",
													"var REQUEST_BODY;\r",
													"try {\r",
													"    REQUEST_BODY = '{'\r",
													"        + '\"new-application-name\" : ' + '\"' + newApplicationName + '\",'\r",
													"        + '\"new-application-release\" : ' + '\"' + newApplicationRelease + '\",'\r",
													"        + '\"new-application-protocol\" : ' + '\"' + dummyApplicationProtocol + '\",'\r",
													"        + '\"new-application-address\" : ' + JSON.stringify(dummyApplicationAddress) + ','\r",
													"        + '\"new-application-port\" : ' + dummyApplicationPort\r",
													"    +'}';\r",
													"} catch (error) {\r",
													"    console.log(\"!Could not define request body. \");\r",
													"}\r",
													"/****************************************************************************************\r",
													"* Setting Collection Variables\r",
													"****************************************************************************************/\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Setting Local Variables and Preparing the Request\r",
													"****************************************************************************************/\r",
													"try {\r",
													"    let URI;\r",
													"    URI = APPLICATION.serverUrl + \"/v1/bequeath-your-data-and-die\";\r",
													"\r",
													"    let ACCEPT;\r",
													"    ACCEPT = \"application/json\";\r",
													"\r",
													"    let CONTENT_TYPE;\r",
													"    CONTENT_TYPE = \"application/json\";\r",
													"\r",
													"    pm.variables.clear();\r",
													"\r",
													"    pm.variables.set(\"uri\", URI);\r",
													"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
													"\r",
													"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
													"\r",
													"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
													"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
													"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
													"    pm.request.headers.upsert({key:\"trace-indicator\", value:FAULTY_TRACE_INDICATOR});\r",
													"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
													"\r",
													"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
													"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Local variables could not be set.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													"function GenerateFaultyTraceIndicator() {\r",
													"    let traceIndicator;\r",
													"    traceIndicator = \"\";\r",
													"\r",
													"    let traceIndicatorParts;\r",
													"    traceIndicatorParts = [];\r",
													"    for(let i=0; i<3; i++) {\r",
													"        traceIndicatorParts[i] = Math.floor(Math.random() * 10);\r",
													"    }\r",
													"    let separators;\r",
													"    separators = \"-:;/\";\r",
													"    let separatorsLength;\r",
													"    separatorsLength = separators.length;\r",
													"\r",
													"    let faultySeparator;\r",
													"    faultySeparator = separators.charAt(Math.floor(Math.random() * separatorsLength));\r",
													"\r",
													"    traceIndicator = traceIndicatorParts.join(faultySeparator);\r",
													"\r",
													"    return traceIndicator;\r",
													"}\r",
													"\r",
													"function CreateXCorrelator() {\r",
													"    let xCorrelator;\r",
													"    xCorrelator = \"\";\r",
													"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
													"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
													"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
													"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
													"    xCorrelator += GenerateRandomHexString(12);\r",
													"    return xCorrelator;\r",
													"}\r",
													"\r",
													"function GenerateRandomHexString(length) {\r",
													"    var randomRandomHexString = \"\";\r",
													"    while (randomRandomHexString.length < length) {\r",
													"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
													"    }\r",
													"    return randomRandomHexString.substring(0,length);\r",
													"}\r",
													"\r",
													"function RandomIpAddress() {\r",
													"    let randomAddress\r",
													"    let addressParts = [];\r",
													"    for ( let i=0; i<4; i++ ) {\r",
													"        addressParts[i] = String(Math.floor(Math.random() * 256));\r",
													"    }\r",
													"    randomAddress = addressParts[0] + \".\" + addressParts[1] + \".\" + addressParts[2] + \".\" + addressParts[3];\r",
													"    return randomAddress;\r",
													"}\r",
													"\r",
													"function RandomTcpPort() {\r",
													"    let randomPort;\r",
													"    randomPort = 2000 + Math.floor( Math.random() * 1000 );\r",
													"    return randomPort;\r",
													"}\r",
													"\r",
													"function GenerateDummyRemoteProtocol(currentProtocol) {\r",
													"    let alternativeProtocolList;\r",
													"    alternativeProtocolList = [  \"tcp-client-interface-1-0:PROTOCOL_TYPE_HTTP\",\r",
													"                                    \"tcp-client-interface-1-0:PROTOCOL_TYPE_HTTPS\"\r",
													"                                ];\r",
													"    let indexOfCurrentProtocol;\r",
													"    indexOfCurrentProtocol = alternativeProtocolList.indexOf(currentProtocol);\r",
													"    if (indexOfCurrentProtocol > -1) {\r",
													"        alternativeProtocolList.splice(indexOfCurrentProtocol, 1);\r",
													"    }\r",
													"\r",
													"    let alternativeProtocol;\r",
													"    let alternativeProtocolIndex;\r",
													"    alternativeProtocolIndex = Math.floor(Math.random() * alternativeProtocolList.length);\r",
													"    alternativeProtocol = alternativeProtocolList[alternativeProtocolIndex]; \r",
													"\r",
													"    return alternativeProtocol;\r",
													"}\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Extracting Result\r",
													"****************************************************************************************/\r",
													"var RESPONSE_CODE;\r",
													"try {\r",
													"    let response;\r",
													"    response = pm.response;\r",
													"\r",
													"    RESPONSE_CODE = parseInt(response.code);\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Response Code could not be extracted.\");\r",
													"}    \r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Testing\r",
													"****************************************************************************************/\r",
													"try {\r",
													"    pm.test(\"As expected, POST /v1/bequeath-your-data-and-die responds 400, because of incorrect separator in trace-indicator value \", function () {\r",
													"        pm.expect(RESPONSE_CODE).to.equal(400);\r",
													"    });\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Testing could not be executed.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-mock-response-code",
												"value": "400",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{uri}}",
											"host": [
												"{{uri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "initial newRelease/remote-protocol",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"var APPLICATION;\r",
													"var newReleaseTcpClientUuid;\r",
													"var initialReleaseRemoteProtocol;\r",
													"try {\r",
													"    APPLICATION = pm.environment.get(\"application\");\r",
													"    \r",
													"    let newReleaseTcpClientLtp;\r",
													"    newReleaseTcpClientLtp = pm.collectionVariables.get(\"newReleaseTcpClientLtp\");\r",
													"\r",
													"    newReleaseTcpClientUuid = newReleaseTcpClientLtp[\"uuid\"];\r",
													"\r",
													"    initialReleaseRemoteProtocol = newReleaseTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Variables could not be loaded.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Setting Local Variables and Preparing the Request\r",
													"****************************************************************************************/\r",
													"try {\r",
													"    let URI;\r",
													"    URI = APPLICATION.serverUrl \r",
													"            + \"/core-model-1-4:control-construct/logical-termination-point=\" \r",
													"            + newReleaseTcpClientUuid\r",
													"            + \"/layer-protocol=0/tcp-client-interface-1-0:tcp-client-interface-pac/tcp-client-interface-configuration/remote-protocol\";\r",
													"\r",
													"    let REQUEST_BODY;\r",
													"    REQUEST_BODY = '{ '\r",
													"                    +   '\"tcp-client-interface-1-0:remote-protocol\": \"' + initialReleaseRemoteProtocol + '\"'\r",
													"                    + ' }';\r",
													"\r",
													"    let AUTHORIZATION;\r",
													"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
													"\r",
													"    let ACCEPT;\r",
													"    ACCEPT = \"application/json\";\r",
													"\r",
													"    let CONTENT_TYPE;\r",
													"    CONTENT_TYPE = \"application/json\";\r",
													"\r",
													"\r",
													"    pm.variables.clear();\r",
													"\r",
													"    pm.variables.set(\"uri\", URI);\r",
													"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
													"\r",
													"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
													"\r",
													"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
													"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(error)\r",
													"    console.log(\"! Local variables could not be set.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-mock-response-code",
												"value": "204",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{uri}}",
											"host": [
												"{{uri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "initial newRelease/remote-address",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"var APPLICATION;\r",
													"var newReleaseTcpClientUuid;\r",
													"var initialReleaseRemoteAddress;\r",
													"try {\r",
													"    APPLICATION = pm.environment.get(\"application\");\r",
													"    \r",
													"    let newReleaseTcpClientLtp;\r",
													"    newReleaseTcpClientLtp = pm.collectionVariables.get(\"newReleaseTcpClientLtp\");\r",
													"\r",
													"    newReleaseTcpClientUuid = newReleaseTcpClientLtp[\"uuid\"];\r",
													"\r",
													"    initialReleaseRemoteAddress = newReleaseTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-address\"];\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Variables could not be loaded.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Setting Local Variables and Preparing the Request\r",
													"****************************************************************************************/\r",
													"try {\r",
													"    let URI;\r",
													"    URI = APPLICATION.serverUrl \r",
													"            + \"/core-model-1-4:control-construct/logical-termination-point=\"\r",
													"            + newReleaseTcpClientUuid\r",
													"            + \"/layer-protocol=0/tcp-client-interface-1-0:tcp-client-interface-pac/tcp-client-interface-configuration/remote-address\";\r",
													"\r",
													"    let REQUEST_BODY;\r",
													"    REQUEST_BODY = '{ '\r",
													"                    +   '\"tcp-client-interface-1-0:remote-address\": ' + JSON.stringify(initialReleaseRemoteAddress)\r",
													"                    + ' }';\r",
													"\r",
													"    let AUTHORIZATION;\r",
													"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
													"\r",
													"    let ACCEPT;\r",
													"    ACCEPT = \"application/json\";\r",
													"\r",
													"    let CONTENT_TYPE;\r",
													"    CONTENT_TYPE = \"application/json\";\r",
													"\r",
													"    pm.variables.clear();\r",
													"\r",
													"    pm.variables.set(\"uri\", URI);\r",
													"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
													"\r",
													"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
													"\r",
													"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
													"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(error)\r",
													"    console.log(\"! Local variables could not be set.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-mock-response-code",
												"value": "204",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{uri}}",
											"host": [
												"{{uri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "initial newRelease/remote-port",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"var APPLICATION;\r",
													"var newReleaseTcpClientUuid;\r",
													"var initialReleaseRemotePort;\r",
													"try {\r",
													"    APPLICATION = pm.environment.get(\"application\");\r",
													"    \r",
													"    let newReleaseTcpClientLtp;\r",
													"    newReleaseTcpClientLtp = pm.collectionVariables.get(\"newReleaseTcpClientLtp\");\r",
													"\r",
													"    newReleaseTcpClientUuid = newReleaseTcpClientLtp[\"uuid\"];\r",
													"\r",
													"    initialReleaseRemotePort = newReleaseTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-port\"];\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Variables could not be loaded.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Setting Local Variables and Preparing the Request\r",
													"****************************************************************************************/\r",
													"try {\r",
													"    let URI;\r",
													"    URI = APPLICATION.serverUrl \r",
													"            + \"/core-model-1-4:control-construct/logical-termination-point=\" \r",
													"            + newReleaseTcpClientUuid\r",
													"            + \"/layer-protocol=0/tcp-client-interface-1-0:tcp-client-interface-pac/tcp-client-interface-configuration/remote-port\";\r",
													"\r",
													"    let REQUEST_BODY;\r",
													"    REQUEST_BODY = '{ '\r",
													"                    +   '\"tcp-client-interface-1-0:remote-port\": ' + initialReleaseRemotePort\r",
													"                    + ' }';\r",
													"\r",
													"    let AUTHORIZATION;\r",
													"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
													"\r",
													"    let ACCEPT;\r",
													"    ACCEPT = \"application/json\";\r",
													"\r",
													"    let CONTENT_TYPE;\r",
													"    CONTENT_TYPE = \"application/json\";\r",
													"\r",
													"\r",
													"    pm.variables.clear();\r",
													"\r",
													"    pm.variables.set(\"uri\", URI);\r",
													"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
													"\r",
													"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
													"\r",
													"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
													"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(error)\r",
													"    console.log(\"! Local variables could not be set.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-mock-response-code",
												"value": "204",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{uri}}",
											"host": [
												"{{uri}}"
											]
										}
									},
									"response": []
								}
							],
							"description": "## Gets trace-indicator checked for complying the pattern?\n#### Preparation:\n- GETing CC (/core-model-1-4:control-construct)\n  - searching CC for op-s of /v1/bequeath-your-data-and-die, storing operation-key\n  - searcing CC for output port of PromptForBequeathingDataCausesTransferOfListOfApplications, find corresponding op-c, http-c and tcp-c, store them\n- POST /v1/bequeath-your-data-and-die with\n  - new-application-name and new-application-release according to chosen http-c\n  - new-application-protocol, new-application-address and new-application-port with random generated dummy values (assure sufficiently high probability that set does not exist!)\n  - operation-key from above\n  - all parameters with realistic values, BUT dummyTraceIndicator differing from the pattern in various ways (e.g. empty string)\n\n#### Testing:\n- checking for ResponseCode==400\n\n#### Clearing:\n- PUT NewRelease/remote-protocol with original value\n- PUT NewRelease/remote-address with original value\n- PUT NewRelease/remote-port with original value"
						},
						{
							"name": "security key missing?",
							"item": [
								{
									"name": "reference /core-model-1-4:control-construct",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"console.log(\"\\n----- /v1/bequeath-your-data-and-die integration -- securitykey missing? -------------------------------\");\r",
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"var APPLICATION;\r",
													"try {\r",
													"    APPLICATION = pm.environment.get(\"application\");\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Environment variables could not be loaded.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Setting Local Variables and Preparing the Request\r",
													"****************************************************************************************/\r",
													"try {\r",
													"    let URI;\r",
													"    URI = APPLICATION.serverUrl + \"/core-model-1-4:control-construct\";\r",
													"\r",
													"    let REQUEST_BODY;\r",
													"    REQUEST_BODY = \"\";\r",
													"\r",
													"    let AUTHORIZATION;\r",
													"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
													"\r",
													"    let ACCEPT;\r",
													"    ACCEPT = \"application/json\";\r",
													"\r",
													"    let CONTENT_TYPE;\r",
													"    CONTENT_TYPE = \"application/json\";\r",
													"\r",
													"\r",
													"    pm.variables.clear();\r",
													"\r",
													"    pm.variables.set(\"uri\", URI);\r",
													"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
													"\r",
													"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
													"\r",
													"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
													"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Local variables could not be set.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Extracting Result\r",
													"****************************************************************************************/\r",
													"var ltpList;\r",
													"var fcList;\r",
													"try {\r",
													"    let response;\r",
													"    response = pm.response;\r",
													"    \r",
													"    let responseCode;\r",
													"    responseCode = parseInt(response.code);\r",
													"    \r",
													"    if ( Math.floor(responseCode/100) === 2 ) {\r",
													"        let responseObject;\r",
													"        responseObject = JSON.parse(response.stream);\r",
													"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
													"        fcList = responseObject[\"core-model-1-4:control-construct\"][\"forwarding-domain\"][0][\"forwarding-construct\"];\r",
													"\r",
													"    } else {\r",
													"        ltpList = [];\r",
													"        fcList = [];\r",
													"    }\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! ltpList could not be extracted.\");\r",
													"}\r",
													"\r",
													"var newReleaseHttpClientLtp;\r",
													"var newReleaseTcpClientLtp;\r",
													"try {\r",
													"\r",
													"    //Bequeath Transfer Of List Of Applications\r",
													"    let bequeathingDataCausesTransferOfListOfApplicationsOperationClientLtp = FindOperationClientUsingCallback(\"PromptForBequeathingDataCausesTransferOfListOfApplications\", fcList, ltpList)\r",
													"\r",
													"    newReleaseHttpClientLtp = FindServingLtp(bequeathingDataCausesTransferOfListOfApplicationsOperationClientLtp, ltpList);\r",
													"    newReleaseTcpClientLtp = FindServingLtp(newReleaseHttpClientLtp, ltpList);\r",
													"    \r",
													"} catch (error) {\r",
													"    console.log(error);\r",
													"    console.log(\"! Reference objects could not be extracted.\");\r",
													"} \r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Setting Collection Variables\r",
													"****************************************************************************************/\r",
													"try {\r",
													"    pm.collectionVariables.clear();\r",
													"    \r",
													"    pm.collectionVariables.set(\"newReleaseHttpClientLtp\", newReleaseHttpClientLtp);\r",
													"    pm.collectionVariables.set(\"newReleaseTcpClientLtp\", newReleaseTcpClientLtp);\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Collection variables could not be set.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													"\r",
													"function FindOperationServer(operationName, ltpList) {\r",
													"    let operationServer;\r",
													"    operationServer = \"\";\r",
													"    try {\r",
													"        let sampleUuid;\r",
													"        for(let i=0; i<ltpList.length; i++) {\r",
													"            sampleUuid = ltpList[i][\"uuid\"];\r",
													"            if(sampleUuid.includes(\"op-s-\")) {\r",
													"                let sampleOperationName;\r",
													"                sampleOperationName = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
													"                if(sampleOperationName == operationName) {\r",
													"                    operationServer = ltpList[i];\r",
													"                    return operationServer;\r",
													"                }\r",
													"            }\r",
													"        }\r",
													"    } catch (error) {\r",
													"        console.log(\"! Exception in function : FindOperationServer. \");\r",
													"    }\r",
													"    return operationServer;\r",
													"}\r",
													"\r",
													"\r",
													"function FindOutputFcPortList(forwardingName, fcList) {\r",
													"    let outputFcPortList;\r",
													"    outputFcPortList = [];\r",
													"    try {\r",
													"        for( let i=0; i<fcList.length; i++ ) {\r",
													"            for(let j=0; j<fcList[i][\"name\"].length; j++) {               \r",
													"                if(fcList[i][\"name\"][j][\"value\"] == forwardingName) {\r",
													"                    fcPortList = fcList[i][\"fc-port\"];\r",
													"                    for(let k=0;k<fcPortList.length;k++) {\r",
													"                        if(fcPortList[k][\"port-direction\"] == \"core-model-1-4:PORT_DIRECTION_TYPE_OUTPUT\") {\r",
													"                            outputFcPortList.push(fcPortList[k]);\r",
													"                        }\r",
													"                    }\r",
													"                    return outputFcPortList;\r",
													"                }\r",
													"            }\r",
													"        }\r",
													"    } catch (error) {\r",
													"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
													"    }\r",
													"    return outputFcPortList;\r",
													"}\r",
													"\r",
													"function FindActualInstanceByUuid(expectedUuid, actualLtpList) {\r",
													"    let actualInstance;\r",
													"    actualInstance = {};\r",
													"    try {\r",
													"        for ( let i=0; i<actualLtpList.length; i++ ) {\r",
													"            let sampleUuid;\r",
													"            sampleUuid = actualLtpList[i][\"uuid\"];\r",
													"            if( sampleUuid == expectedUuid ) {\r",
													"                actualInstance = actualLtpList[i];\r",
													"                return actualInstance;\r",
													"            }\r",
													"        }\r",
													"\r",
													"    } catch (error) {\r",
													"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
													"    }\r",
													"    return undefined;\r",
													"}\r",
													"\r",
													"function FindServingLtp(clientLtp, ltpList) {\r",
													"    let servingLtp;\r",
													"    servingLtp = {};\r",
													"    try{\r",
													"        let serverLtpUuid;\r",
													"        serverLtpUuid = clientLtp[\"server-ltp\"][0];\r",
													"        for( let i=0; i<ltpList.length; i++ ) {\r",
													"            let sampleUuid;\r",
													"            sampleUuid = ltpList[i][\"uuid\"];\r",
													"            if( sampleUuid == serverLtpUuid ) {\r",
													"                servingLtp = ltpList[i];\r",
													"                return servingLtp;\r",
													"            }\r",
													"        }\r",
													"    } catch(error) {\r",
													"        console.log(error);\r",
													"        console.log(\"! Exception in function : FindServingLtp. \")\r",
													"    }\r",
													"    return servingLtp;\r",
													"}\r",
													"\r",
													"\r",
													"function FindOperationClientUsingCallback(callback, fcList, ltpList) {\r",
													"    let operationClientLtp\r",
													"    try {\r",
													"        let outputFcPortList = FindOutputFcPortList(callback, fcList);\r",
													"        let randomOutputFcPort = outputFcPortList[Math.floor(Math.random() * outputFcPortList.length)];\r",
													"        let outputLtpUuid = randomOutputFcPort[\"logical-termination-point\"];\r",
													"        operationClientLtp = FindActualInstanceByUuid(outputLtpUuid, ltpList);\r",
													"    } catch (error) {\r",
													"        console.log(error);\r",
													"        console.log(\"! Exception in function FindOperationClientUsingCallback. \");\r",
													"    }\r",
													"    return  operationClientLtp\r",
													"}\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "x-mock-response-code",
												"value": "200",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{uri}}",
											"host": [
												"{{uri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Expected  /v1/bequeath-your-data-and-die - security key missing?",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"var APPLICATION;\r",
													"var newApplicationName;\r",
													"var newApplicationRelease;\r",
													"var dummyApplicationAddress;\r",
													"var dummyApplicationPort;\r",
													"try {\r",
													"    APPLICATION = pm.environment.get(\"application\");\r",
													"\r",
													"    let newReleaseHttpClientLtp;\r",
													"    newReleaseHttpClientLtp = pm.collectionVariables.get(\"newReleaseHttpClientLtp\");\r",
													"\r",
													"    newApplicationName = newReleaseHttpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
													"\r",
													"    newApplicationRelease = newReleaseHttpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"release-number\"];\r",
													"\r",
													"    let newReleaseTcpClientLtp;\r",
													"    newReleaseTcpClientLtp = pm.collectionVariables.get(\"newReleaseTcpClientLtp\");\r",
													"\r",
													"    let protocol = newReleaseTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
													"    dummyApplicationProtocol = GenerateDummyRemoteProtocol(protocol);\r",
													"    dummyApplicationProtocol = dummyApplicationProtocol.substring(('tcp-client-interface-1-0:PROTOCOL_TYPE_').length);\r",
													"\r",
													"    let dummyIpv4Address = RandomIpAddress();\r",
													"    dummyApplicationAddress = {\r",
													"        \"ip-address\": {\r",
													"            \"ipv-4-address\": dummyIpv4Address\r",
													"        }\r",
													"    };\r",
													"    dummyApplicationPort = RandomTcpPort();\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(error);\r",
													"    console.log(\"! Input Data could not be loaded.\");\r",
													"}\r",
													"\r",
													"/****************************************************************************************\r",
													"* Defining Dummy Parameters\r",
													"****************************************************************************************/\r",
													"var USER_NAME;\r",
													"var ORIGINATOR;\r",
													"var X_CORRELATOR;\r",
													"var TRACE_INDICATOR;\r",
													"var CUSTOMER_JOURNEY;\r",
													"try {\r",
													"    USER_NAME = APPLICATION.userName;\r",
													"    ORIGINATOR = \"Postman\";\r",
													"    X_CORRELATOR = CreateXCorrelator();\r",
													"    TRACE_INDICATOR = \"1\";\r",
													"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
													"    \r",
													"} catch (error) {\r",
													"    console.log(\"! Could not define dummy values for parameters. \");\r",
													"}\r",
													"\r",
													"/****************************************************************************************\r",
													"* Defining Request Body\r",
													"****************************************************************************************/\r",
													"var REQUEST_BODY;\r",
													"try {\r",
													"    REQUEST_BODY = '{'\r",
													"        + '\"new-application-name\" : ' + '\"' + newApplicationName + '\",'\r",
													"        + '\"new-application-release\" : ' + '\"' + newApplicationRelease + '\",'\r",
													"        + '\"new-application-protocol\" : ' + '\"' + dummyApplicationProtocol + '\",'\r",
													"        + '\"new-application-address\" : ' + JSON.stringify(dummyApplicationAddress) + ',' \r",
													"        + '\"new-application-port\" : ' + dummyApplicationPort\r",
													"    +'}';\r",
													"} catch (error) {\r",
													"    console.log(\"!Could not define request body. \");\r",
													"}\r",
													"/****************************************************************************************\r",
													"* Setting Collection Variables\r",
													"****************************************************************************************/\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Setting Local Variables and Preparing the Request\r",
													"****************************************************************************************/\r",
													"try {\r",
													"    let URI;\r",
													"    URI = APPLICATION.serverUrl + \"/v1/bequeath-your-data-and-die\";\r",
													"\r",
													"    let ACCEPT;\r",
													"    ACCEPT = \"application/json\";\r",
													"\r",
													"    let CONTENT_TYPE;\r",
													"    CONTENT_TYPE = \"application/json\";\r",
													"\r",
													"    pm.variables.clear();\r",
													"\r",
													"    pm.variables.set(\"uri\", URI);\r",
													"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
													"\r",
													"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
													"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
													"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
													"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
													"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
													"\r",
													"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
													"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(error);\r",
													"    console.log(\"! Local variables could not be set.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													"\r",
													"function CreateXCorrelator() {\r",
													"    let xCorrelator;\r",
													"    xCorrelator = \"\";\r",
													"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
													"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
													"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
													"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
													"    xCorrelator += GenerateRandomHexString(12);\r",
													"    return xCorrelator;\r",
													"}\r",
													"\r",
													"function GenerateRandomHexString(length) {\r",
													"    var randomRandomHexString = \"\";\r",
													"    while (randomRandomHexString.length < length) {\r",
													"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
													"    }\r",
													"    return randomRandomHexString.substring(0,length);\r",
													"}\r",
													"\r",
													"function RandomIpAddress() {\r",
													"    let randomAddress\r",
													"    let addressParts = [];\r",
													"    for ( let i=0; i<4; i++ ) {\r",
													"        addressParts[i] = String(Math.floor(Math.random() * 256));\r",
													"    }\r",
													"    randomAddress = addressParts[0] + \".\" + addressParts[1] + \".\" + addressParts[2] + \".\" + addressParts[3];\r",
													"    return randomAddress;\r",
													"}\r",
													"\r",
													"function RandomTcpPort() {\r",
													"    let randomPort;\r",
													"    randomPort = 2000 + Math.floor( Math.random() * 1000 );\r",
													"    return randomPort;\r",
													"}\r",
													"\r",
													"function GenerateDummyRemoteProtocol(currentProtocol) {\r",
													"    let alternativeProtocolList;\r",
													"    alternativeProtocolList = [  \"tcp-client-interface-1-0:PROTOCOL_TYPE_HTTP\",\r",
													"                                    \"tcp-client-interface-1-0:PROTOCOL_TYPE_HTTPS\"\r",
													"                                ];\r",
													"    let indexOfCurrentProtocol;\r",
													"    indexOfCurrentProtocol = alternativeProtocolList.indexOf(currentProtocol);\r",
													"    if (indexOfCurrentProtocol > -1) {\r",
													"        alternativeProtocolList.splice(indexOfCurrentProtocol, 1);\r",
													"    }\r",
													"\r",
													"    let alternativeProtocol;\r",
													"    let alternativeProtocolIndex;\r",
													"    alternativeProtocolIndex = Math.floor(Math.random() * alternativeProtocolList.length);\r",
													"    alternativeProtocol = alternativeProtocolList[alternativeProtocolIndex]; \r",
													"\r",
													"    return alternativeProtocol;\r",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Extracting Result\r",
													"****************************************************************************************/\r",
													"var RESPONSE_CODE;\r",
													"try {\r",
													"    let response;\r",
													"    response = pm.response;\r",
													"\r",
													"    RESPONSE_CODE = parseInt(response.code);\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Response Code could not be extracted.\");\r",
													"}    \r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Testing\r",
													"****************************************************************************************/\r",
													"try {\r",
													"    pm.test(\"As expected, POST /v1/bequeath-your-data-and-die responds 401, because of missing operation-key\", function () {\r",
													"        pm.expect(RESPONSE_CODE).to.equal(401);\r",
													"    });\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Testing could not be executed.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-mock-response-code",
												"value": "401",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{uri}}",
											"host": [
												"{{uri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "initial newRelease/remote-protocol",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"var APPLICATION;\r",
													"var newReleaseTcpClientUuid;\r",
													"var initialReleaseRemoteProtocol;\r",
													"try {\r",
													"    APPLICATION = pm.environment.get(\"application\");\r",
													"    \r",
													"    let newReleaseTcpClientLtp;\r",
													"    newReleaseTcpClientLtp = pm.collectionVariables.get(\"newReleaseTcpClientLtp\");\r",
													"\r",
													"    newReleaseTcpClientUuid = newReleaseTcpClientLtp[\"uuid\"];\r",
													"\r",
													"    initialReleaseRemoteProtocol = newReleaseTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Variables could not be loaded.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Setting Local Variables and Preparing the Request\r",
													"****************************************************************************************/\r",
													"try {\r",
													"    let URI;\r",
													"    URI = APPLICATION.serverUrl \r",
													"            + \"/core-model-1-4:control-construct/logical-termination-point=\" \r",
													"            + newReleaseTcpClientUuid\r",
													"            + \"/layer-protocol=0/tcp-client-interface-1-0:tcp-client-interface-pac/tcp-client-interface-configuration/remote-protocol\";\r",
													"\r",
													"    let REQUEST_BODY;\r",
													"    REQUEST_BODY = '{ '\r",
													"                    +   '\"tcp-client-interface-1-0:remote-protocol\": \"' + initialReleaseRemoteProtocol + '\"'\r",
													"                    + ' }';\r",
													"\r",
													"    let AUTHORIZATION;\r",
													"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
													"\r",
													"    let ACCEPT;\r",
													"    ACCEPT = \"application/json\";\r",
													"\r",
													"    let CONTENT_TYPE;\r",
													"    CONTENT_TYPE = \"application/json\";\r",
													"\r",
													"\r",
													"    pm.variables.clear();\r",
													"\r",
													"    pm.variables.set(\"uri\", URI);\r",
													"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
													"\r",
													"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
													"\r",
													"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
													"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(error)\r",
													"    console.log(\"! Local variables could not be set.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-mock-response-code",
												"value": "204",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{uri}}",
											"host": [
												"{{uri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "initial newRelease/remote-address",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"var APPLICATION;\r",
													"var newReleaseTcpClientUuid;\r",
													"var initialReleaseRemoteAddress;\r",
													"try {\r",
													"    APPLICATION = pm.environment.get(\"application\");\r",
													"    \r",
													"    let newReleaseTcpClientLtp;\r",
													"    newReleaseTcpClientLtp = pm.collectionVariables.get(\"newReleaseTcpClientLtp\");\r",
													"\r",
													"    newReleaseTcpClientUuid = newReleaseTcpClientLtp[\"uuid\"];\r",
													"\r",
													"    initialReleaseRemoteAddress = newReleaseTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-address\"];\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Variables could not be loaded.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Setting Local Variables and Preparing the Request\r",
													"****************************************************************************************/\r",
													"try {\r",
													"    let URI;\r",
													"    URI = APPLICATION.serverUrl \r",
													"            + \"/core-model-1-4:control-construct/logical-termination-point=\"\r",
													"            + newReleaseTcpClientUuid\r",
													"            + \"/layer-protocol=0/tcp-client-interface-1-0:tcp-client-interface-pac/tcp-client-interface-configuration/remote-address\";\r",
													"\r",
													"    let REQUEST_BODY;\r",
													"    REQUEST_BODY = '{ '\r",
													"                    +   '\"tcp-client-interface-1-0:remote-address\": ' + JSON.stringify(initialReleaseRemoteAddress)\r",
													"                    + ' }';\r",
													"\r",
													"    let AUTHORIZATION;\r",
													"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
													"\r",
													"    let ACCEPT;\r",
													"    ACCEPT = \"application/json\";\r",
													"\r",
													"    let CONTENT_TYPE;\r",
													"    CONTENT_TYPE = \"application/json\";\r",
													"\r",
													"    pm.variables.clear();\r",
													"\r",
													"    pm.variables.set(\"uri\", URI);\r",
													"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
													"\r",
													"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
													"\r",
													"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
													"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(error)\r",
													"    console.log(\"! Local variables could not be set.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-mock-response-code",
												"value": "204",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{uri}}",
											"host": [
												"{{uri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "initial newRelease/remote-port",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"var APPLICATION;\r",
													"var newReleaseTcpClientUuid;\r",
													"var initialReleaseRemotePort;\r",
													"try {\r",
													"    APPLICATION = pm.environment.get(\"application\");\r",
													"    \r",
													"    let newReleaseTcpClientLtp;\r",
													"    newReleaseTcpClientLtp = pm.collectionVariables.get(\"newReleaseTcpClientLtp\");\r",
													"\r",
													"    newReleaseTcpClientUuid = newReleaseTcpClientLtp[\"uuid\"];\r",
													"\r",
													"    initialReleaseRemotePort = newReleaseTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-port\"];\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Variables could not be loaded.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Setting Local Variables and Preparing the Request\r",
													"****************************************************************************************/\r",
													"try {\r",
													"    let URI;\r",
													"    URI = APPLICATION.serverUrl \r",
													"            + \"/core-model-1-4:control-construct/logical-termination-point=\" \r",
													"            + newReleaseTcpClientUuid\r",
													"            + \"/layer-protocol=0/tcp-client-interface-1-0:tcp-client-interface-pac/tcp-client-interface-configuration/remote-port\";\r",
													"\r",
													"    let REQUEST_BODY;\r",
													"    REQUEST_BODY = '{ '\r",
													"                    +   '\"tcp-client-interface-1-0:remote-port\": ' + initialReleaseRemotePort\r",
													"                    + ' }';\r",
													"\r",
													"    let AUTHORIZATION;\r",
													"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
													"\r",
													"    let ACCEPT;\r",
													"    ACCEPT = \"application/json\";\r",
													"\r",
													"    let CONTENT_TYPE;\r",
													"    CONTENT_TYPE = \"application/json\";\r",
													"\r",
													"\r",
													"    pm.variables.clear();\r",
													"\r",
													"    pm.variables.set(\"uri\", URI);\r",
													"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
													"\r",
													"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
													"\r",
													"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
													"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(error)\r",
													"    console.log(\"! Local variables could not be set.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-mock-response-code",
												"value": "204",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{uri}}",
											"host": [
												"{{uri}}"
											]
										}
									},
									"response": []
								}
							],
							"description": "## Gets security key checked for availability?\n#### Preparation:\n- GETing CC (/core-model-1-4:control-construct)\n  - searcing CC for output port of PromptForBequeathingDataCausesTransferOfListOfApplications, find corresponding op-c, http-c and tcp-c, store them\n- POST /v1/bequeath-your-data-and-die with\n  - new-application-name and new-application-release according to chosen http-c\n  - new-application-protocol, new-application-address and new-application-port with random generated dummy values (assure sufficiently high probability that set does not exist!)\n  - all parameters with reasonable values\n  - BUT operationKey parameter missing (does not mean empty string)\n\n#### Testing:\n- checking for ResponseCode==401\n\n#### Clearing:\n- PUT NewRelease/remote-protocol with original value\n- PUT NewRelease/remote-address with original value\n- PUT NewRelease/remote-port with original value"
						},
						{
							"name": "security key checked?",
							"item": [
								{
									"name": "reference /core-model-1-4:control-construct",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"console.log(\"\\n----- /v1/bequeath-your-data-and-die integration -- securitykey checked? -------------------------------\");\r",
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"var APPLICATION;\r",
													"try {\r",
													"    APPLICATION = pm.environment.get(\"application\");\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Environment variables could not be loaded.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Setting Local Variables and Preparing the Request\r",
													"****************************************************************************************/\r",
													"try {\r",
													"    let URI;\r",
													"    URI = APPLICATION.serverUrl + \"/core-model-1-4:control-construct\";\r",
													"\r",
													"    let REQUEST_BODY;\r",
													"    REQUEST_BODY = \"\";\r",
													"\r",
													"    let AUTHORIZATION;\r",
													"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
													"\r",
													"    let ACCEPT;\r",
													"    ACCEPT = \"application/json\";\r",
													"\r",
													"    let CONTENT_TYPE;\r",
													"    CONTENT_TYPE = \"application/json\";\r",
													"\r",
													"\r",
													"    pm.variables.clear();\r",
													"\r",
													"    pm.variables.set(\"uri\", URI);\r",
													"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
													"\r",
													"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
													"\r",
													"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
													"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Local variables could not be set.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Extracting Result\r",
													"****************************************************************************************/\r",
													"var ltpList;\r",
													"var fcList;\r",
													"try {\r",
													"    let response;\r",
													"    response = pm.response;\r",
													"    \r",
													"    let responseCode;\r",
													"    responseCode = parseInt(response.code);\r",
													"    \r",
													"    if ( Math.floor(responseCode/100) === 2 ) {\r",
													"        let responseObject;\r",
													"        responseObject = JSON.parse(response.stream);\r",
													"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
													"        fcList = responseObject[\"core-model-1-4:control-construct\"][\"forwarding-domain\"][0][\"forwarding-construct\"];\r",
													"\r",
													"    } else {\r",
													"        ltpList = [];\r",
													"        fcList = [];\r",
													"    }\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! ltpList could not be extracted.\");\r",
													"}\r",
													"\r",
													"var newReleaseHttpClientLtp;\r",
													"var newReleaseTcpClientLtp;\r",
													"try {\r",
													"\r",
													"    //Bequeath Transfer Of List Of Applications\r",
													"    let bequeathingDataCausesTransferOfListOfApplicationsOperationClientLtp = FindOperationClientUsingCallback(\"PromptForBequeathingDataCausesTransferOfListOfApplications\", fcList, ltpList)\r",
													"\r",
													"    newReleaseHttpClientLtp = FindServingLtp(bequeathingDataCausesTransferOfListOfApplicationsOperationClientLtp, ltpList);\r",
													"    newReleaseTcpClientLtp = FindServingLtp(newReleaseHttpClientLtp, ltpList);\r",
													"    \r",
													"} catch (error) {\r",
													"    console.log(error);\r",
													"    console.log(\"! Reference objects could not be extracted.\");\r",
													"} \r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Setting Collection Variables\r",
													"****************************************************************************************/\r",
													"try {\r",
													"    pm.collectionVariables.clear();\r",
													"    \r",
													"    pm.collectionVariables.set(\"newReleaseHttpClientLtp\", newReleaseHttpClientLtp);\r",
													"    pm.collectionVariables.set(\"newReleaseTcpClientLtp\", newReleaseTcpClientLtp);\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Collection variables could not be set.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													"\r",
													"function FindOperationServer(operationName, ltpList) {\r",
													"    let operationServer;\r",
													"    operationServer = \"\";\r",
													"    try {\r",
													"        let sampleUuid;\r",
													"        for(let i=0; i<ltpList.length; i++) {\r",
													"            sampleUuid = ltpList[i][\"uuid\"];\r",
													"            if(sampleUuid.includes(\"op-s-\")) {\r",
													"                let sampleOperationName;\r",
													"                sampleOperationName = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
													"                if(sampleOperationName == operationName) {\r",
													"                    operationServer = ltpList[i];\r",
													"                    return operationServer;\r",
													"                }\r",
													"            }\r",
													"        }\r",
													"    } catch (error) {\r",
													"        console.log(\"! Exception in function : FindOperationServer. \");\r",
													"    }\r",
													"    return operationServer;\r",
													"}\r",
													"\r",
													"\r",
													"function FindOutputFcPortList(forwardingName, fcList) {\r",
													"    let outputFcPortList;\r",
													"    outputFcPortList = [];\r",
													"    try {\r",
													"        for( let i=0; i<fcList.length; i++ ) {\r",
													"            for(let j=0; j<fcList[i][\"name\"].length; j++) {               \r",
													"                if(fcList[i][\"name\"][j][\"value\"] == forwardingName) {\r",
													"                    fcPortList = fcList[i][\"fc-port\"];\r",
													"                    for(let k=0;k<fcPortList.length;k++) {\r",
													"                        if(fcPortList[k][\"port-direction\"] == \"core-model-1-4:PORT_DIRECTION_TYPE_OUTPUT\") {\r",
													"                            outputFcPortList.push(fcPortList[k]);\r",
													"                        }\r",
													"                    }\r",
													"                    return outputFcPortList;\r",
													"                }\r",
													"            }\r",
													"        }\r",
													"    } catch (error) {\r",
													"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
													"    }\r",
													"    return outputFcPortList;\r",
													"}\r",
													"\r",
													"function FindActualInstanceByUuid(expectedUuid, actualLtpList) {\r",
													"    let actualInstance;\r",
													"    actualInstance = {};\r",
													"    try {\r",
													"        for ( let i=0; i<actualLtpList.length; i++ ) {\r",
													"            let sampleUuid;\r",
													"            sampleUuid = actualLtpList[i][\"uuid\"];\r",
													"            if( sampleUuid == expectedUuid ) {\r",
													"                actualInstance = actualLtpList[i];\r",
													"                return actualInstance;\r",
													"            }\r",
													"        }\r",
													"\r",
													"    } catch (error) {\r",
													"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
													"    }\r",
													"    return undefined;\r",
													"}\r",
													"\r",
													"function FindServingLtp(clientLtp, ltpList) {\r",
													"    let servingLtp;\r",
													"    servingLtp = {};\r",
													"    try{\r",
													"        let serverLtpUuid;\r",
													"        serverLtpUuid = clientLtp[\"server-ltp\"][0];\r",
													"        for( let i=0; i<ltpList.length; i++ ) {\r",
													"            let sampleUuid;\r",
													"            sampleUuid = ltpList[i][\"uuid\"];\r",
													"            if( sampleUuid == serverLtpUuid ) {\r",
													"                servingLtp = ltpList[i];\r",
													"                return servingLtp;\r",
													"            }\r",
													"        }\r",
													"    } catch(error) {\r",
													"        console.log(error);\r",
													"        console.log(\"! Exception in function : FindServingLtp. \")\r",
													"    }\r",
													"    return servingLtp;\r",
													"}\r",
													"\r",
													"\r",
													"function FindOperationClientUsingCallback(callback, fcList, ltpList) {\r",
													"    let operationClientLtp\r",
													"    try {\r",
													"        let outputFcPortList = FindOutputFcPortList(callback, fcList);\r",
													"        let randomOutputFcPort = outputFcPortList[Math.floor(Math.random() * outputFcPortList.length)];\r",
													"        let outputLtpUuid = randomOutputFcPort[\"logical-termination-point\"];\r",
													"        operationClientLtp = FindActualInstanceByUuid(outputLtpUuid, ltpList);\r",
													"    } catch (error) {\r",
													"        console.log(error);\r",
													"        console.log(\"! Exception in function FindOperationClientUsingCallback. \");\r",
													"    }\r",
													"    return  operationClientLtp\r",
													"}\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "x-mock-response-code",
												"value": "200",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{uri}}",
											"host": [
												"{{uri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Expected  /v1/bequeath-your-data-and-die - security key checked?",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"var APPLICATION;\r",
													"var newApplicationName;\r",
													"var newApplicationRelease;\r",
													"var dummyApplicationProtocol;\r",
													"var dummyApplicationAddress;\r",
													"var dummyApplicationPort;\r",
													"try {\r",
													"    APPLICATION = pm.environment.get(\"application\");\r",
													"\r",
													"    let newReleaseHttpClientLtp;\r",
													"    newReleaseHttpClientLtp = pm.collectionVariables.get(\"newReleaseHttpClientLtp\");\r",
													"\r",
													"    newApplicationName = newReleaseHttpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
													"    newApplicationRelease = newReleaseHttpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"release-number\"];\r",
													"\r",
													"    let newReleaseTcpClientLtp;\r",
													"    newReleaseTcpClientLtp = pm.collectionVariables.get(\"newReleaseTcpClientLtp\");\r",
													"\r",
													"    let protocol = newReleaseTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
													"    dummyApplicationProtocol = GenerateDummyRemoteProtocol(protocol);\r",
													"    dummyApplicationProtocol = dummyApplicationProtocol.substring(('tcp-client-interface-1-0:PROTOCOL_TYPE_').length);\r",
													"\r",
													"    let dummyIpv4Address = RandomIpAddress();\r",
													"    dummyApplicationAddress = {\r",
													"        \"ip-address\": {\r",
													"            \"ipv-4-address\": dummyIpv4Address\r",
													"        }\r",
													"    };\r",
													"    dummyApplicationPort = RandomTcpPort();\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(error);\r",
													"    console.log(\"! Input Data could not be loaded.\");\r",
													"}\r",
													"\r",
													"/****************************************************************************************\r",
													"* Defining Dummy Parameters\r",
													"****************************************************************************************/\r",
													"var USER_NAME;\r",
													"var ORIGINATOR;\r",
													"var X_CORRELATOR;\r",
													"var TRACE_INDICATOR;\r",
													"var CUSTOMER_JOURNEY;\r",
													"try {\r",
													"    USER_NAME = APPLICATION.userName;\r",
													"    ORIGINATOR = \"Postman\";\r",
													"    X_CORRELATOR = CreateXCorrelator();\r",
													"    TRACE_INDICATOR = \"1\";\r",
													"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
													"    \r",
													"} catch (error) {\r",
													"    console.log(\"! Could not define dummy values for parameters. \");\r",
													"}\r",
													"\r",
													"/****************************************************************************************\r",
													"* Defining Request Body\r",
													"****************************************************************************************/\r",
													"var REQUEST_BODY;\r",
													"try {\r",
													"    REQUEST_BODY = '{'\r",
													"        + '\"new-application-name\" : ' + '\"' + newApplicationName + '\",'\r",
													"        + '\"new-application-release\" : ' + '\"' + newApplicationRelease + '\",'\r",
													"        + '\"new-application-protocol\" : ' + '\"' + dummyApplicationProtocol + '\",'\r",
													"        + '\"new-application-address\" : ' + JSON.stringify(dummyApplicationAddress) + ','\r",
													"        + '\"new-application-port\" : ' + dummyApplicationPort\r",
													"    +'}';\r",
													"} catch (error) {\r",
													"    console.log(\"!Could not define request body. \");\r",
													"}\r",
													"\r",
													"/****************************************************************************************\r",
													"* Defining Dummy security key\r",
													"****************************************************************************************/\r",
													"var FAULTY_OPERATION_KEY;\r",
													"try {\r",
													"    FAULTY_OPERATION_KEY = GenerateRandomHexString(32);\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Could not define dummy value for operationKey. \");\r",
													"}\r",
													"\r",
													"/****************************************************************************************\r",
													"* Setting Collection Variables\r",
													"****************************************************************************************/\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Setting Local Variables and Preparing the Request\r",
													"****************************************************************************************/\r",
													"try {\r",
													"    let URI;\r",
													"    URI = APPLICATION.serverUrl + \"/v1/bequeath-your-data-and-die\";\r",
													"\r",
													"    let ACCEPT;\r",
													"    ACCEPT = \"application/json\";\r",
													"\r",
													"    let CONTENT_TYPE;\r",
													"    CONTENT_TYPE = \"application/json\";\r",
													"\r",
													"    pm.variables.clear();\r",
													"\r",
													"    pm.variables.set(\"uri\", URI);\r",
													"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
													"\r",
													"    pm.request.headers.upsert({ key: \"operation-key\", value: FAULTY_OPERATION_KEY });\r",
													"\r",
													"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
													"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
													"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
													"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
													"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
													"\r",
													"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
													"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(error);\r",
													"    console.log(\"! Local variables could not be set.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													"\r",
													"function CreateXCorrelator() {\r",
													"    let xCorrelator;\r",
													"    xCorrelator = \"\";\r",
													"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
													"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
													"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
													"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
													"    xCorrelator += GenerateRandomHexString(12);\r",
													"    return xCorrelator;\r",
													"}\r",
													"\r",
													"function GenerateRandomHexString(length) {\r",
													"    var randomRandomHexString = \"\";\r",
													"    while (randomRandomHexString.length < length) {\r",
													"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
													"    }\r",
													"    return randomRandomHexString.substring(0,length);\r",
													"}\r",
													"\r",
													"function RandomIpAddress() {\r",
													"    let randomAddress\r",
													"    let addressParts = [];\r",
													"    for ( let i=0; i<4; i++ ) {\r",
													"        addressParts[i] = String(Math.floor(Math.random() * 256));\r",
													"    }\r",
													"    randomAddress = addressParts[0] + \".\" + addressParts[1] + \".\" + addressParts[2] + \".\" + addressParts[3];\r",
													"    return randomAddress;\r",
													"}\r",
													"\r",
													"function RandomTcpPort() {\r",
													"    let randomPort;\r",
													"    randomPort = 2000 + Math.floor( Math.random() * 1000 );\r",
													"    return randomPort;\r",
													"}\r",
													"\r",
													"function GenerateDummyRemoteProtocol(currentProtocol) {\r",
													"    let alternativeProtocolList;\r",
													"    alternativeProtocolList = [  \"tcp-client-interface-1-0:PROTOCOL_TYPE_HTTP\",\r",
													"                                    \"tcp-client-interface-1-0:PROTOCOL_TYPE_HTTPS\"\r",
													"                                ];\r",
													"    let indexOfCurrentProtocol;\r",
													"    indexOfCurrentProtocol = alternativeProtocolList.indexOf(currentProtocol);\r",
													"    if (indexOfCurrentProtocol > -1) {\r",
													"        alternativeProtocolList.splice(indexOfCurrentProtocol, 1);\r",
													"    }\r",
													"\r",
													"    let alternativeProtocol;\r",
													"    let alternativeProtocolIndex;\r",
													"    alternativeProtocolIndex = Math.floor(Math.random() * alternativeProtocolList.length);\r",
													"    alternativeProtocol = alternativeProtocolList[alternativeProtocolIndex]; \r",
													"\r",
													"    return alternativeProtocol;\r",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Extracting Result\r",
													"****************************************************************************************/\r",
													"var RESPONSE_CODE;\r",
													"try {\r",
													"    let response;\r",
													"    response = pm.response;\r",
													"\r",
													"    RESPONSE_CODE = parseInt(response.code);\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Response Code could not be extracted.\");\r",
													"}    \r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Testing\r",
													"****************************************************************************************/\r",
													"try {\r",
													"    pm.test(\"As expected, POST /v1/bequeath-your-data-and-die responds 401, because of incorrect operation-key\", function () {\r",
													"        pm.expect(RESPONSE_CODE).to.equal(401);\r",
													"    });\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Testing could not be executed.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-mock-response-code",
												"value": "401",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{uri}}",
											"host": [
												"{{uri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "initial newRelease/remote-protocol",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"var APPLICATION;\r",
													"var newReleaseTcpClientUuid;\r",
													"var initialReleaseRemoteProtocol;\r",
													"try {\r",
													"    APPLICATION = pm.environment.get(\"application\");\r",
													"    \r",
													"    let newReleaseTcpClientLtp;\r",
													"    newReleaseTcpClientLtp = pm.collectionVariables.get(\"newReleaseTcpClientLtp\");\r",
													"\r",
													"    newReleaseTcpClientUuid = newReleaseTcpClientLtp[\"uuid\"];\r",
													"\r",
													"    initialReleaseRemoteProtocol = newReleaseTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Variables could not be loaded.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Setting Local Variables and Preparing the Request\r",
													"****************************************************************************************/\r",
													"try {\r",
													"    let URI;\r",
													"    URI = APPLICATION.serverUrl \r",
													"            + \"/core-model-1-4:control-construct/logical-termination-point=\" \r",
													"            + newReleaseTcpClientUuid\r",
													"            + \"/layer-protocol=0/tcp-client-interface-1-0:tcp-client-interface-pac/tcp-client-interface-configuration/remote-protocol\";\r",
													"\r",
													"    let REQUEST_BODY;\r",
													"    REQUEST_BODY = '{ '\r",
													"                    +   '\"tcp-client-interface-1-0:remote-protocol\": \"' + initialReleaseRemoteProtocol + '\"'\r",
													"                    + ' }';\r",
													"\r",
													"    let AUTHORIZATION;\r",
													"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
													"\r",
													"    let ACCEPT;\r",
													"    ACCEPT = \"application/json\";\r",
													"\r",
													"    let CONTENT_TYPE;\r",
													"    CONTENT_TYPE = \"application/json\";\r",
													"\r",
													"\r",
													"    pm.variables.clear();\r",
													"\r",
													"    pm.variables.set(\"uri\", URI);\r",
													"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
													"\r",
													"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
													"\r",
													"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
													"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(error)\r",
													"    console.log(\"! Local variables could not be set.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-mock-response-code",
												"value": "204",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{uri}}",
											"host": [
												"{{uri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "initial newRelease/remote-address",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"var APPLICATION;\r",
													"var newReleaseTcpClientUuid;\r",
													"var initialReleaseRemoteAddress;\r",
													"try {\r",
													"    APPLICATION = pm.environment.get(\"application\");\r",
													"    \r",
													"    let newReleaseTcpClientLtp;\r",
													"    newReleaseTcpClientLtp = pm.collectionVariables.get(\"newReleaseTcpClientLtp\");\r",
													"\r",
													"    newReleaseTcpClientUuid = newReleaseTcpClientLtp[\"uuid\"];\r",
													"\r",
													"    initialReleaseRemoteAddress = newReleaseTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-address\"];\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Variables could not be loaded.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Setting Local Variables and Preparing the Request\r",
													"****************************************************************************************/\r",
													"try {\r",
													"    let URI;\r",
													"    URI = APPLICATION.serverUrl \r",
													"            + \"/core-model-1-4:control-construct/logical-termination-point=\"\r",
													"            + newReleaseTcpClientUuid\r",
													"            + \"/layer-protocol=0/tcp-client-interface-1-0:tcp-client-interface-pac/tcp-client-interface-configuration/remote-address\";\r",
													"\r",
													"    let REQUEST_BODY;\r",
													"    REQUEST_BODY = '{ '\r",
													"                    +   '\"tcp-client-interface-1-0:remote-address\": ' + JSON.stringify(initialReleaseRemoteAddress)\r",
													"                    + ' }';\r",
													"\r",
													"    let AUTHORIZATION;\r",
													"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
													"\r",
													"    let ACCEPT;\r",
													"    ACCEPT = \"application/json\";\r",
													"\r",
													"    let CONTENT_TYPE;\r",
													"    CONTENT_TYPE = \"application/json\";\r",
													"\r",
													"    pm.variables.clear();\r",
													"\r",
													"    pm.variables.set(\"uri\", URI);\r",
													"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
													"\r",
													"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
													"\r",
													"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
													"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(error)\r",
													"    console.log(\"! Local variables could not be set.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-mock-response-code",
												"value": "204",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{uri}}",
											"host": [
												"{{uri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "initial newRelease/remote-port",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"var APPLICATION;\r",
													"var newReleaseTcpClientUuid;\r",
													"var initialReleaseRemotePort;\r",
													"try {\r",
													"    APPLICATION = pm.environment.get(\"application\");\r",
													"    \r",
													"    let newReleaseTcpClientLtp;\r",
													"    newReleaseTcpClientLtp = pm.collectionVariables.get(\"newReleaseTcpClientLtp\");\r",
													"\r",
													"    newReleaseTcpClientUuid = newReleaseTcpClientLtp[\"uuid\"];\r",
													"\r",
													"    initialReleaseRemotePort = newReleaseTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-port\"];\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Variables could not be loaded.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Setting Local Variables and Preparing the Request\r",
													"****************************************************************************************/\r",
													"try {\r",
													"    let URI;\r",
													"    URI = APPLICATION.serverUrl \r",
													"            + \"/core-model-1-4:control-construct/logical-termination-point=\" \r",
													"            + newReleaseTcpClientUuid\r",
													"            + \"/layer-protocol=0/tcp-client-interface-1-0:tcp-client-interface-pac/tcp-client-interface-configuration/remote-port\";\r",
													"\r",
													"    let REQUEST_BODY;\r",
													"    REQUEST_BODY = '{ '\r",
													"                    +   '\"tcp-client-interface-1-0:remote-port\": ' + initialReleaseRemotePort\r",
													"                    + ' }';\r",
													"\r",
													"    let AUTHORIZATION;\r",
													"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
													"\r",
													"    let ACCEPT;\r",
													"    ACCEPT = \"application/json\";\r",
													"\r",
													"    let CONTENT_TYPE;\r",
													"    CONTENT_TYPE = \"application/json\";\r",
													"\r",
													"\r",
													"    pm.variables.clear();\r",
													"\r",
													"    pm.variables.set(\"uri\", URI);\r",
													"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
													"\r",
													"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
													"\r",
													"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
													"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(error)\r",
													"    console.log(\"! Local variables could not be set.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-mock-response-code",
												"value": "204",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{uri}}",
											"host": [
												"{{uri}}"
											]
										}
									},
									"response": []
								}
							],
							"description": "## Gets security key checked for correctness?\n#### Preparation:\n- GETing CC (/core-model-1-4:control-construct)\n  - searcing CC for output port of PromptForBequeathingDataCausesTransferOfListOfApplications, find corresponding op-c, http-c and tcp-c, store them\n- POST /v1/bequeath-your-data-and-die with\n  - new-application-name and new-application-release according to chosen http-c\n  - new-application-protocol, new-application-address and new-application-port with random generated dummy values (assure sufficiently high probability that set does not exist!) \n  - all parameters with reasonable values\n  - BUT operationKey parameter with random dummy value.\n\n#### Testing:\n- checking for ResponseCode==401\n\n#### Clearing:\n- PUT NewRelease/remote-protocol with original value\n- PUT NewRelease/remote-address with original value\n- PUT NewRelease/remote-port with original value"
						},
						{
							"name": "response header completeness",
							"item": [
								{
									"name": "reference /core-model-1-4:control-construct",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"console.log(\"\\n----- /v1/bequeath-your-data-and-die integration -- response header completeness -------------------------------\");\r",
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"var APPLICATION;\r",
													"try {\r",
													"    APPLICATION = pm.environment.get(\"application\");\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Environment variables could not be loaded.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Setting Local Variables and Preparing the Request\r",
													"****************************************************************************************/\r",
													"try {\r",
													"    let URI;\r",
													"    URI = APPLICATION.serverUrl + \"/core-model-1-4:control-construct\";\r",
													"\r",
													"    let REQUEST_BODY;\r",
													"    REQUEST_BODY = \"\";\r",
													"\r",
													"    let AUTHORIZATION;\r",
													"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
													"\r",
													"    let ACCEPT;\r",
													"    ACCEPT = \"application/json\";\r",
													"\r",
													"    let CONTENT_TYPE;\r",
													"    CONTENT_TYPE = \"application/json\";\r",
													"\r",
													"\r",
													"    pm.variables.clear();\r",
													"\r",
													"    pm.variables.set(\"uri\", URI);\r",
													"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
													"\r",
													"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
													"\r",
													"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
													"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Local variables could not be set.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Extracting Result\r",
													"****************************************************************************************/\r",
													"var ltpList;\r",
													"var fcList;\r",
													"try {\r",
													"    let response;\r",
													"    response = pm.response;\r",
													"    \r",
													"    let responseCode;\r",
													"    responseCode = parseInt(response.code);\r",
													"    \r",
													"    if ( Math.floor(responseCode/100) === 2 ) {\r",
													"        let responseObject;\r",
													"        responseObject = JSON.parse(response.stream);\r",
													"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
													"        fcList = responseObject[\"core-model-1-4:control-construct\"][\"forwarding-domain\"][0][\"forwarding-construct\"];\r",
													"\r",
													"    } else {\r",
													"        ltpList = [];\r",
													"        fcList = [];\r",
													"    }\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! ltpList could not be extracted.\");\r",
													"}\r",
													"\r",
													"var currentOperationServer;\r",
													"var newReleaseHttpClientLtp;\r",
													"var newReleaseTcpClientLtp;\r",
													"try {\r",
													"    currentOperationServer = FindOperationServer(\"/v1/bequeath-your-data-and-die\", ltpList);\r",
													"\r",
													"    //Bequeath Transfer Of List Of Applications\r",
													"    let bequeathingDataCausesTransferOfListOfApplicationsOperationClientLtp = FindOperationClientUsingCallback(\"PromptForBequeathingDataCausesTransferOfListOfApplications\", fcList, ltpList)\r",
													"\r",
													"    newReleaseHttpClientLtp = FindServingLtp(bequeathingDataCausesTransferOfListOfApplicationsOperationClientLtp, ltpList);\r",
													"    newReleaseTcpClientLtp = FindServingLtp(newReleaseHttpClientLtp, ltpList);\r",
													"    \r",
													"} catch (error) {\r",
													"    console.log(error);\r",
													"    console.log(\"! Reference objects could not be extracted.\");\r",
													"} \r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Setting Collection Variables\r",
													"****************************************************************************************/\r",
													"try {\r",
													"    pm.collectionVariables.clear();\r",
													"    \r",
													"    pm.collectionVariables.set(\"currentOperationServer\", currentOperationServer);\r",
													"    pm.collectionVariables.set(\"newReleaseHttpClientLtp\", newReleaseHttpClientLtp);\r",
													"    pm.collectionVariables.set(\"newReleaseTcpClientLtp\", newReleaseTcpClientLtp);\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Collection variables could not be set.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													"\r",
													"function FindOperationServer(operationName, ltpList) {\r",
													"    let operationServer;\r",
													"    operationServer = \"\";\r",
													"    try {\r",
													"        let sampleUuid;\r",
													"        for(let i=0; i<ltpList.length; i++) {\r",
													"            sampleUuid = ltpList[i][\"uuid\"];\r",
													"            if(sampleUuid.includes(\"op-s-\")) {\r",
													"                let sampleOperationName;\r",
													"                sampleOperationName = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
													"                if(sampleOperationName == operationName) {\r",
													"                    operationServer = ltpList[i];\r",
													"                    return operationServer;\r",
													"                }\r",
													"            }\r",
													"        }\r",
													"    } catch (error) {\r",
													"        console.log(\"! Exception in function : FindOperationServer. \");\r",
													"    }\r",
													"    return operationServer;\r",
													"}\r",
													"\r",
													"\r",
													"function FindOutputFcPortList(forwardingName, fcList) {\r",
													"    let outputFcPortList;\r",
													"    outputFcPortList = [];\r",
													"    try {\r",
													"        for( let i=0; i<fcList.length; i++ ) {\r",
													"            for(let j=0; j<fcList[i][\"name\"].length; j++) {               \r",
													"                if(fcList[i][\"name\"][j][\"value\"] == forwardingName) {\r",
													"                    fcPortList = fcList[i][\"fc-port\"];\r",
													"                    for(let k=0;k<fcPortList.length;k++) {\r",
													"                        if(fcPortList[k][\"port-direction\"] == \"core-model-1-4:PORT_DIRECTION_TYPE_OUTPUT\") {\r",
													"                            outputFcPortList.push(fcPortList[k]);\r",
													"                        }\r",
													"                    }\r",
													"                    return outputFcPortList;\r",
													"                }\r",
													"            }\r",
													"        }\r",
													"    } catch (error) {\r",
													"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
													"    }\r",
													"    return outputFcPortList;\r",
													"}\r",
													"\r",
													"function FindActualInstanceByUuid(expectedUuid, actualLtpList) {\r",
													"    let actualInstance;\r",
													"    actualInstance = {};\r",
													"    try {\r",
													"        for ( let i=0; i<actualLtpList.length; i++ ) {\r",
													"            let sampleUuid;\r",
													"            sampleUuid = actualLtpList[i][\"uuid\"];\r",
													"            if( sampleUuid == expectedUuid ) {\r",
													"                actualInstance = actualLtpList[i];\r",
													"                return actualInstance;\r",
													"            }\r",
													"        }\r",
													"\r",
													"    } catch (error) {\r",
													"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
													"    }\r",
													"    return undefined;\r",
													"}\r",
													"\r",
													"function FindServingLtp(clientLtp, ltpList) {\r",
													"    let servingLtp;\r",
													"    servingLtp = {};\r",
													"    try{\r",
													"        let serverLtpUuid;\r",
													"        serverLtpUuid = clientLtp[\"server-ltp\"][0];\r",
													"        for( let i=0; i<ltpList.length; i++ ) {\r",
													"            let sampleUuid;\r",
													"            sampleUuid = ltpList[i][\"uuid\"];\r",
													"            if( sampleUuid == serverLtpUuid ) {\r",
													"                servingLtp = ltpList[i];\r",
													"                return servingLtp;\r",
													"            }\r",
													"        }\r",
													"    } catch(error) {\r",
													"        console.log(error);\r",
													"        console.log(\"! Exception in function : FindServingLtp. \")\r",
													"    }\r",
													"    return servingLtp;\r",
													"}\r",
													"\r",
													"\r",
													"function FindOperationClientUsingCallback(callback, fcList, ltpList) {\r",
													"    let operationClientLtp\r",
													"    try {\r",
													"        let outputFcPortList = FindOutputFcPortList(callback, fcList);\r",
													"        let randomOutputFcPort = outputFcPortList[Math.floor(Math.random() * outputFcPortList.length)];\r",
													"        let outputLtpUuid = randomOutputFcPort[\"logical-termination-point\"];\r",
													"        operationClientLtp = FindActualInstanceByUuid(outputLtpUuid, ltpList);\r",
													"    } catch (error) {\r",
													"        console.log(error);\r",
													"        console.log(\"! Exception in function FindOperationClientUsingCallback. \");\r",
													"    }\r",
													"    return  operationClientLtp\r",
													"}\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "x-mock-response-code",
												"value": "200",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{uri}}",
											"host": [
												"{{uri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Expected /v1/bequeath-your-data-and-die response header parameter completeness",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"var APPLICATION;\r",
													"var OPERATION_KEY;\r",
													"var newApplicationName;\r",
													"var newApplicationRelease;\r",
													"var dummyApplicationProtocol;\r",
													"var dummyApplicationAddress;\r",
													"var dummyApplicationPort;\r",
													"try {\r",
													"    APPLICATION = pm.environment.get(\"application\");\r",
													"\r",
													"    let currentOperationServer;\r",
													"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
													"    \r",
													"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
													"\r",
													"    let newReleaseHttpClientLtp;\r",
													"    newReleaseHttpClientLtp = pm.collectionVariables.get(\"newReleaseHttpClientLtp\");\r",
													"\r",
													"    newApplicationName = newReleaseHttpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
													"\r",
													"    newApplicationRelease = newReleaseHttpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"release-number\"];\r",
													"\r",
													"    let newReleaseTcpClientLtp;\r",
													"    newReleaseTcpClientLtp = pm.collectionVariables.get(\"newReleaseTcpClientLtp\");\r",
													"\r",
													"    let protocol = newReleaseTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
													"    dummyApplicationProtocol = GenerateDummyRemoteProtocol(protocol);\r",
													"    dummyApplicationProtocol = dummyApplicationProtocol.substring(('tcp-client-interface-1-0:PROTOCOL_TYPE_').length);\r",
													"\r",
													"    let dummyIpv4Address = RandomIpAddress();\r",
													"    dummyApplicationAddress = {\r",
													"        \"ip-address\": {\r",
													"            \"ipv-4-address\": dummyIpv4Address\r",
													"        }\r",
													"    };\r",
													"    dummyApplicationPort = RandomTcpPort();\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(error);\r",
													"    console.log(\"! Input Data could not be loaded.\");\r",
													"}\r",
													"\r",
													"/****************************************************************************************\r",
													"* Defining Dummy Parameters\r",
													"****************************************************************************************/\r",
													"var USER_NAME;\r",
													"var ORIGINATOR;\r",
													"var X_CORRELATOR;\r",
													"var TRACE_INDICATOR;\r",
													"var CUSTOMER_JOURNEY;\r",
													"try {\r",
													"    USER_NAME = APPLICATION.userName;\r",
													"    ORIGINATOR = \"Postman\";\r",
													"    X_CORRELATOR = CreateXCorrelator();\r",
													"    TRACE_INDICATOR = \"1\";\r",
													"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
													"    \r",
													"} catch (error) {\r",
													"    console.log(\"! Could not define dummy values for parameters. \");\r",
													"}\r",
													"\r",
													"/****************************************************************************************\r",
													"* Defining Request Body\r",
													"****************************************************************************************/\r",
													"var REQUEST_BODY;\r",
													"try {\r",
													"    REQUEST_BODY = '{'\r",
													"        + '\"new-application-name\" : ' + '\"' + newApplicationName + '\",'\r",
													"        + '\"new-application-release\" : ' + '\"' + newApplicationRelease + '\",'\r",
													"        + '\"new-application-protocol\" : ' + '\"' + dummyApplicationProtocol + '\",'\r",
													"        + '\"new-application-address\" : ' + JSON.stringify(dummyApplicationAddress) + ','\r",
													"        + '\"new-application-port\" : ' + dummyApplicationPort\r",
													"    +'}';\r",
													"} catch (error) {\r",
													"    console.log(\"!Could not define request body. \");\r",
													"}\r",
													"/****************************************************************************************\r",
													"* Setting Collection Variables\r",
													"****************************************************************************************/\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Setting Local Variables and Preparing the Request\r",
													"****************************************************************************************/\r",
													"try {\r",
													"    let URI;\r",
													"    URI = APPLICATION.serverUrl + \"/v1/bequeath-your-data-and-die\";\r",
													"\r",
													"    let ACCEPT;\r",
													"    ACCEPT = \"application/json\";\r",
													"\r",
													"    let CONTENT_TYPE;\r",
													"    CONTENT_TYPE = \"application/json\";\r",
													"\r",
													"    pm.variables.clear();\r",
													"\r",
													"    pm.variables.set(\"uri\", URI);\r",
													"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
													"\r",
													"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
													"\r",
													"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
													"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
													"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
													"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
													"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
													"\r",
													"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
													"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(error);\r",
													"    console.log(\"! Local variables could not be set.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													"\r",
													"function CreateXCorrelator() {\r",
													"    let xCorrelator;\r",
													"    xCorrelator = \"\";\r",
													"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
													"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
													"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
													"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
													"    xCorrelator += GenerateRandomHexString(12);\r",
													"    return xCorrelator;\r",
													"}\r",
													"\r",
													"function GenerateRandomHexString(length) {\r",
													"    var randomRandomHexString = \"\";\r",
													"    while (randomRandomHexString.length < length) {\r",
													"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
													"    }\r",
													"    return randomRandomHexString.substring(0,length);\r",
													"}\r",
													"\r",
													"function RandomIpAddress() {\r",
													"    let randomAddress\r",
													"    let addressParts = [];\r",
													"    for ( let i=0; i<4; i++ ) {\r",
													"        addressParts[i] = String(Math.floor(Math.random() * 256));\r",
													"    }\r",
													"    randomAddress = addressParts[0] + \".\" + addressParts[1] + \".\" + addressParts[2] + \".\" + addressParts[3];\r",
													"    return randomAddress;\r",
													"}\r",
													"\r",
													"function RandomTcpPort() {\r",
													"    let randomPort;\r",
													"    randomPort = 2000 + Math.floor( Math.random() * 1000 );\r",
													"    return randomPort;\r",
													"}\r",
													"\r",
													"function GenerateDummyRemoteProtocol(currentProtocol) {\r",
													"    let alternativeProtocolList;\r",
													"    alternativeProtocolList = [  \"tcp-client-interface-1-0:PROTOCOL_TYPE_HTTP\",\r",
													"                                    \"tcp-client-interface-1-0:PROTOCOL_TYPE_HTTPS\"\r",
													"                                ];\r",
													"    let indexOfCurrentProtocol;\r",
													"    indexOfCurrentProtocol = alternativeProtocolList.indexOf(currentProtocol);\r",
													"    if (indexOfCurrentProtocol > -1) {\r",
													"        alternativeProtocolList.splice(indexOfCurrentProtocol, 1);\r",
													"    }\r",
													"\r",
													"    let alternativeProtocol;\r",
													"    let alternativeProtocolIndex;\r",
													"    alternativeProtocolIndex = Math.floor(Math.random() * alternativeProtocolList.length);\r",
													"    alternativeProtocol = alternativeProtocolList[alternativeProtocolIndex]; \r",
													"\r",
													"    return alternativeProtocol;\r",
													"}\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Extracting Result\r",
													"****************************************************************************************/\r",
													"var RESPONSE_CODE;\r",
													"var response;\r",
													"try {\r",
													"    response = pm.response;\r",
													"    RESPONSE_CODE = parseInt(response.code);\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Response Code could not be extracted.\");\r",
													"}    \r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Testing\r",
													"****************************************************************************************/\r",
													"try {\r",
													"    pm.test(\"POST /v1/bequeath-your-data-and-die responds 204\", function () {\r",
													"        pm.expect(RESPONSE_CODE).to.equal(204);\r",
													"    });\r",
													"    pm.test(\"Response headers contain 'x-correlator'\", function () {\r",
													"        response.to.have.header(\"x-correlator\");\r",
													"    });\r",
													"    pm.test(\"Response headers contain 'exec-time'\", function () {\r",
													"        response.to.have.header(\"exec-time\");\r",
													"    });\r",
													"    pm.test(\"Response headers contain 'backend-time'\", function () {\r",
													"        response.to.have.header(\"backend-time\");\r",
													"    });\r",
													"    pm.test(\"Response headers contain 'life-cycle-state'\", function () {\r",
													"        response.to.have.header(\"life-cycle-state\");\r",
													"    });\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Testing could not be executed.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-mock-response-code",
												"value": "204",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{uri}}",
											"host": [
												"{{uri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "initial newRelease/remote-protocol",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"var APPLICATION;\r",
													"var newReleaseTcpClientUuid;\r",
													"var initialReleaseRemoteProtocol;\r",
													"try {\r",
													"    APPLICATION = pm.environment.get(\"application\");\r",
													"    \r",
													"    let newReleaseTcpClientLtp;\r",
													"    newReleaseTcpClientLtp = pm.collectionVariables.get(\"newReleaseTcpClientLtp\");\r",
													"\r",
													"    newReleaseTcpClientUuid = newReleaseTcpClientLtp[\"uuid\"];\r",
													"\r",
													"    initialReleaseRemoteProtocol = newReleaseTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Variables could not be loaded.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Setting Local Variables and Preparing the Request\r",
													"****************************************************************************************/\r",
													"try {\r",
													"    let URI;\r",
													"    URI = APPLICATION.serverUrl \r",
													"            + \"/core-model-1-4:control-construct/logical-termination-point=\" \r",
													"            + newReleaseTcpClientUuid\r",
													"            + \"/layer-protocol=0/tcp-client-interface-1-0:tcp-client-interface-pac/tcp-client-interface-configuration/remote-protocol\";\r",
													"\r",
													"    let REQUEST_BODY;\r",
													"    REQUEST_BODY = '{ '\r",
													"                    +   '\"tcp-client-interface-1-0:remote-protocol\": \"' + initialReleaseRemoteProtocol + '\"'\r",
													"                    + ' }';\r",
													"\r",
													"    let AUTHORIZATION;\r",
													"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
													"\r",
													"    let ACCEPT;\r",
													"    ACCEPT = \"application/json\";\r",
													"\r",
													"    let CONTENT_TYPE;\r",
													"    CONTENT_TYPE = \"application/json\";\r",
													"\r",
													"\r",
													"    pm.variables.clear();\r",
													"\r",
													"    pm.variables.set(\"uri\", URI);\r",
													"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
													"\r",
													"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
													"\r",
													"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
													"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(error)\r",
													"    console.log(\"! Local variables could not be set.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-mock-response-code",
												"value": "204",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{uri}}",
											"host": [
												"{{uri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "initial newRelease/remote-address",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"var APPLICATION;\r",
													"var newReleaseTcpClientUuid;\r",
													"var initialReleaseRemoteAddress;\r",
													"try {\r",
													"    APPLICATION = pm.environment.get(\"application\");\r",
													"    \r",
													"    let newReleaseTcpClientLtp;\r",
													"    newReleaseTcpClientLtp = pm.collectionVariables.get(\"newReleaseTcpClientLtp\");\r",
													"\r",
													"    newReleaseTcpClientUuid = newReleaseTcpClientLtp[\"uuid\"];\r",
													"\r",
													"    initialReleaseRemoteAddress = newReleaseTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-address\"];\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Variables could not be loaded.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Setting Local Variables and Preparing the Request\r",
													"****************************************************************************************/\r",
													"try {\r",
													"    let URI;\r",
													"    URI = APPLICATION.serverUrl \r",
													"            + \"/core-model-1-4:control-construct/logical-termination-point=\"\r",
													"            + newReleaseTcpClientUuid\r",
													"            + \"/layer-protocol=0/tcp-client-interface-1-0:tcp-client-interface-pac/tcp-client-interface-configuration/remote-address\";\r",
													"\r",
													"    let REQUEST_BODY;\r",
													"    REQUEST_BODY = '{ '\r",
													"                    +   '\"tcp-client-interface-1-0:remote-address\": ' + JSON.stringify(initialReleaseRemoteAddress)\r",
													"                    + ' }';\r",
													"\r",
													"    let AUTHORIZATION;\r",
													"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
													"\r",
													"    let ACCEPT;\r",
													"    ACCEPT = \"application/json\";\r",
													"\r",
													"    let CONTENT_TYPE;\r",
													"    CONTENT_TYPE = \"application/json\";\r",
													"\r",
													"    pm.variables.clear();\r",
													"\r",
													"    pm.variables.set(\"uri\", URI);\r",
													"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
													"\r",
													"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
													"\r",
													"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
													"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(error)\r",
													"    console.log(\"! Local variables could not be set.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-mock-response-code",
												"value": "204",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{uri}}",
											"host": [
												"{{uri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "initial newRelease/remote-port",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"var APPLICATION;\r",
													"var newReleaseTcpClientUuid;\r",
													"var initialReleaseRemotePort;\r",
													"try {\r",
													"    APPLICATION = pm.environment.get(\"application\");\r",
													"    \r",
													"    let newReleaseTcpClientLtp;\r",
													"    newReleaseTcpClientLtp = pm.collectionVariables.get(\"newReleaseTcpClientLtp\");\r",
													"\r",
													"    newReleaseTcpClientUuid = newReleaseTcpClientLtp[\"uuid\"];\r",
													"\r",
													"    initialReleaseRemotePort = newReleaseTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-port\"];\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Variables could not be loaded.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Setting Local Variables and Preparing the Request\r",
													"****************************************************************************************/\r",
													"try {\r",
													"    let URI;\r",
													"    URI = APPLICATION.serverUrl \r",
													"            + \"/core-model-1-4:control-construct/logical-termination-point=\" \r",
													"            + newReleaseTcpClientUuid\r",
													"            + \"/layer-protocol=0/tcp-client-interface-1-0:tcp-client-interface-pac/tcp-client-interface-configuration/remote-port\";\r",
													"\r",
													"    let REQUEST_BODY;\r",
													"    REQUEST_BODY = '{ '\r",
													"                    +   '\"tcp-client-interface-1-0:remote-port\": ' + initialReleaseRemotePort\r",
													"                    + ' }';\r",
													"\r",
													"    let AUTHORIZATION;\r",
													"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
													"\r",
													"    let ACCEPT;\r",
													"    ACCEPT = \"application/json\";\r",
													"\r",
													"    let CONTENT_TYPE;\r",
													"    CONTENT_TYPE = \"application/json\";\r",
													"\r",
													"\r",
													"    pm.variables.clear();\r",
													"\r",
													"    pm.variables.set(\"uri\", URI);\r",
													"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
													"\r",
													"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
													"\r",
													"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
													"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(error)\r",
													"    console.log(\"! Local variables could not be set.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-mock-response-code",
												"value": "204",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{uri}}",
											"host": [
												"{{uri}}"
											]
										}
									},
									"response": []
								}
							],
							"description": "## Contains response complete set of headers?\n#### Preparation:\n- GETing CC (/core-model-1-4:control-construct)\n  - searching CC for op-s of /v1/bequeath-your-data-and-die, storing operation-key\n  - searcing CC for output port of PromptForBequeathingDataCausesTransferOfListOfApplications, find corresponding op-c, http-c and tcp-c, store them\n- POST /v1/bequeath-your-data-and-die with\n  - new-application-name and new-application-release according to chosen http-c\n  - new-application-protocol, new-application-address and new-application-port with random generated dummy values (assure sufficiently high probability that set does not exist!)\n  - operation-key from above\n  - reasonable parameter\n\n#### Testing:\n- checking for ResponseCode==204\n- checking for ResponseHeaders (x-correlator, exec-time, backend-time and life-cycle-state) being present and checking for correctness of type of each parameter.\n\n#### Clearing:\n- PUT NewRelease/remote-protocol with original value\n- PUT NewRelease/remote-address with original value\n- PUT NewRelease/remote-port with original value"
						},
						{
							"name": "x-correlator responded?",
							"item": [
								{
									"name": "reference /core-model-1-4:control-construct",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"console.log(\"\\n----- /v1/bequeath-your-data-and-die integration -- x-correlator responded? -------------------------------\");\r",
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"var APPLICATION;\r",
													"try {\r",
													"    APPLICATION = pm.environment.get(\"application\");\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Environment variables could not be loaded.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Setting Local Variables and Preparing the Request\r",
													"****************************************************************************************/\r",
													"try {\r",
													"    let URI;\r",
													"    URI = APPLICATION.serverUrl + \"/core-model-1-4:control-construct\";\r",
													"\r",
													"    let REQUEST_BODY;\r",
													"    REQUEST_BODY = \"\";\r",
													"\r",
													"    let AUTHORIZATION;\r",
													"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
													"\r",
													"    let ACCEPT;\r",
													"    ACCEPT = \"application/json\";\r",
													"\r",
													"    let CONTENT_TYPE;\r",
													"    CONTENT_TYPE = \"application/json\";\r",
													"\r",
													"\r",
													"    pm.variables.clear();\r",
													"\r",
													"    pm.variables.set(\"uri\", URI);\r",
													"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
													"\r",
													"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
													"\r",
													"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
													"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Local variables could not be set.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Extracting Result\r",
													"****************************************************************************************/\r",
													"var ltpList;\r",
													"var fcList;\r",
													"try {\r",
													"    let response;\r",
													"    response = pm.response;\r",
													"    \r",
													"    let responseCode;\r",
													"    responseCode = parseInt(response.code);\r",
													"    \r",
													"    if ( Math.floor(responseCode/100) === 2 ) {\r",
													"        let responseObject;\r",
													"        responseObject = JSON.parse(response.stream);\r",
													"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
													"        fcList = responseObject[\"core-model-1-4:control-construct\"][\"forwarding-domain\"][0][\"forwarding-construct\"];\r",
													"\r",
													"    } else {\r",
													"        ltpList = [];\r",
													"        fcList = [];\r",
													"    }\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! ltpList could not be extracted.\");\r",
													"}\r",
													"\r",
													"var currentOperationServer;\r",
													"var newReleaseHttpClientLtp;\r",
													"var newReleaseTcpClientLtp;\r",
													"try {\r",
													"    currentOperationServer = FindOperationServer(\"/v1/bequeath-your-data-and-die\", ltpList);\r",
													"\r",
													"    //Bequeath Transfer Of List Of Applications\r",
													"    let bequeathingDataCausesTransferOfListOfApplicationsOperationClientLtp = FindOperationClientUsingCallback(\"PromptForBequeathingDataCausesTransferOfListOfApplications\", fcList, ltpList)\r",
													"\r",
													"    newReleaseHttpClientLtp = FindServingLtp(bequeathingDataCausesTransferOfListOfApplicationsOperationClientLtp, ltpList);\r",
													"    newReleaseTcpClientLtp = FindServingLtp(newReleaseHttpClientLtp, ltpList);\r",
													"    \r",
													"} catch (error) {\r",
													"    console.log(error);\r",
													"    console.log(\"! Reference objects could not be extracted.\");\r",
													"} \r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Setting Collection Variables\r",
													"****************************************************************************************/\r",
													"try {\r",
													"    pm.collectionVariables.clear();\r",
													"    \r",
													"    pm.collectionVariables.set(\"currentOperationServer\", currentOperationServer);\r",
													"    pm.collectionVariables.set(\"newReleaseHttpClientLtp\", newReleaseHttpClientLtp);\r",
													"    pm.collectionVariables.set(\"newReleaseTcpClientLtp\", newReleaseTcpClientLtp);\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Collection variables could not be set.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													"\r",
													"function FindOperationServer(operationName, ltpList) {\r",
													"    let operationServer;\r",
													"    operationServer = \"\";\r",
													"    try {\r",
													"        let sampleUuid;\r",
													"        for(let i=0; i<ltpList.length; i++) {\r",
													"            sampleUuid = ltpList[i][\"uuid\"];\r",
													"            if(sampleUuid.includes(\"op-s-\")) {\r",
													"                let sampleOperationName;\r",
													"                sampleOperationName = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
													"                if(sampleOperationName == operationName) {\r",
													"                    operationServer = ltpList[i];\r",
													"                    return operationServer;\r",
													"                }\r",
													"            }\r",
													"        }\r",
													"    } catch (error) {\r",
													"        console.log(\"! Exception in function : FindOperationServer. \");\r",
													"    }\r",
													"    return operationServer;\r",
													"}\r",
													"\r",
													"\r",
													"function FindOutputFcPortList(forwardingName, fcList) {\r",
													"    let outputFcPortList;\r",
													"    outputFcPortList = [];\r",
													"    try {\r",
													"        for( let i=0; i<fcList.length; i++ ) {\r",
													"            for(let j=0; j<fcList[i][\"name\"].length; j++) {               \r",
													"                if(fcList[i][\"name\"][j][\"value\"] == forwardingName) {\r",
													"                    fcPortList = fcList[i][\"fc-port\"];\r",
													"                    for(let k=0;k<fcPortList.length;k++) {\r",
													"                        if(fcPortList[k][\"port-direction\"] == \"core-model-1-4:PORT_DIRECTION_TYPE_OUTPUT\") {\r",
													"                            outputFcPortList.push(fcPortList[k]);\r",
													"                        }\r",
													"                    }\r",
													"                    return outputFcPortList;\r",
													"                }\r",
													"            }\r",
													"        }\r",
													"    } catch (error) {\r",
													"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
													"    }\r",
													"    return outputFcPortList;\r",
													"}\r",
													"\r",
													"function FindActualInstanceByUuid(expectedUuid, actualLtpList) {\r",
													"    let actualInstance;\r",
													"    actualInstance = {};\r",
													"    try {\r",
													"        for ( let i=0; i<actualLtpList.length; i++ ) {\r",
													"            let sampleUuid;\r",
													"            sampleUuid = actualLtpList[i][\"uuid\"];\r",
													"            if( sampleUuid == expectedUuid ) {\r",
													"                actualInstance = actualLtpList[i];\r",
													"                return actualInstance;\r",
													"            }\r",
													"        }\r",
													"\r",
													"    } catch (error) {\r",
													"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
													"    }\r",
													"    return undefined;\r",
													"}\r",
													"\r",
													"function FindServingLtp(clientLtp, ltpList) {\r",
													"    let servingLtp;\r",
													"    servingLtp = {};\r",
													"    try{\r",
													"        let serverLtpUuid;\r",
													"        serverLtpUuid = clientLtp[\"server-ltp\"][0];\r",
													"        for( let i=0; i<ltpList.length; i++ ) {\r",
													"            let sampleUuid;\r",
													"            sampleUuid = ltpList[i][\"uuid\"];\r",
													"            if( sampleUuid == serverLtpUuid ) {\r",
													"                servingLtp = ltpList[i];\r",
													"                return servingLtp;\r",
													"            }\r",
													"        }\r",
													"    } catch(error) {\r",
													"        console.log(error);\r",
													"        console.log(\"! Exception in function : FindServingLtp. \")\r",
													"    }\r",
													"    return servingLtp;\r",
													"}\r",
													"\r",
													"\r",
													"function FindOperationClientUsingCallback(callback, fcList, ltpList) {\r",
													"    let operationClientLtp\r",
													"    try {\r",
													"        let outputFcPortList = FindOutputFcPortList(callback, fcList);\r",
													"        let randomOutputFcPort = outputFcPortList[Math.floor(Math.random() * outputFcPortList.length)];\r",
													"        let outputLtpUuid = randomOutputFcPort[\"logical-termination-point\"];\r",
													"        operationClientLtp = FindActualInstanceByUuid(outputLtpUuid, ltpList);\r",
													"    } catch (error) {\r",
													"        console.log(error);\r",
													"        console.log(\"! Exception in function FindOperationClientUsingCallback. \");\r",
													"    }\r",
													"    return  operationClientLtp\r",
													"}\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "x-mock-response-code",
												"value": "200",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{uri}}",
											"host": [
												"{{uri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Expected /v1/bequeath-your-data-and-die - correct x-correlator responded?",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"var APPLICATION;\r",
													"var OPERATION_KEY;\r",
													"var newApplicationName;\r",
													"var newApplicationRelease;\r",
													"var dummyApplicationProtocol;\r",
													"var dummyApplicationAddress;\r",
													"var dummyApplicationPort;\r",
													"try {\r",
													"    APPLICATION = pm.environment.get(\"application\");\r",
													"\r",
													"    let currentOperationServer;\r",
													"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
													"    \r",
													"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
													"\r",
													"    let newReleaseHttpClientLtp;\r",
													"    newReleaseHttpClientLtp = pm.collectionVariables.get(\"newReleaseHttpClientLtp\");\r",
													"\r",
													"    newApplicationName = newReleaseHttpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
													"\r",
													"    newApplicationRelease = newReleaseHttpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"release-number\"];\r",
													"\r",
													"    let newReleaseTcpClientLtp;\r",
													"    newReleaseTcpClientLtp = pm.collectionVariables.get(\"newReleaseTcpClientLtp\");\r",
													"\r",
													"    let protocol = newReleaseTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
													"    dummyApplicationProtocol = GenerateDummyRemoteProtocol(protocol);\r",
													"    dummyApplicationProtocol = dummyApplicationProtocol.substring(('tcp-client-interface-1-0:PROTOCOL_TYPE_').length);\r",
													"\r",
													"    let dummyIpv4Address = RandomIpAddress();\r",
													"    dummyApplicationAddress = {\r",
													"        \"ip-address\": {\r",
													"            \"ipv-4-address\": dummyIpv4Address\r",
													"        }\r",
													"    };\r",
													"    dummyApplicationPort = RandomTcpPort();\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(error);\r",
													"    console.log(\"! Input Data could not be loaded.\");\r",
													"}\r",
													"\r",
													"/****************************************************************************************\r",
													"* Defining Dummy Parameters\r",
													"****************************************************************************************/\r",
													"var USER_NAME;\r",
													"var ORIGINATOR;\r",
													"var X_CORRELATOR;\r",
													"var TRACE_INDICATOR;\r",
													"var CUSTOMER_JOURNEY;\r",
													"try {\r",
													"    USER_NAME = APPLICATION.userName;\r",
													"    ORIGINATOR = \"Postman\";\r",
													"    X_CORRELATOR = CreateXCorrelator();\r",
													"    TRACE_INDICATOR = \"1\";\r",
													"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
													"    \r",
													"} catch (error) {\r",
													"    console.log(\"! Could not define dummy values for parameters. \");\r",
													"}\r",
													"\r",
													"/****************************************************************************************\r",
													"* Defining Request Body\r",
													"****************************************************************************************/\r",
													"var REQUEST_BODY;\r",
													"try {\r",
													"    REQUEST_BODY = '{'\r",
													"        + '\"new-application-name\" : ' + '\"' + newApplicationName + '\",'\r",
													"        + '\"new-application-release\" : ' + '\"' + newApplicationRelease + '\",'\r",
													"        + '\"new-application-protocol\" : ' + '\"' + dummyApplicationProtocol + '\",'\r",
													"        + '\"new-application-address\" : ' + JSON.stringify(dummyApplicationAddress) + ','\r",
													"        + '\"new-application-port\" : ' + dummyApplicationPort\r",
													"    +'}';\r",
													"} catch (error) {\r",
													"    console.log(\"!Could not define request body. \");\r",
													"}\r",
													"\r",
													"/****************************************************************************************\r",
													"* Setting Collection Variables\r",
													"****************************************************************************************/\r",
													"try {\r",
													"    pm.collectionVariables.set(\"user\", USER_NAME);\r",
													"    pm.collectionVariables.set(\"originator\", ORIGINATOR);\r",
													"    pm.collectionVariables.set(\"xCorrelator\", X_CORRELATOR);\r",
													"    pm.collectionVariables.set(\"traceIndicator\", TRACE_INDICATOR);\r",
													"    pm.collectionVariables.set(\"customerJourney\", CUSTOMER_JOURNEY);\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Collection variables could not be set.\");\r",
													"}\r",
													"\r",
													"/****************************************************************************************\r",
													"* Setting Local Variables and Preparing the Request\r",
													"****************************************************************************************/\r",
													"try {\r",
													"    let URI;\r",
													"    URI = APPLICATION.serverUrl + \"/v1/bequeath-your-data-and-die\";\r",
													"\r",
													"    let ACCEPT;\r",
													"    ACCEPT = \"application/json\";\r",
													"\r",
													"    let CONTENT_TYPE;\r",
													"    CONTENT_TYPE = \"application/json\";\r",
													"\r",
													"    pm.variables.clear();\r",
													"\r",
													"    pm.variables.set(\"uri\", URI);\r",
													"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
													"\r",
													"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
													"\r",
													"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
													"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
													"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
													"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
													"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
													"\r",
													"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
													"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(error);\r",
													"    console.log(\"! Local variables could not be set.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													"\r",
													"function CreateXCorrelator() {\r",
													"    let xCorrelator;\r",
													"    xCorrelator = \"\";\r",
													"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
													"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
													"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
													"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
													"    xCorrelator += GenerateRandomHexString(12);\r",
													"    return xCorrelator;\r",
													"}\r",
													"\r",
													"function GenerateRandomHexString(length) {\r",
													"    var randomRandomHexString = \"\";\r",
													"    while (randomRandomHexString.length < length) {\r",
													"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
													"    }\r",
													"    return randomRandomHexString.substring(0,length);\r",
													"}\r",
													"\r",
													"function RandomIpAddress() {\r",
													"    let randomAddress\r",
													"    let addressParts = [];\r",
													"    for ( let i=0; i<4; i++ ) {\r",
													"        addressParts[i] = String(Math.floor(Math.random() * 256));\r",
													"    }\r",
													"    randomAddress = addressParts[0] + \".\" + addressParts[1] + \".\" + addressParts[2] + \".\" + addressParts[3];\r",
													"    return randomAddress;\r",
													"}\r",
													"\r",
													"function RandomTcpPort() {\r",
													"    let randomPort;\r",
													"    randomPort = 2000 + Math.floor( Math.random() * 1000 );\r",
													"    return randomPort;\r",
													"}\r",
													"\r",
													"function GenerateDummyRemoteProtocol(currentProtocol) {\r",
													"    let alternativeProtocolList;\r",
													"    alternativeProtocolList = [  \"tcp-client-interface-1-0:PROTOCOL_TYPE_HTTP\",\r",
													"                                    \"tcp-client-interface-1-0:PROTOCOL_TYPE_HTTPS\"\r",
													"                                ];\r",
													"    let indexOfCurrentProtocol;\r",
													"    indexOfCurrentProtocol = alternativeProtocolList.indexOf(currentProtocol);\r",
													"    if (indexOfCurrentProtocol > -1) {\r",
													"        alternativeProtocolList.splice(indexOfCurrentProtocol, 1);\r",
													"    }\r",
													"\r",
													"    let alternativeProtocol;\r",
													"    let alternativeProtocolIndex;\r",
													"    alternativeProtocolIndex = Math.floor(Math.random() * alternativeProtocolList.length);\r",
													"    alternativeProtocol = alternativeProtocolList[alternativeProtocolIndex]; \r",
													"\r",
													"    return alternativeProtocol;\r",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"var expectedXCorrelator;\r",
													"try {\r",
													"    expectedXCorrelator = pm.collectionVariables.get(\"xCorrelator\");\r",
													"   \r",
													"} catch(error) {\r",
													"    console.log(\"! Could not load input data. \");\r",
													"}\r",
													"\r",
													"/****************************************************************************************\r",
													"* Extracting Result\r",
													"****************************************************************************************/\r",
													"var RESPONSE_CODE;\r",
													"var actualXCorrelator;\r",
													"try {\r",
													"    let response;\r",
													"    response = pm.response;\r",
													"    \r",
													"    RESPONSE_CODE = parseInt(response.code);\r",
													"\r",
													"    let RESPONSE_HEADERS;\r",
													"    RESPONSE_HEADERS = pm.response.headers;  \r",
													"    \r",
													"    actualXCorrelator = RESPONSE_HEADERS.get(\"x-correlator\");\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Response Code could not be extracted.\");\r",
													"}    \r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Testing\r",
													"****************************************************************************************/\r",
													"try {\r",
													"    pm.test(\"POST /v1/bequeath-your-data-and-die responds 204\", function () {\r",
													"        pm.expect(RESPONSE_CODE).to.equal(204);\r",
													"    });\r",
													"    pm.test(\"Provides expected x-correlator: \" + expectedXCorrelator, function () {\r",
													"        pm.expect(actualXCorrelator).to.equal(expectedXCorrelator);\r",
													"    });\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Testing could not be executed.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-mock-response-code",
												"value": "204",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{uri}}",
											"host": [
												"{{uri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "initial newRelease/remote-protocol",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"var APPLICATION;\r",
													"var newReleaseTcpClientUuid;\r",
													"var initialReleaseRemoteProtocol;\r",
													"try {\r",
													"    APPLICATION = pm.environment.get(\"application\");\r",
													"    \r",
													"    let newReleaseTcpClientLtp;\r",
													"    newReleaseTcpClientLtp = pm.collectionVariables.get(\"newReleaseTcpClientLtp\");\r",
													"\r",
													"    newReleaseTcpClientUuid = newReleaseTcpClientLtp[\"uuid\"];\r",
													"\r",
													"    initialReleaseRemoteProtocol = newReleaseTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Variables could not be loaded.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Setting Local Variables and Preparing the Request\r",
													"****************************************************************************************/\r",
													"try {\r",
													"    let URI;\r",
													"    URI = APPLICATION.serverUrl \r",
													"            + \"/core-model-1-4:control-construct/logical-termination-point=\" \r",
													"            + newReleaseTcpClientUuid\r",
													"            + \"/layer-protocol=0/tcp-client-interface-1-0:tcp-client-interface-pac/tcp-client-interface-configuration/remote-protocol\";\r",
													"\r",
													"    let REQUEST_BODY;\r",
													"    REQUEST_BODY = '{ '\r",
													"                    +   '\"tcp-client-interface-1-0:remote-protocol\": \"' + initialReleaseRemoteProtocol + '\"'\r",
													"                    + ' }';\r",
													"\r",
													"    let AUTHORIZATION;\r",
													"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
													"\r",
													"    let ACCEPT;\r",
													"    ACCEPT = \"application/json\";\r",
													"\r",
													"    let CONTENT_TYPE;\r",
													"    CONTENT_TYPE = \"application/json\";\r",
													"\r",
													"\r",
													"    pm.variables.clear();\r",
													"\r",
													"    pm.variables.set(\"uri\", URI);\r",
													"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
													"\r",
													"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
													"\r",
													"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
													"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(error)\r",
													"    console.log(\"! Local variables could not be set.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-mock-response-code",
												"value": "204",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{uri}}",
											"host": [
												"{{uri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "initial newRelease/remote-address",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"var APPLICATION;\r",
													"var newReleaseTcpClientUuid;\r",
													"var initialReleaseRemoteAddress;\r",
													"try {\r",
													"    APPLICATION = pm.environment.get(\"application\");\r",
													"    \r",
													"    let newReleaseTcpClientLtp;\r",
													"    newReleaseTcpClientLtp = pm.collectionVariables.get(\"newReleaseTcpClientLtp\");\r",
													"\r",
													"    newReleaseTcpClientUuid = newReleaseTcpClientLtp[\"uuid\"];\r",
													"\r",
													"    initialReleaseRemoteAddress = newReleaseTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-address\"];\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Variables could not be loaded.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Setting Local Variables and Preparing the Request\r",
													"****************************************************************************************/\r",
													"try {\r",
													"    let URI;\r",
													"    URI = APPLICATION.serverUrl \r",
													"            + \"/core-model-1-4:control-construct/logical-termination-point=\"\r",
													"            + newReleaseTcpClientUuid\r",
													"            + \"/layer-protocol=0/tcp-client-interface-1-0:tcp-client-interface-pac/tcp-client-interface-configuration/remote-address\";\r",
													"\r",
													"    let REQUEST_BODY;\r",
													"    REQUEST_BODY = '{ '\r",
													"                    +   '\"tcp-client-interface-1-0:remote-address\": ' + JSON.stringify(initialReleaseRemoteAddress)\r",
													"                    + ' }';\r",
													"\r",
													"    let AUTHORIZATION;\r",
													"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
													"\r",
													"    let ACCEPT;\r",
													"    ACCEPT = \"application/json\";\r",
													"\r",
													"    let CONTENT_TYPE;\r",
													"    CONTENT_TYPE = \"application/json\";\r",
													"\r",
													"    pm.variables.clear();\r",
													"\r",
													"    pm.variables.set(\"uri\", URI);\r",
													"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
													"\r",
													"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
													"\r",
													"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
													"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(error)\r",
													"    console.log(\"! Local variables could not be set.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-mock-response-code",
												"value": "204",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{uri}}",
											"host": [
												"{{uri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "initial newRelease/remote-port",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"var APPLICATION;\r",
													"var newReleaseTcpClientUuid;\r",
													"var initialReleaseRemotePort;\r",
													"try {\r",
													"    APPLICATION = pm.environment.get(\"application\");\r",
													"    \r",
													"    let newReleaseTcpClientLtp;\r",
													"    newReleaseTcpClientLtp = pm.collectionVariables.get(\"newReleaseTcpClientLtp\");\r",
													"\r",
													"    newReleaseTcpClientUuid = newReleaseTcpClientLtp[\"uuid\"];\r",
													"\r",
													"    initialReleaseRemotePort = newReleaseTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-port\"];\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Variables could not be loaded.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Setting Local Variables and Preparing the Request\r",
													"****************************************************************************************/\r",
													"try {\r",
													"    let URI;\r",
													"    URI = APPLICATION.serverUrl \r",
													"            + \"/core-model-1-4:control-construct/logical-termination-point=\" \r",
													"            + newReleaseTcpClientUuid\r",
													"            + \"/layer-protocol=0/tcp-client-interface-1-0:tcp-client-interface-pac/tcp-client-interface-configuration/remote-port\";\r",
													"\r",
													"    let REQUEST_BODY;\r",
													"    REQUEST_BODY = '{ '\r",
													"                    +   '\"tcp-client-interface-1-0:remote-port\": ' + initialReleaseRemotePort\r",
													"                    + ' }';\r",
													"\r",
													"    let AUTHORIZATION;\r",
													"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
													"\r",
													"    let ACCEPT;\r",
													"    ACCEPT = \"application/json\";\r",
													"\r",
													"    let CONTENT_TYPE;\r",
													"    CONTENT_TYPE = \"application/json\";\r",
													"\r",
													"\r",
													"    pm.variables.clear();\r",
													"\r",
													"    pm.variables.set(\"uri\", URI);\r",
													"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
													"\r",
													"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
													"\r",
													"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
													"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(error)\r",
													"    console.log(\"! Local variables could not be set.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-mock-response-code",
												"value": "204",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{uri}}",
											"host": [
												"{{uri}}"
											]
										}
									},
									"response": []
								}
							],
							"description": "## Is the initial x-correlator ín the response?\n#### Preparation:\n- GETing CC (/core-model-1-4:control-construct)\n  - searching CC for op-s of /v1/bequeath-your-data-and-die, storing operation-key\n  - searcing CC for output port of PromptForBequeathingDataCausesTransferOfListOfApplications, find corresponding op-c, http-c and tcp-c, store them\n- POST /v1/bequeath-your-data-and-die with\n  - new-application-name and new-application-release according to chosen http-c\n  - new-application-protocol, new-application-address and new-application-port with random generated dummy values (assure sufficiently high probability that set does not exist!)\n  - operation-key from above\n  - reasonable parameter\n\n#### Testing:\n- checking for ResponseCode==204\n- checking for response headers containing x-correlator==dummyXCorrelator\n\n#### Clearing:\n- PUT NewRelease/remote-protocol with original value\n- PUT NewRelease/remote-address with original value\n- PUT NewRelease/remote-port with original value"
						},
						{
							"name": "life-cycle-state responded?",
							"item": [
								{
									"name": "reference /core-model-1-4:control-construct",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"console.log(\"\\n----- /v1/bequeath-your-data-and-die integration -- life-cycle-state responded? -------------------------------\");\r",
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"var APPLICATION;\r",
													"try {\r",
													"    APPLICATION = pm.environment.get(\"application\");\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Environment variables could not be loaded.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Setting Local Variables and Preparing the Request\r",
													"****************************************************************************************/\r",
													"try {\r",
													"    let URI;\r",
													"    URI = APPLICATION.serverUrl + \"/core-model-1-4:control-construct\";\r",
													"\r",
													"    let REQUEST_BODY;\r",
													"    REQUEST_BODY = \"\";\r",
													"\r",
													"    let AUTHORIZATION;\r",
													"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
													"\r",
													"    let ACCEPT;\r",
													"    ACCEPT = \"application/json\";\r",
													"\r",
													"    let CONTENT_TYPE;\r",
													"    CONTENT_TYPE = \"application/json\";\r",
													"\r",
													"\r",
													"    pm.variables.clear();\r",
													"\r",
													"    pm.variables.set(\"uri\", URI);\r",
													"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
													"\r",
													"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
													"\r",
													"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
													"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Local variables could not be set.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Extracting Result\r",
													"****************************************************************************************/\r",
													"var ltpList;\r",
													"var fcList;\r",
													"try {\r",
													"    let response;\r",
													"    response = pm.response;\r",
													"    \r",
													"    let responseCode;\r",
													"    responseCode = parseInt(response.code);\r",
													"    \r",
													"    if ( Math.floor(responseCode/100) === 2 ) {\r",
													"        let responseObject;\r",
													"        responseObject = JSON.parse(response.stream);\r",
													"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
													"        fcList = responseObject[\"core-model-1-4:control-construct\"][\"forwarding-domain\"][0][\"forwarding-construct\"];\r",
													"\r",
													"    } else {\r",
													"        ltpList = [];\r",
													"        fcList = [];\r",
													"    }\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! ltpList could not be extracted.\");\r",
													"}\r",
													"\r",
													"var currentOperationServer;\r",
													"var newReleaseHttpClientLtp;\r",
													"var newReleaseTcpClientLtp;\r",
													"try {\r",
													"    currentOperationServer = FindOperationServer(\"/v1/bequeath-your-data-and-die\", ltpList);\r",
													"\r",
													"    //Bequeath Transfer Of List Of Applications\r",
													"    let bequeathingDataCausesTransferOfListOfApplicationsOperationClientLtp = FindOperationClientUsingCallback(\"PromptForBequeathingDataCausesTransferOfListOfApplications\", fcList, ltpList)\r",
													"\r",
													"    newReleaseHttpClientLtp = FindServingLtp(bequeathingDataCausesTransferOfListOfApplicationsOperationClientLtp, ltpList);\r",
													"    newReleaseTcpClientLtp = FindServingLtp(newReleaseHttpClientLtp, ltpList);\r",
													"    \r",
													"} catch (error) {\r",
													"    console.log(error);\r",
													"    console.log(\"! Reference objects could not be extracted.\");\r",
													"} \r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Setting Collection Variables\r",
													"****************************************************************************************/\r",
													"try {\r",
													"    pm.collectionVariables.clear();\r",
													"    \r",
													"    pm.collectionVariables.set(\"currentOperationServer\", currentOperationServer);\r",
													"    pm.collectionVariables.set(\"newReleaseHttpClientLtp\", newReleaseHttpClientLtp);\r",
													"    pm.collectionVariables.set(\"newReleaseTcpClientLtp\", newReleaseTcpClientLtp);\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Collection variables could not be set.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													"\r",
													"function FindOperationServer(operationName, ltpList) {\r",
													"    let operationServer;\r",
													"    operationServer = \"\";\r",
													"    try {\r",
													"        let sampleUuid;\r",
													"        for(let i=0; i<ltpList.length; i++) {\r",
													"            sampleUuid = ltpList[i][\"uuid\"];\r",
													"            if(sampleUuid.includes(\"op-s-\")) {\r",
													"                let sampleOperationName;\r",
													"                sampleOperationName = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
													"                if(sampleOperationName == operationName) {\r",
													"                    operationServer = ltpList[i];\r",
													"                    return operationServer;\r",
													"                }\r",
													"            }\r",
													"        }\r",
													"    } catch (error) {\r",
													"        console.log(\"! Exception in function : FindOperationServer. \");\r",
													"    }\r",
													"    return operationServer;\r",
													"}\r",
													"\r",
													"\r",
													"function FindOutputFcPortList(forwardingName, fcList) {\r",
													"    let outputFcPortList;\r",
													"    outputFcPortList = [];\r",
													"    try {\r",
													"        for( let i=0; i<fcList.length; i++ ) {\r",
													"            for(let j=0; j<fcList[i][\"name\"].length; j++) {               \r",
													"                if(fcList[i][\"name\"][j][\"value\"] == forwardingName) {\r",
													"                    fcPortList = fcList[i][\"fc-port\"];\r",
													"                    for(let k=0;k<fcPortList.length;k++) {\r",
													"                        if(fcPortList[k][\"port-direction\"] == \"core-model-1-4:PORT_DIRECTION_TYPE_OUTPUT\") {\r",
													"                            outputFcPortList.push(fcPortList[k]);\r",
													"                        }\r",
													"                    }\r",
													"                    return outputFcPortList;\r",
													"                }\r",
													"            }\r",
													"        }\r",
													"    } catch (error) {\r",
													"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
													"    }\r",
													"    return outputFcPortList;\r",
													"}\r",
													"\r",
													"function FindActualInstanceByUuid(expectedUuid, actualLtpList) {\r",
													"    let actualInstance;\r",
													"    actualInstance = {};\r",
													"    try {\r",
													"        for ( let i=0; i<actualLtpList.length; i++ ) {\r",
													"            let sampleUuid;\r",
													"            sampleUuid = actualLtpList[i][\"uuid\"];\r",
													"            if( sampleUuid == expectedUuid ) {\r",
													"                actualInstance = actualLtpList[i];\r",
													"                return actualInstance;\r",
													"            }\r",
													"        }\r",
													"\r",
													"    } catch (error) {\r",
													"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
													"    }\r",
													"    return undefined;\r",
													"}\r",
													"\r",
													"function FindServingLtp(clientLtp, ltpList) {\r",
													"    let servingLtp;\r",
													"    servingLtp = {};\r",
													"    try{\r",
													"        let serverLtpUuid;\r",
													"        serverLtpUuid = clientLtp[\"server-ltp\"][0];\r",
													"        for( let i=0; i<ltpList.length; i++ ) {\r",
													"            let sampleUuid;\r",
													"            sampleUuid = ltpList[i][\"uuid\"];\r",
													"            if( sampleUuid == serverLtpUuid ) {\r",
													"                servingLtp = ltpList[i];\r",
													"                return servingLtp;\r",
													"            }\r",
													"        }\r",
													"    } catch(error) {\r",
													"        console.log(error);\r",
													"        console.log(\"! Exception in function : FindServingLtp. \")\r",
													"    }\r",
													"    return servingLtp;\r",
													"}\r",
													"\r",
													"\r",
													"function FindOperationClientUsingCallback(callback, fcList, ltpList) {\r",
													"    let operationClientLtp\r",
													"    try {\r",
													"        let outputFcPortList = FindOutputFcPortList(callback, fcList);\r",
													"        let randomOutputFcPort = outputFcPortList[Math.floor(Math.random() * outputFcPortList.length)];\r",
													"        let outputLtpUuid = randomOutputFcPort[\"logical-termination-point\"];\r",
													"        operationClientLtp = FindActualInstanceByUuid(outputLtpUuid, ltpList);\r",
													"    } catch (error) {\r",
													"        console.log(error);\r",
													"        console.log(\"! Exception in function FindOperationClientUsingCallback. \");\r",
													"    }\r",
													"    return  operationClientLtp\r",
													"}\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "x-mock-response-code",
												"value": "200",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{uri}}",
											"host": [
												"{{uri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Expected /v1/bequeath-your-data-and-die correct life-cycle-state responded?",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"var APPLICATION;\r",
													"var OPERATION_KEY;\r",
													"var newApplicationName;\r",
													"var newApplicationRelease;\r",
													"var dummyApplicationProtocol;\r",
													"var dummyApplicationAddress;\r",
													"var dummyApplicationPort;\r",
													"var LIFE_CYCLE_STATE;\r",
													"try {\r",
													"    APPLICATION = pm.environment.get(\"application\");\r",
													"\r",
													"    let currentOperationServer;\r",
													"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
													"    \r",
													"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
													"\r",
													"    let newReleaseHttpClientLtp;\r",
													"    newReleaseHttpClientLtp = pm.collectionVariables.get(\"newReleaseHttpClientLtp\");\r",
													"\r",
													"    newApplicationName = newReleaseHttpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
													"\r",
													"    newApplicationRelease = newReleaseHttpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"release-number\"];\r",
													"\r",
													"    let newReleaseTcpClientLtp;\r",
													"    newReleaseTcpClientLtp = pm.collectionVariables.get(\"newReleaseTcpClientLtp\");\r",
													"\r",
													"    let protocol = newReleaseTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
													"    dummyApplicationProtocol = GenerateDummyRemoteProtocol(protocol);\r",
													"    dummyApplicationProtocol = dummyApplicationProtocol.substring(('tcp-client-interface-1-0:PROTOCOL_TYPE_').length);\r",
													"\r",
													"    let dummyIpv4Address = RandomIpAddress();\r",
													"    dummyApplicationAddress = {\r",
													"        \"ip-address\": {\r",
													"            \"ipv-4-address\": dummyIpv4Address\r",
													"        }\r",
													"    };\r",
													"\r",
													"    dummyApplicationPort = RandomTcpPort();\r",
													"\r",
													"    let lifeCycleState;\r",
													"    lifeCycleState = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"life-cycle-state\"];\r",
													"    let prefixLength = ('operation-server-interface-1-0:LIFE_CYCLE_STATE_TYPE_').length;     \r",
													"    LIFE_CYCLE_STATE = lifeCycleState.substring(prefixLength);\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(error);\r",
													"    console.log(\"! Input Data could not be loaded.\");\r",
													"}\r",
													"\r",
													"/****************************************************************************************\r",
													"* Defining Dummy Parameters\r",
													"****************************************************************************************/\r",
													"var USER_NAME;\r",
													"var ORIGINATOR;\r",
													"var X_CORRELATOR;\r",
													"var TRACE_INDICATOR;\r",
													"var CUSTOMER_JOURNEY;\r",
													"try {\r",
													"    USER_NAME = APPLICATION.userName;\r",
													"    ORIGINATOR = \"Postman\";\r",
													"    X_CORRELATOR = CreateXCorrelator();\r",
													"    TRACE_INDICATOR = \"1\";\r",
													"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
													"    \r",
													"} catch (error) {\r",
													"    console.log(\"! Could not define dummy values for parameters. \");\r",
													"}\r",
													"\r",
													"/****************************************************************************************\r",
													"* Defining Request Body\r",
													"****************************************************************************************/\r",
													"var REQUEST_BODY;\r",
													"try {\r",
													"    REQUEST_BODY = '{'\r",
													"        + '\"new-application-name\" : ' + '\"' + newApplicationName + '\",'\r",
													"        + '\"new-application-release\" : ' + '\"' + newApplicationRelease + '\",'\r",
													"        + '\"new-application-protocol\" : ' + '\"' + dummyApplicationProtocol + '\",'\r",
													"        + '\"new-application-address\" : ' + JSON.stringify(dummyApplicationAddress) + ','\r",
													"        + '\"new-application-port\" : ' + dummyApplicationPort\r",
													"    +'}';\r",
													"} catch (error) {\r",
													"    console.log(\"!Could not define request body. \");\r",
													"}\r",
													"\r",
													"/****************************************************************************************\r",
													"* Setting Collection Variables\r",
													"****************************************************************************************/\r",
													"try {\r",
													"    pm.collectionVariables.set(\"expectedLifeCycleState\", LIFE_CYCLE_STATE);\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Collection variables could not be set.\");\r",
													"}\r",
													"\r",
													"/****************************************************************************************\r",
													"* Setting Local Variables and Preparing the Request\r",
													"****************************************************************************************/\r",
													"try {\r",
													"    let URI;\r",
													"    URI = APPLICATION.serverUrl + \"/v1/bequeath-your-data-and-die\";\r",
													"\r",
													"    let ACCEPT;\r",
													"    ACCEPT = \"application/json\";\r",
													"\r",
													"    let CONTENT_TYPE;\r",
													"    CONTENT_TYPE = \"application/json\";\r",
													"\r",
													"    pm.variables.clear();\r",
													"\r",
													"    pm.variables.set(\"uri\", URI);\r",
													"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
													"\r",
													"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
													"\r",
													"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
													"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
													"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
													"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
													"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
													"\r",
													"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
													"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(error);\r",
													"    console.log(\"! Local variables could not be set.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													"\r",
													"function CreateXCorrelator() {\r",
													"    let xCorrelator;\r",
													"    xCorrelator = \"\";\r",
													"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
													"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
													"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
													"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
													"    xCorrelator += GenerateRandomHexString(12);\r",
													"    return xCorrelator;\r",
													"}\r",
													"\r",
													"function GenerateRandomHexString(length) {\r",
													"    var randomRandomHexString = \"\";\r",
													"    while (randomRandomHexString.length < length) {\r",
													"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
													"    }\r",
													"    return randomRandomHexString.substring(0,length);\r",
													"}\r",
													"\r",
													"function RandomIpAddress() {\r",
													"    let randomAddress\r",
													"    let addressParts = [];\r",
													"    for ( let i=0; i<4; i++ ) {\r",
													"        addressParts[i] = String(Math.floor(Math.random() * 256));\r",
													"    }\r",
													"    randomAddress = addressParts[0] + \".\" + addressParts[1] + \".\" + addressParts[2] + \".\" + addressParts[3];\r",
													"    return randomAddress;\r",
													"}\r",
													"\r",
													"function RandomTcpPort() {\r",
													"    let randomPort;\r",
													"    randomPort = 2000 + Math.floor( Math.random() * 1000 );\r",
													"    return randomPort;\r",
													"}\r",
													"\r",
													"function GenerateDummyRemoteProtocol(currentProtocol) {\r",
													"    let alternativeProtocolList;\r",
													"    alternativeProtocolList = [  \"tcp-client-interface-1-0:PROTOCOL_TYPE_HTTP\",\r",
													"                                    \"tcp-client-interface-1-0:PROTOCOL_TYPE_HTTPS\"\r",
													"                                ];\r",
													"    let indexOfCurrentProtocol;\r",
													"    indexOfCurrentProtocol = alternativeProtocolList.indexOf(currentProtocol);\r",
													"    if (indexOfCurrentProtocol > -1) {\r",
													"        alternativeProtocolList.splice(indexOfCurrentProtocol, 1);\r",
													"    }\r",
													"\r",
													"    let alternativeProtocol;\r",
													"    let alternativeProtocolIndex;\r",
													"    alternativeProtocolIndex = Math.floor(Math.random() * alternativeProtocolList.length);\r",
													"    alternativeProtocol = alternativeProtocolList[alternativeProtocolIndex]; \r",
													"\r",
													"    return alternativeProtocol;\r",
													"}\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"var expectedLifeCycleState;\r",
													"try {\r",
													"    expectedLifeCycleState = pm.collectionVariables.get(\"expectedLifeCycleState\");\r",
													"   \r",
													"} catch(error) {\r",
													"    console.log(\"! Could not load input data. \");\r",
													"}\r",
													"\r",
													"/****************************************************************************************\r",
													"* Extracting Result\r",
													"****************************************************************************************/\r",
													"var RESPONSE_CODE;\r",
													"var actualLifeCycleState;\r",
													"try {\r",
													"    let response;\r",
													"    response = pm.response;\r",
													"    \r",
													"    RESPONSE_CODE = parseInt(response.code);\r",
													"\r",
													"    let RESPONSE_HEADERS;\r",
													"    RESPONSE_HEADERS = pm.response.headers;  \r",
													"    \r",
													"    actualLifeCycleState = RESPONSE_HEADERS.get(\"life-cycle-state\");\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Response Code could not be extracted.\");\r",
													"}    \r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Testing\r",
													"****************************************************************************************/\r",
													"try {\r",
													"    pm.test(\"POST /v1/bequeath-your-data-and-die responds 204\", function () {\r",
													"        pm.expect(RESPONSE_CODE).to.equal(204);\r",
													"    });\r",
													"    pm.test(\"Provides expected life-cycle-state: \" + expectedLifeCycleState, function () {\r",
													"        pm.expect(actualLifeCycleState).to.equal(expectedLifeCycleState);\r",
													"    });\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Testing could not be executed.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-mock-response-code",
												"value": "204",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{uri}}",
											"host": [
												"{{uri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "initial newRelease/remote-protocol",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"var APPLICATION;\r",
													"var newReleaseTcpClientUuid;\r",
													"var initialReleaseRemoteProtocol;\r",
													"try {\r",
													"    APPLICATION = pm.environment.get(\"application\");\r",
													"    \r",
													"    let newReleaseTcpClientLtp;\r",
													"    newReleaseTcpClientLtp = pm.collectionVariables.get(\"newReleaseTcpClientLtp\");\r",
													"\r",
													"    newReleaseTcpClientUuid = newReleaseTcpClientLtp[\"uuid\"];\r",
													"\r",
													"    initialReleaseRemoteProtocol = newReleaseTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Variables could not be loaded.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Setting Local Variables and Preparing the Request\r",
													"****************************************************************************************/\r",
													"try {\r",
													"    let URI;\r",
													"    URI = APPLICATION.serverUrl \r",
													"            + \"/core-model-1-4:control-construct/logical-termination-point=\" \r",
													"            + newReleaseTcpClientUuid\r",
													"            + \"/layer-protocol=0/tcp-client-interface-1-0:tcp-client-interface-pac/tcp-client-interface-configuration/remote-protocol\";\r",
													"\r",
													"    let REQUEST_BODY;\r",
													"    REQUEST_BODY = '{ '\r",
													"                    +   '\"tcp-client-interface-1-0:remote-protocol\": \"' + initialReleaseRemoteProtocol + '\"'\r",
													"                    + ' }';\r",
													"\r",
													"    let AUTHORIZATION;\r",
													"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
													"\r",
													"    let ACCEPT;\r",
													"    ACCEPT = \"application/json\";\r",
													"\r",
													"    let CONTENT_TYPE;\r",
													"    CONTENT_TYPE = \"application/json\";\r",
													"\r",
													"\r",
													"    pm.variables.clear();\r",
													"\r",
													"    pm.variables.set(\"uri\", URI);\r",
													"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
													"\r",
													"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
													"\r",
													"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
													"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(error)\r",
													"    console.log(\"! Local variables could not be set.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-mock-response-code",
												"value": "204",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{uri}}",
											"host": [
												"{{uri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "initial newRelease/remote-address",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"var APPLICATION;\r",
													"var newReleaseTcpClientUuid;\r",
													"var initialReleaseRemoteAddress;\r",
													"try {\r",
													"    APPLICATION = pm.environment.get(\"application\");\r",
													"    \r",
													"    let newReleaseTcpClientLtp;\r",
													"    newReleaseTcpClientLtp = pm.collectionVariables.get(\"newReleaseTcpClientLtp\");\r",
													"\r",
													"    newReleaseTcpClientUuid = newReleaseTcpClientLtp[\"uuid\"];\r",
													"\r",
													"    initialReleaseRemoteAddress = newReleaseTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-address\"];\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Variables could not be loaded.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Setting Local Variables and Preparing the Request\r",
													"****************************************************************************************/\r",
													"try {\r",
													"    let URI;\r",
													"    URI = APPLICATION.serverUrl \r",
													"            + \"/core-model-1-4:control-construct/logical-termination-point=\"\r",
													"            + newReleaseTcpClientUuid\r",
													"            + \"/layer-protocol=0/tcp-client-interface-1-0:tcp-client-interface-pac/tcp-client-interface-configuration/remote-address\";\r",
													"\r",
													"    let REQUEST_BODY;\r",
													"    REQUEST_BODY = '{ '\r",
													"                    +   '\"tcp-client-interface-1-0:remote-address\": ' + JSON.stringify(initialReleaseRemoteAddress)\r",
													"                    + ' }';\r",
													"\r",
													"    let AUTHORIZATION;\r",
													"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
													"\r",
													"    let ACCEPT;\r",
													"    ACCEPT = \"application/json\";\r",
													"\r",
													"    let CONTENT_TYPE;\r",
													"    CONTENT_TYPE = \"application/json\";\r",
													"\r",
													"    pm.variables.clear();\r",
													"\r",
													"    pm.variables.set(\"uri\", URI);\r",
													"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
													"\r",
													"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
													"\r",
													"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
													"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(error)\r",
													"    console.log(\"! Local variables could not be set.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-mock-response-code",
												"value": "204",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{uri}}",
											"host": [
												"{{uri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "initial newRelease/remote-port",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"var APPLICATION;\r",
													"var newReleaseTcpClientUuid;\r",
													"var initialReleaseRemotePort;\r",
													"try {\r",
													"    APPLICATION = pm.environment.get(\"application\");\r",
													"    \r",
													"    let newReleaseTcpClientLtp;\r",
													"    newReleaseTcpClientLtp = pm.collectionVariables.get(\"newReleaseTcpClientLtp\");\r",
													"\r",
													"    newReleaseTcpClientUuid = newReleaseTcpClientLtp[\"uuid\"];\r",
													"\r",
													"    initialReleaseRemotePort = newReleaseTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-port\"];\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Variables could not be loaded.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Setting Local Variables and Preparing the Request\r",
													"****************************************************************************************/\r",
													"try {\r",
													"    let URI;\r",
													"    URI = APPLICATION.serverUrl \r",
													"            + \"/core-model-1-4:control-construct/logical-termination-point=\" \r",
													"            + newReleaseTcpClientUuid\r",
													"            + \"/layer-protocol=0/tcp-client-interface-1-0:tcp-client-interface-pac/tcp-client-interface-configuration/remote-port\";\r",
													"\r",
													"    let REQUEST_BODY;\r",
													"    REQUEST_BODY = '{ '\r",
													"                    +   '\"tcp-client-interface-1-0:remote-port\": ' + initialReleaseRemotePort\r",
													"                    + ' }';\r",
													"\r",
													"    let AUTHORIZATION;\r",
													"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
													"\r",
													"    let ACCEPT;\r",
													"    ACCEPT = \"application/json\";\r",
													"\r",
													"    let CONTENT_TYPE;\r",
													"    CONTENT_TYPE = \"application/json\";\r",
													"\r",
													"\r",
													"    pm.variables.clear();\r",
													"\r",
													"    pm.variables.set(\"uri\", URI);\r",
													"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
													"\r",
													"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
													"\r",
													"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
													"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(error)\r",
													"    console.log(\"! Local variables could not be set.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-mock-response-code",
												"value": "204",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{uri}}",
											"host": [
												"{{uri}}"
											]
										}
									},
									"response": []
								}
							],
							"description": "## Is the correct life-cycle-state ín the response?\n#### Preparation:\n- GETing CC (/core-model-1-4:control-construct)\n  - searching CC for op-s of /v1/bequeath-your-data-and-die, storing operation-key\n  - searcing CC for output port of PromptForBequeathingDataCausesTransferOfListOfApplications, find corresponding op-c, http-c and tcp-c, store them\n- POST /v1/bequeath-your-data-and-die with\n  - new-application-name and new-application-release according to chosen http-c\n  - new-application-protocol, new-application-address and new-application-port with random generated dummy values (assure sufficiently high probability that set does not exist!)\n  - operation-key from above\n  - reasonable parameter\n\n#### Testing:\n- checking for ResponseCode==204\n- checking for response headers containing life-cycle-state is equal to the value as present in the control-construct for /v1/bequeath-your-data-and-die/configuration/life-cycle-state\n\n#### Clearing:\n- PUT NewRelease/remote-protocol with original value\n- PUT NewRelease/remote-address with original value\n- PUT NewRelease/remote-port with original value"
						},
						{
							"name": "Request notified?",
							"item": [
								{
									"name": "reference /core-model-1-4:control-construct",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"console.log(\"\\n-----  /v1/bequeath-your-data-and-die integration -- request notified? -------------------------------\");\r",
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"var APPLICATION;\r",
													"try {\r",
													"    APPLICATION = pm.environment.get(\"application\");\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Environment variables could not be loaded.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Setting Local Variables and Preparing the Request\r",
													"****************************************************************************************/\r",
													"try {\r",
													"    let URI;\r",
													"    URI = APPLICATION.serverUrl + \"/core-model-1-4:control-construct\";\r",
													"\r",
													"    let REQUEST_BODY;\r",
													"    REQUEST_BODY = \"\";\r",
													"\r",
													"    let AUTHORIZATION;\r",
													"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
													"\r",
													"    let ACCEPT;\r",
													"    ACCEPT = \"application/json\";\r",
													"\r",
													"    let CONTENT_TYPE;\r",
													"    CONTENT_TYPE = \"application/json\";\r",
													"\r",
													"\r",
													"    pm.variables.clear();\r",
													"\r",
													"    pm.variables.set(\"uri\", URI);\r",
													"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
													"\r",
													"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
													"\r",
													"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
													"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Local variables could not be set.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Extracting Result\r",
													"****************************************************************************************/\r",
													"var ltpList;\r",
													"var fcList;\r",
													"try {\r",
													"    let response;\r",
													"    response = pm.response;\r",
													"    \r",
													"    let responseCode;\r",
													"    responseCode = parseInt(response.code);\r",
													"    \r",
													"    if ( Math.floor(responseCode/100) === 2 ) {\r",
													"        let responseObject;\r",
													"        responseObject = JSON.parse(response.stream);\r",
													"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
													"        fcList = responseObject[\"core-model-1-4:control-construct\"][\"forwarding-domain\"][0][\"forwarding-construct\"];\r",
													"\r",
													"    } else {\r",
													"        ltpList = [];\r",
													"        fcList = [];\r",
													"    }\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! ltpList could not be extracted.\");\r",
													"}\r",
													"\r",
													"var currentOperationServer;\r",
													"var executionAndTraceLogHttpClientLtp;\r",
													"var executionAndTraceLogTcpClientLtp;\r",
													"var httpServerLtp;\r",
													"var newReleaseHttpClientLtp;\r",
													"var newReleaseTcpClientLtp;\r",
													"try {\r",
													"    currentOperationServer = FindOperationServer(\"/v1/bequeath-your-data-and-die\", ltpList);\r",
													"    httpServerLtp = FindHttpServerLtp(ltpList);\r",
													"\r",
													"    //Execution And Trace Log\r",
													"    let recordServiceRequestOperationClientLtp = FindOperationClientUsingCallback(\"ServiceRequestCausesLoggingRequest\", fcList, ltpList)\r",
													"    executionAndTraceLogHttpClientLtp = FindServingLtp(recordServiceRequestOperationClientLtp, ltpList);\r",
													"    executionAndTraceLogTcpClientLtp = FindServingLtp(executionAndTraceLogHttpClientLtp, ltpList);\r",
													"\r",
													"    //Bequeath Transfer Of List Of Applications\r",
													"    let bequeathingDataCausesTransferOfListOfApplicationsOperationClientLtp = FindOperationClientUsingCallback(\"PromptForBequeathingDataCausesTransferOfListOfApplications\", fcList, ltpList)\r",
													"    newReleaseHttpClientLtp = FindServingLtp(bequeathingDataCausesTransferOfListOfApplicationsOperationClientLtp, ltpList);\r",
													"    newReleaseTcpClientLtp = FindServingLtp(newReleaseHttpClientLtp, ltpList);\r",
													"    \r",
													"} catch (error) {\r",
													"    console.log(error);\r",
													"    console.log(\"! Reference objects could not be extracted.\");\r",
													"} \r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Setting Collection Variables\r",
													"****************************************************************************************/\r",
													"try {\r",
													"    pm.collectionVariables.clear();\r",
													"    \r",
													"    pm.collectionVariables.set(\"currentOperationServer\", currentOperationServer);\r",
													"    pm.collectionVariables.set(\"executionAndTraceLogHttpClientLtp\", executionAndTraceLogHttpClientLtp);\r",
													"    pm.collectionVariables.set(\"executionAndTraceLogTcpClientLtp\", executionAndTraceLogTcpClientLtp);\r",
													"    pm.collectionVariables.set(\"httpServerLtp\", httpServerLtp);\r",
													"    pm.collectionVariables.set(\"newReleaseHttpClientLtp\", newReleaseHttpClientLtp);\r",
													"    pm.collectionVariables.set(\"newReleaseTcpClientLtp\", newReleaseTcpClientLtp);\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Collection variables could not be set.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													"\r",
													"function FindOperationServer(operationName, ltpList) {\r",
													"    let operationServer;\r",
													"    operationServer = \"\";\r",
													"    try {\r",
													"        let sampleUuid;\r",
													"        for(let i=0; i<ltpList.length; i++) {\r",
													"            sampleUuid = ltpList[i][\"uuid\"];\r",
													"            if(sampleUuid.includes(\"op-s-\")) {\r",
													"                let sampleOperationName;\r",
													"                sampleOperationName = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
													"                if(sampleOperationName == operationName) {\r",
													"                    operationServer = ltpList[i];\r",
													"                    return operationServer;\r",
													"                }\r",
													"            }\r",
													"        }\r",
													"    } catch (error) {\r",
													"        console.log(\"! Exception in function : FindOperationServer. \");\r",
													"    }\r",
													"    return operationServer;\r",
													"}\r",
													"\r",
													"\r",
													"function FindOutputFcPortList(forwardingName, fcList) {\r",
													"    let outputFcPortList;\r",
													"    outputFcPortList = [];\r",
													"    try {\r",
													"        for( let i=0; i<fcList.length; i++ ) {\r",
													"            for(let j=0; j<fcList[i][\"name\"].length; j++) {               \r",
													"                if(fcList[i][\"name\"][j][\"value\"] == forwardingName) {\r",
													"                    fcPortList = fcList[i][\"fc-port\"];\r",
													"                    for(let k=0;k<fcPortList.length;k++) {\r",
													"                        if(fcPortList[k][\"port-direction\"] == \"core-model-1-4:PORT_DIRECTION_TYPE_OUTPUT\") {\r",
													"                            outputFcPortList.push(fcPortList[k]);\r",
													"                        }\r",
													"                    }\r",
													"                    return outputFcPortList;\r",
													"                }\r",
													"            }\r",
													"        }\r",
													"    } catch (error) {\r",
													"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
													"    }\r",
													"    return outputFcPortList;\r",
													"}\r",
													"\r",
													"function FindActualInstanceByUuid(expectedUuid, actualLtpList) {\r",
													"    let actualInstance;\r",
													"    actualInstance = {};\r",
													"    try {\r",
													"        for ( let i=0; i<actualLtpList.length; i++ ) {\r",
													"            let sampleUuid;\r",
													"            sampleUuid = actualLtpList[i][\"uuid\"];\r",
													"            if( sampleUuid == expectedUuid ) {\r",
													"                actualInstance = actualLtpList[i];\r",
													"                return actualInstance;\r",
													"            }\r",
													"        }\r",
													"\r",
													"    } catch (error) {\r",
													"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
													"    }\r",
													"    return undefined;\r",
													"}\r",
													"\r",
													"function FindServingLtp(clientLtp, ltpList) {\r",
													"    let servingLtp;\r",
													"    servingLtp = {};\r",
													"    try{\r",
													"        let serverLtpUuid;\r",
													"        serverLtpUuid = clientLtp[\"server-ltp\"][0];\r",
													"        for( let i=0; i<ltpList.length; i++ ) {\r",
													"            let sampleUuid;\r",
													"            sampleUuid = ltpList[i][\"uuid\"];\r",
													"            if( sampleUuid == serverLtpUuid ) {\r",
													"                servingLtp = ltpList[i];\r",
													"                return servingLtp;\r",
													"            }\r",
													"        }\r",
													"    } catch(error) {\r",
													"        console.log(error);\r",
													"        console.log(\"! Exception in function : FindServingLtp. \")\r",
													"    }\r",
													"    return servingLtp;\r",
													"}\r",
													"\r",
													"function FindHttpServerLtp(ltpList) {\r",
													"    let httpServerLtp;\r",
													"    httpServerLtp = {};\r",
													"    try {\r",
													"        for( let i=0; i<ltpList.length; i++ ) {\r",
													"            let sampleUuid;\r",
													"            sampleUuid = ltpList[i][\"uuid\"];\r",
													"            if(sampleUuid.includes(\"http-s-\")) {\r",
													"                httpServerLtp = ltpList[i];\r",
													"                return httpServerLtp;\r",
													"            }\r",
													"        } \r",
													"    } catch (error) {\r",
													"        console.log(\"! Exception in function : FindHttpServerLtp. \");\r",
													"    }\r",
													"    return httpServerLtp;\r",
													"}\r",
													"\r",
													"function FindOperationClientUsingCallback(callback, fcList, ltpList) {\r",
													"    let operationClientLtp\r",
													"    try {\r",
													"        let outputFcPortList = FindOutputFcPortList(callback, fcList);\r",
													"        let randomOutputFcPort = outputFcPortList[Math.floor(Math.random() * outputFcPortList.length)];\r",
													"        let outputLtpUuid = randomOutputFcPort[\"logical-termination-point\"];\r",
													"        operationClientLtp = FindActualInstanceByUuid(outputLtpUuid, ltpList);\r",
													"    } catch (error) {\r",
													"        console.log(error);\r",
													"        console.log(\"! Exception in function FindOperationClientUsingCallback. \");\r",
													"    }\r",
													"    return  operationClientLtp\r",
													"}\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "x-mock-response-code",
												"value": "200",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{uri}}",
											"host": [
												"{{uri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "reference ExecutionAndTraceLog/core-model-1-4:control-construct",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"var APPLICATION;\r",
													"var AUTHORIZATION;\r",
													"var applicationProtocol;\r",
													"var applicationAddress;\r",
													"var applicationPort;\r",
													"try {\r",
													"    APPLICATION = pm.environment.get(\"application\");\r",
													"\r",
													"    let executionAndTraceLogTcpClientLtp;\r",
													"    executionAndTraceLogTcpClientLtp = pm.collectionVariables.get(\"executionAndTraceLogTcpClientLtp\");\r",
													"\r",
													"    applicationProtocol = executionAndTraceLogTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
													"    applicationProtocol = applicationProtocol.substring(('tcp-client-interface-1-0:PROTOCOL_TYPE_').length);\r",
													"    \r",
													"    applicationAddress = executionAndTraceLogTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-address\"];\r",
													"    if(applicationAddress.hasOwnProperty(\"ip-address\")) {\r",
													"        applicationAddress = applicationAddress[\"ip-address\"][\"ipv-4-address\"];\r",
													"    } else {\r",
													"        applicationAddress = applicationAddress[\"domain-name\"];\r",
													"    }\r",
													"\r",
													"    applicationPort = executionAndTraceLogTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-port\"];\r",
													" \r",
													"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Environment variables could not be loaded.\");\r",
													"}\r",
													"\r",
													"/****************************************************************************************\r",
													"* Defining Request Body\r",
													"****************************************************************************************/\r",
													"var REQUEST_BODY;\r",
													"try {\r",
													"    REQUEST_BODY = \"\";\r",
													"} catch (error) {\r",
													"    console.log(\"!Could not define request body. \");\r",
													"}\r",
													"\r",
													"/****************************************************************************************\r",
													"* Setting Local Variables and Preparing the Request\r",
													"****************************************************************************************/\r",
													"try {\r",
													"    let URI;\r",
													"    URI = applicationProtocol + \"://\" + applicationAddress + \":\" + applicationPort + \"/core-model-1-4:control-construct\";\r",
													"    //URI = \"http://9d098835-4e91-48f3-9761-04a82ff2843e.mock.pstmn.io\" + \"/core-model-1-4:control-construct\";\r",
													"\r",
													"    let ACCEPT;\r",
													"    ACCEPT = \"application/json\";\r",
													"\r",
													"    let CONTENT_TYPE;\r",
													"    CONTENT_TYPE = \"application/json\";\r",
													"\r",
													"    pm.variables.clear();\r",
													"\r",
													"    pm.variables.set(\"uri\", URI);\r",
													"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
													"\r",
													"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
													"\r",
													"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
													"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Local variables could not be set.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Extracting Result\r",
													"****************************************************************************************/\r",
													"var ltpList;\r",
													"try {\r",
													"    let response;\r",
													"    response = pm.response;\r",
													"    \r",
													"    let responseCode;\r",
													"    responseCode = parseInt(response.code);\r",
													"    \r",
													"    if ( Math.floor(responseCode/100) === 2 ) {\r",
													"        let responseObject;\r",
													"        responseObject = JSON.parse(response.stream);\r",
													"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
													"\r",
													"    } else {\r",
													"        ltpList = [];\r",
													"    }\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! ltpList could not be extracted.\");\r",
													"}\r",
													"\r",
													"var listRecordsOfFlowOperationKey;\r",
													"try {\r",
													"    listRecordsOfFlowOperationKey = FindOperationKeyForOperationName(\"/v1/list-records-of-flow\", ltpList);\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(error);\r",
													"    console.log(\"! Reference objects could not be extracted.\");\r",
													"} \r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Setting Collection Variables\r",
													"****************************************************************************************/\r",
													"try {\r",
													"    pm.collectionVariables.set(\"listRecordsOfFlowOperationKey\", listRecordsOfFlowOperationKey);\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Collection variables could not be set.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													"function FindOperationKeyForOperationName(operationName, ltpList) {\r",
													"    let operationKey;\r",
													"    operationKey = \"\";\r",
													"    try {\r",
													"         let sampleUuid;\r",
													"         for ( let i=0; i<ltpList.length; i++) {\r",
													"            sampleUuid = ltpList[i][\"uuid\"];\r",
													"            if(sampleUuid.includes(\"op-s-\")){\r",
													"                let sampleOperationName;\r",
													"                sampleOperationName = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
													"                if(sampleOperationName == operationName) {\r",
													"                    operationKey = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
													"                    return operationKey; \r",
													"                }\r",
													"            }\r",
													"         }\r",
													"\r",
													"    } catch (error) {\r",
													"        console.log(\" ! Exception in function : FindOperationKeyForOperationName\")\r",
													"    }\r",
													"    return operationKey;\r",
													"}\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-mock-response-code",
												"value": "200",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{uri}}",
											"host": [
												"{{uri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "sampling /v1/bequeath-your-data-and-die",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"var APPLICATION;\r",
													"var OPERATION_KEY;\r",
													"var newApplicationName;\r",
													"var newApplicationRelease;\r",
													"var dummyApplicationProtocol;\r",
													"var dummyApplicationAddress;\r",
													"var dummyApplicationPort;\r",
													"try {\r",
													"    APPLICATION = pm.environment.get(\"application\");\r",
													"\r",
													"    let currentOperationServer;\r",
													"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
													"    \r",
													"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
													"\r",
													"    let newReleaseHttpClientLtp;\r",
													"    newReleaseHttpClientLtp = pm.collectionVariables.get(\"newReleaseHttpClientLtp\");\r",
													"\r",
													"    newApplicationName = newReleaseHttpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
													"\r",
													"    newApplicationRelease = newReleaseHttpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"release-number\"];\r",
													"\r",
													"    let newReleaseTcpClientLtp;\r",
													"    newReleaseTcpClientLtp = pm.collectionVariables.get(\"newReleaseTcpClientLtp\");\r",
													"\r",
													"    let protocol = newReleaseTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
													"    dummyApplicationProtocol = GenerateDummyRemoteProtocol(protocol);\r",
													"    dummyApplicationProtocol = dummyApplicationProtocol.substring(('tcp-client-interface-1-0:PROTOCOL_TYPE_').length);\r",
													"\r",
													"    let dummyIpv4Address = RandomIpAddress();\r",
													"    dummyApplicationAddress = {\r",
													"        \"ip-address\": {\r",
													"            \"ipv-4-address\": dummyIpv4Address\r",
													"        }\r",
													"    };\r",
													"    dummyApplicationPort = RandomTcpPort();\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(error);\r",
													"    console.log(\"! Input Data could not be loaded.\");\r",
													"}\r",
													"\r",
													"/****************************************************************************************\r",
													"* Defining Dummy Parameters\r",
													"****************************************************************************************/\r",
													"var USER_NAME;\r",
													"var ORIGINATOR;\r",
													"var X_CORRELATOR;\r",
													"var TRACE_INDICATOR;\r",
													"var CUSTOMER_JOURNEY;\r",
													"try {\r",
													"    USER_NAME = APPLICATION.userName;\r",
													"    ORIGINATOR = \"Postman\";\r",
													"    X_CORRELATOR = CreateXCorrelator();\r",
													"    TRACE_INDICATOR = \"1\";\r",
													"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
													"    \r",
													"} catch (error) {\r",
													"    console.log(\"! Could not define dummy values for parameters. \");\r",
													"}\r",
													"\r",
													"/****************************************************************************************\r",
													"* Defining Request Body\r",
													"****************************************************************************************/\r",
													"var REQUEST_BODY;\r",
													"try {\r",
													"    REQUEST_BODY = '{'\r",
													"        + '\"new-application-name\" : ' + '\"' + newApplicationName + '\",'\r",
													"        + '\"new-application-release\" : ' + '\"' + newApplicationRelease + '\",'\r",
													"        + '\"new-application-protocol\" : ' + '\"' + dummyApplicationProtocol + '\",'\r",
													"        + '\"new-application-address\" : ' + JSON.stringify(dummyApplicationAddress) + ','\r",
													"        + '\"new-application-port\" : ' + dummyApplicationPort\r",
													"    +'}';\r",
													"} catch (error) {\r",
													"    console.log(\"!Could not define request body. \");\r",
													"}\r",
													"\r",
													"/****************************************************************************************\r",
													"* Setting Collection Variables\r",
													"****************************************************************************************/\r",
													"try {\r",
													"    pm.collectionVariables.set(\"user\", USER_NAME);\r",
													"    pm.collectionVariables.set(\"originator\", ORIGINATOR);\r",
													"    pm.collectionVariables.set(\"xCorrelator\", X_CORRELATOR);\r",
													"    pm.collectionVariables.set(\"traceIndicator\", TRACE_INDICATOR);\r",
													"    pm.collectionVariables.set(\"customerJourney\", CUSTOMER_JOURNEY);\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Collection variables could not be set.\");\r",
													"}\r",
													"\r",
													"/****************************************************************************************\r",
													"* Setting Local Variables and Preparing the Request\r",
													"****************************************************************************************/\r",
													"try {\r",
													"    let URI;\r",
													"    URI = APPLICATION.serverUrl + \"/v1/bequeath-your-data-and-die\";\r",
													"\r",
													"    let ACCEPT;\r",
													"    ACCEPT = \"application/json\";\r",
													"\r",
													"    let CONTENT_TYPE;\r",
													"    CONTENT_TYPE = \"application/json\";\r",
													"\r",
													"    pm.variables.clear();\r",
													"\r",
													"    pm.variables.set(\"uri\", URI);\r",
													"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
													"\r",
													"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
													"\r",
													"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
													"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
													"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
													"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
													"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
													"\r",
													"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
													"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(error);\r",
													"    console.log(\"! Local variables could not be set.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													"\r",
													"function CreateXCorrelator() {\r",
													"    let xCorrelator;\r",
													"    xCorrelator = \"\";\r",
													"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
													"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
													"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
													"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
													"    xCorrelator += GenerateRandomHexString(12);\r",
													"    return xCorrelator;\r",
													"}\r",
													"\r",
													"function GenerateRandomHexString(length) {\r",
													"    var randomRandomHexString = \"\";\r",
													"    while (randomRandomHexString.length < length) {\r",
													"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
													"    }\r",
													"    return randomRandomHexString.substring(0,length);\r",
													"}\r",
													"\r",
													"function RandomIpAddress() {\r",
													"    let randomAddress\r",
													"    let addressParts = [];\r",
													"    for ( let i=0; i<4; i++ ) {\r",
													"        addressParts[i] = String(Math.floor(Math.random() * 256));\r",
													"    }\r",
													"    randomAddress = addressParts[0] + \".\" + addressParts[1] + \".\" + addressParts[2] + \".\" + addressParts[3];\r",
													"    return randomAddress;\r",
													"}\r",
													"\r",
													"function RandomTcpPort() {\r",
													"    let randomPort;\r",
													"    randomPort = 2000 + Math.floor( Math.random() * 1000 );\r",
													"    return randomPort;\r",
													"}\r",
													"\r",
													"function GenerateDummyRemoteProtocol(currentProtocol) {\r",
													"    let alternativeProtocolList;\r",
													"    alternativeProtocolList = [  \"tcp-client-interface-1-0:PROTOCOL_TYPE_HTTP\",\r",
													"                                    \"tcp-client-interface-1-0:PROTOCOL_TYPE_HTTPS\"\r",
													"                                ];\r",
													"    let indexOfCurrentProtocol;\r",
													"    indexOfCurrentProtocol = alternativeProtocolList.indexOf(currentProtocol);\r",
													"    if (indexOfCurrentProtocol > -1) {\r",
													"        alternativeProtocolList.splice(indexOfCurrentProtocol, 1);\r",
													"    }\r",
													"\r",
													"    let alternativeProtocol;\r",
													"    let alternativeProtocolIndex;\r",
													"    alternativeProtocolIndex = Math.floor(Math.random() * alternativeProtocolList.length);\r",
													"    alternativeProtocol = alternativeProtocolList[alternativeProtocolIndex]; \r",
													"\r",
													"    return alternativeProtocol;\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-mock-response-code",
												"value": "204",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{uri}}",
											"host": [
												"{{uri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Expected ExecutionAndTraceLog/v1/list-records-of-flow",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"var APPLICATION;\r",
													"var OPERATION_KEY;\r",
													"var applicationProtocol;\r",
													"var applicationAddress;\r",
													"var applicationPort;\r",
													"var xCorrelatorUnderTest;\r",
													"var latestMatch;\r",
													"var numberOfRecords;\r",
													"try {\r",
													"    APPLICATION = pm.environment.get(\"application\");\r",
													"\r",
													"    let executionAndTraceLogTcpClientLtp;\r",
													"    executionAndTraceLogTcpClientLtp = pm.collectionVariables.get(\"executionAndTraceLogTcpClientLtp\");\r",
													"    \r",
													"    applicationProtocol = executionAndTraceLogTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
													"    applicationProtocol = applicationProtocol.substring(('tcp-client-interface-1-0:PROTOCOL_TYPE_').length);\r",
													"    applicationAddress = executionAndTraceLogTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-address\"];\r",
													"    if(applicationAddress.hasOwnProperty(\"ip-address\")) {\r",
													"        applicationAddress = applicationAddress[\"ip-address\"][\"ipv-4-address\"];\r",
													"    } else {\r",
													"        applicationAddress = applicationAddress[\"domain-name\"];\r",
													"    }\r",
													"    applicationPort = executionAndTraceLogTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-port\"];\r",
													"\r",
													"    OPERATION_KEY = pm.collectionVariables.get(\"listRecordsOfFlowOperationKey\");\r",
													"    xCorrelatorUnderTest = pm.collectionVariables.get(\"xCorrelator\");\r",
													"    latestMatch = 0;\r",
													"    numberOfRecords = 100;\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(error)\r",
													"    console.log(\"! Input Data could not be loaded.\");\r",
													"}\r",
													"\r",
													"/****************************************************************************************\r",
													"* Defining Dummy Parameters\r",
													"****************************************************************************************/\r",
													"var USER_NAME;\r",
													"var ORIGINATOR;\r",
													"var X_CORRELATOR;\r",
													"var TRACE_INDICATOR;\r",
													"var CUSTOMER_JOURNEY;\r",
													"try {\r",
													"    USER_NAME = APPLICATION.userName;\r",
													"    ORIGINATOR = \"Postman\";\r",
													"    X_CORRELATOR = CreateXCorrelator();\r",
													"    TRACE_INDICATOR = \"1\";\r",
													"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
													"    \r",
													"} catch (error) {\r",
													"    console.log(\"! Could not define dummy values for parameters. \");\r",
													"}\r",
													"\r",
													"/****************************************************************************************\r",
													"* Defining Request Body\r",
													"****************************************************************************************/\r",
													"var REQUEST_BODY;\r",
													"try {\r",
													"    REQUEST_BODY = '{'\r",
													"                + '\"x-correlator\": \"' + xCorrelatorUnderTest +'\",'\r",
													"                + '\"latest-match\": ' + latestMatch + ','\r",
													"                + '\"number-of-records\":' + numberOfRecords\r",
													"                + '}';\r",
													"} catch (error) {\r",
													"    console.log(\"!Could not define request body. \");\r",
													"}\r",
													"\r",
													"/****************************************************************************************\r",
													"* Setting Collection Variables\r",
													"****************************************************************************************/\r",
													"/****************************************************************************************\r",
													"* Setting delay\r",
													"****************************************************************************************/\r",
													"setTimeout(function(){\r",
													"\r",
													"}, 3000);\r",
													"/****************************************************************************************\r",
													"* Setting Local Variables and Preparing the Request\r",
													"****************************************************************************************/\r",
													"try {\r",
													"    let URI;\r",
													"    URI = applicationProtocol + \"://\" + applicationAddress + \":\" + applicationPort + \"/v1/list-records-of-flow\";\r",
													"    //URI = \"http://9d098835-4e91-48f3-9761-04a82ff2843e.mock.pstmn.io/v1/list-records-of-flow\";\r",
													"\r",
													"    let ACCEPT;\r",
													"    ACCEPT = \"application/json\";\r",
													"\r",
													"    let CONTENT_TYPE;\r",
													"    CONTENT_TYPE = \"application/json\";\r",
													"\r",
													"    pm.variables.clear();\r",
													"\r",
													"    pm.variables.set(\"uri\", URI);\r",
													"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
													"\r",
													"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
													"\r",
													"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
													"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
													"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
													"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
													"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
													"\r",
													"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
													"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(error);\r",
													"    console.log(\"! Local variables could not be set.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													"function CreateXCorrelator() {\r",
													"    let xCorrelator;\r",
													"    xCorrelator = \"\";\r",
													"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
													"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
													"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
													"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
													"    xCorrelator += GenerateRandomHexString(12);\r",
													"    return xCorrelator;\r",
													"}\r",
													"\r",
													"function GenerateRandomHexString(length) {\r",
													"    var randomRandomHexString = \"\";\r",
													"    while (randomRandomHexString.length < length) {\r",
													"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
													"    }\r",
													"    return randomRandomHexString.substring(0, length);\r",
													"}\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"var expectedXCorrelator;\r",
													"var expectedUser;\r",
													"var expectedOriginator;\r",
													"var expectedTraceIndicator;\r",
													"var expectedApplicationName;\r",
													"var expectedReleaseNumber;\r",
													"var expectedOperationName;\r",
													"try {\r",
													"    expectedXCorrelator = pm.collectionVariables.get(\"xCorrelator\");\r",
													"    expectedUser = pm.collectionVariables.get(\"user\");\r",
													"    expectedOriginator = pm.collectionVariables.get(\"originator\");\r",
													"    expectedTraceIndicator = pm.collectionVariables.get(\"traceIndicator\");\r",
													"\r",
													"    let expectedHttpServerLtp;\r",
													"    expectedHttpServerLtp = pm.collectionVariables.get(\"httpServerLtp\");\r",
													"    expectedApplicationName = expectedHttpServerLtp[\"layer-protocol\"][0][\"http-server-interface-1-0:http-server-interface-pac\"][\"http-server-interface-capability\"][\"application-name\"];\r",
													"    expectedReleaseNumber = expectedHttpServerLtp[\"layer-protocol\"][0][\"http-server-interface-1-0:http-server-interface-pac\"][\"http-server-interface-capability\"][\"release-number\"];\r",
													"    \r",
													"    /*\r",
													"    let expectedNewReleaseHttpClientLtp;\r",
													"    expectedNewReleaseHttpClientLtp = pm.collectionVariables.get(\"newReleaseHttpClientLtp\");\r",
													"\r",
													"    expectedApplicationName = expectedNewReleaseHttpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
													"\r",
													"    expectedReleaseNumber = expectedNewReleaseHttpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"release-number\"];\r",
													"    */\r",
													"    let expectedOperationServer;\r",
													"    expectedOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
													"    expectedOperationName = expectedOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Could not load Input Data. \");\r",
													"}\r",
													"\r",
													"/****************************************************************************************\r",
													"* Extracting Result\r",
													"****************************************************************************************/\r",
													"var RESPONSE_CODE;\r",
													"var serviceRecordList;\r",
													"try {\r",
													"    let response;\r",
													"    response = pm.response;\r",
													"    \r",
													"    RESPONSE_CODE = parseInt(response.code);\r",
													"\r",
													"    if(Math.floor(RESPONSE_CODE/100) === 2) {\r",
													"        serviceRecordList = JSON.parse(response.stream);\r",
													"    }\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Response Code could not be extracted.\");\r",
													"}    \r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Testing\r",
													"****************************************************************************************/\r",
													"try {\r",
													"    pm.test(\"POST ExecutionAndTraceLog/v1/list-records-of-flow responds 200\", function () {\r",
													"        pm.expect(RESPONSE_CODE).to.equal(200);\r",
													"    });\r",
													"\r",
													"    let foundAnEntryWithTheExpectedHeaderValuesInEatl;\r",
													"    foundAnEntryWithTheExpectedHeaderValuesInEatl = false;\r",
													"    let responseCodeofTriggeredForwarding;\r",
													"    responseCodeofTriggeredForwarding = 0;\r",
													"    for(let i=0; i<serviceRecordList.length; i++)  {\r",
													"        \r",
													"        if( serviceRecordList[i][\"application-name\"] == expectedApplicationName\r",
													"                && serviceRecordList[i][\"release-number\"] == expectedReleaseNumber\r",
													"                && serviceRecordList[i][\"operation-name\"] == expectedOperationName\r",
													"                && serviceRecordList[i][\"x-correlator\"] == expectedXCorrelator\r",
													"                && serviceRecordList[i][\"user\"] == expectedUser\r",
													"                && serviceRecordList[i][\"originator\"] == expectedOriginator\r",
													"                && serviceRecordList[i][\"trace-indicator\"].includes(expectedTraceIndicator) ) {\r",
													"\r",
													"            foundAnEntryWithTheExpectedHeaderValuesInEatl = true;\r",
													"            responseCodeofTriggeredForwarding =  serviceRecordList[i][\"response-code\"];\r",
													"            break;\r",
													"        }\r",
													"    }\r",
													"\r",
													"    if(foundAnEntryWithTheExpectedHeaderValuesInEatl) {\r",
													"        pm.test(\"The request has been notified and the Parameter values have been processed with response-code 204\", function () {\r",
													"            pm.expect(responseCodeofTriggeredForwarding).to.equal(204);        \r",
													"        });\r",
													"    } else {\r",
													"        pm.test(\"The request has been notified and the Parameter values have been processed\", function () {\r",
													"            pm.expect(foundAnEntryWithTheExpectedHeaderValuesInEatl).to.be.true;        \r",
													"        });\r",
													"    }\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(error);\r",
													"    console.log(\"! Testing could not be executed.\");\r",
													"}\r",
													"\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-mock-response-code",
												"value": "200",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{uri}}",
											"host": [
												"{{uri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "initial newRelease/remote-protocol",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"var APPLICATION;\r",
													"var newReleaseTcpClientUuid;\r",
													"var initialReleaseRemoteProtocol;\r",
													"try {\r",
													"    APPLICATION = pm.environment.get(\"application\");\r",
													"    \r",
													"    let newReleaseTcpClientLtp;\r",
													"    newReleaseTcpClientLtp = pm.collectionVariables.get(\"newReleaseTcpClientLtp\");\r",
													"\r",
													"    newReleaseTcpClientUuid = newReleaseTcpClientLtp[\"uuid\"];\r",
													"\r",
													"    initialReleaseRemoteProtocol = newReleaseTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Variables could not be loaded.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Setting Local Variables and Preparing the Request\r",
													"****************************************************************************************/\r",
													"try {\r",
													"    let URI;\r",
													"    URI = APPLICATION.serverUrl \r",
													"            + \"/core-model-1-4:control-construct/logical-termination-point=\" \r",
													"            + newReleaseTcpClientUuid\r",
													"            + \"/layer-protocol=0/tcp-client-interface-1-0:tcp-client-interface-pac/tcp-client-interface-configuration/remote-protocol\";\r",
													"\r",
													"    let REQUEST_BODY;\r",
													"    REQUEST_BODY = '{ '\r",
													"                    +   '\"tcp-client-interface-1-0:remote-protocol\": \"' + initialReleaseRemoteProtocol + '\"'\r",
													"                    + ' }';\r",
													"\r",
													"    let AUTHORIZATION;\r",
													"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
													"\r",
													"    let ACCEPT;\r",
													"    ACCEPT = \"application/json\";\r",
													"\r",
													"    let CONTENT_TYPE;\r",
													"    CONTENT_TYPE = \"application/json\";\r",
													"\r",
													"\r",
													"    pm.variables.clear();\r",
													"\r",
													"    pm.variables.set(\"uri\", URI);\r",
													"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
													"\r",
													"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
													"\r",
													"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
													"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(error)\r",
													"    console.log(\"! Local variables could not be set.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-mock-response-code",
												"value": "204",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{uri}}",
											"host": [
												"{{uri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "initial newRelease/remote-address",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"var APPLICATION;\r",
													"var newReleaseTcpClientUuid;\r",
													"var initialReleaseRemoteAddress;\r",
													"try {\r",
													"    APPLICATION = pm.environment.get(\"application\");\r",
													"    \r",
													"    let newReleaseTcpClientLtp;\r",
													"    newReleaseTcpClientLtp = pm.collectionVariables.get(\"newReleaseTcpClientLtp\");\r",
													"\r",
													"    newReleaseTcpClientUuid = newReleaseTcpClientLtp[\"uuid\"];\r",
													"\r",
													"    initialReleaseRemoteAddress = newReleaseTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-address\"];\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Variables could not be loaded.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Setting Local Variables and Preparing the Request\r",
													"****************************************************************************************/\r",
													"try {\r",
													"    let URI;\r",
													"    URI = APPLICATION.serverUrl \r",
													"            + \"/core-model-1-4:control-construct/logical-termination-point=\"\r",
													"            + newReleaseTcpClientUuid\r",
													"            + \"/layer-protocol=0/tcp-client-interface-1-0:tcp-client-interface-pac/tcp-client-interface-configuration/remote-address\";\r",
													"\r",
													"    let REQUEST_BODY;\r",
													"    REQUEST_BODY = '{ '\r",
													"                    +   '\"tcp-client-interface-1-0:remote-address\": ' + JSON.stringify(initialReleaseRemoteAddress)\r",
													"                    + ' }';\r",
													"\r",
													"    let AUTHORIZATION;\r",
													"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
													"\r",
													"    let ACCEPT;\r",
													"    ACCEPT = \"application/json\";\r",
													"\r",
													"    let CONTENT_TYPE;\r",
													"    CONTENT_TYPE = \"application/json\";\r",
													"\r",
													"    pm.variables.clear();\r",
													"\r",
													"    pm.variables.set(\"uri\", URI);\r",
													"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
													"\r",
													"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
													"\r",
													"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
													"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(error)\r",
													"    console.log(\"! Local variables could not be set.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-mock-response-code",
												"value": "204",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{uri}}",
											"host": [
												"{{uri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "initial newRelease/remote-port",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"var APPLICATION;\r",
													"var newReleaseTcpClientUuid;\r",
													"var initialReleaseRemotePort;\r",
													"try {\r",
													"    APPLICATION = pm.environment.get(\"application\");\r",
													"    \r",
													"    let newReleaseTcpClientLtp;\r",
													"    newReleaseTcpClientLtp = pm.collectionVariables.get(\"newReleaseTcpClientLtp\");\r",
													"\r",
													"    newReleaseTcpClientUuid = newReleaseTcpClientLtp[\"uuid\"];\r",
													"\r",
													"    initialReleaseRemotePort = newReleaseTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-port\"];\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Variables could not be loaded.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Setting Local Variables and Preparing the Request\r",
													"****************************************************************************************/\r",
													"try {\r",
													"    let URI;\r",
													"    URI = APPLICATION.serverUrl \r",
													"            + \"/core-model-1-4:control-construct/logical-termination-point=\" \r",
													"            + newReleaseTcpClientUuid\r",
													"            + \"/layer-protocol=0/tcp-client-interface-1-0:tcp-client-interface-pac/tcp-client-interface-configuration/remote-port\";\r",
													"\r",
													"    let REQUEST_BODY;\r",
													"    REQUEST_BODY = '{ '\r",
													"                    +   '\"tcp-client-interface-1-0:remote-port\": ' + initialReleaseRemotePort\r",
													"                    + ' }';\r",
													"\r",
													"    let AUTHORIZATION;\r",
													"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
													"\r",
													"    let ACCEPT;\r",
													"    ACCEPT = \"application/json\";\r",
													"\r",
													"    let CONTENT_TYPE;\r",
													"    CONTENT_TYPE = \"application/json\";\r",
													"\r",
													"\r",
													"    pm.variables.clear();\r",
													"\r",
													"    pm.variables.set(\"uri\", URI);\r",
													"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
													"\r",
													"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
													"\r",
													"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
													"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(error)\r",
													"    console.log(\"! Local variables could not be set.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-mock-response-code",
												"value": "204",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{uri}}",
											"host": [
												"{{uri}}"
											]
										}
									},
									"response": []
								}
							],
							"description": "## Gets the service consumption indicated to EaTL and the Parameters of the request processed?\n\n#### Requires:\n- ExecutionAndTraceLog server to operate\n\n#### Preparation:\n- GETing CC (/core-model-1-4:control-construct)\n  - search CC for output fc-port of ServiceRequestCausesLoggingRequest, \nits corresponding op-c, http-c and tcp-c, storing them for later verification request.\n  - searching CC for op-s of /v1/bequeath-your-data-and-die, storing operation-key\n  - searcing CC for output port of PromptForBequeathingDataCausesTransferOfListOfApplications, find corresponding op-c, http-c and tcp-c, store them\n- GETting EaTL/CC (while using IP, protocol and port from above)\n  - searching CC for op-c of /v1/list-records-of-flow, storing operation-key\n- POST /v1/bequeath-your-data-and-die with\n  - new-application-name and new-application-release according to chosen http-c\n  - new-application-protocol, new-application-address and new-application-port with random generated dummy values (assure sufficiently high probability that set does not exist!) \n  - operation-key from above\n  - all parameters with realistic values (incl. DummyXCorrelator))\n\n#### Testing:\n- POST ExecutionAndTraceLog/v1/list-records-of-flow with \n   - IP, protocol and port from above\n   - operation-key from above\n   - DummyValue of x-correlator\n   - checking response for entry with application-name==OamLog and operation-name==/v1/bequeath-your-data-and-die\n   - checking same record for containing DummyXCorrelator &DummyTraceIndicator\n\n#### Clearing:\n- PUT NewRelease/remote-protocol with original value\n- PUT NewRelease/remote-address with original value\n- PUT NewRelease/remote-port with original value"
						}
					]
				},
				{
					"name": "Gate",
					"item": [
						{
							"name": "for gating /v1/bequeath-your-data-and-die to acceptance testing",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"/****************************************************************************************\r",
											"* Loading Input Data\r",
											"****************************************************************************************/\r",
											"var TYPE_OF_TESTING;\r",
											"var URI;\r",
											"try {\r",
											"    TYPE_OF_TESTING = pm.environment.get(\"typeOfTesting\");\r",
											"    URI = pm.environment.get(\"dummyUri\");\r",
											"\r",
											"} catch (error) {\r",
											"    console.log(\"! Loading Input Data failed.\");\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Updating Environmental Variables and Determining the next Step\r",
											"****************************************************************************************/\r",
											"try {\r",
											"    if ( TYPE_OF_TESTING === \"Acceptance\" ) {\r",
											"        postman.setNextRequest();\r",
											"    } else {\r",
											"        postman.setNextRequest(\"for exiting /v1/bequeath-your-data-and-die\");\r",
											"    }\r",
											"\r",
											"} catch (error) {\r",
											"    console.log(\"! Updating Environmental Variables and Determining the next Step failed.\");\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Setting Local Variables and Preparing the Request\r",
											"****************************************************************************************/\r",
											"try {\r",
											"    pm.variables.clear();\r",
											"\r",
											"    let REQUEST_BODY;\r",
											"    REQUEST_BODY = \"\";\r",
											"\r",
											"    let AUTHORIZATION;\r",
											"    AUTHORIZATION = \"\";\r",
											"\r",
											"    let OPERATION_KEY;\r",
											"    OPERATION_KEY = \"\";\r",
											"\r",
											"    pm.variables.set(\"uri\", URI);\r",
											"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
											"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
											"    pm.request.headers.upsert({key:\"operationKey\", value:OPERATION_KEY});\r",
											"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});\r",
											"    pm.request.headers.upsert({key:\"Content-Type\", value:\"application/json\"});\r",
											"\r",
											"} catch (error) {\r",
											"    console.log(\"! Setting Local Variables and Preparing the Request failed.\");\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Functions\r",
											"****************************************************************************************/\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{uri}}",
									"host": [
										"{{uri}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Acceptance",
					"item": [
						{
							"name": "life-cycle-state propogated?",
							"item": [
								{
									"name": "reference /core-model-1-4:control-construct",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"console.log(\"\\n----- /v1/bequeath-your-data-and-die acceptance -- life-cycle-state propogated? -------------------------------\");\r",
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"var APPLICATION;\r",
													"try {\r",
													"    APPLICATION = pm.environment.get(\"application\");\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Environment variables could not be loaded.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Setting Local Variables and Preparing the Request\r",
													"****************************************************************************************/\r",
													"try {\r",
													"    let URI;\r",
													"    URI = APPLICATION.serverUrl + \"/core-model-1-4:control-construct\";\r",
													"\r",
													"    let REQUEST_BODY;\r",
													"    REQUEST_BODY = \"\";\r",
													"\r",
													"    let AUTHORIZATION;\r",
													"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
													"\r",
													"    let ACCEPT;\r",
													"    ACCEPT = \"application/json\";\r",
													"\r",
													"    let CONTENT_TYPE;\r",
													"    CONTENT_TYPE = \"application/json\";\r",
													"\r",
													"\r",
													"    pm.variables.clear();\r",
													"\r",
													"    pm.variables.set(\"uri\", URI);\r",
													"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
													"\r",
													"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
													"\r",
													"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
													"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Local variables could not be set.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Extracting Result\r",
													"****************************************************************************************/\r",
													"var ltpList;\r",
													"var fcList;\r",
													"try {\r",
													"    let response;\r",
													"    response = pm.response;\r",
													"    \r",
													"    let responseCode;\r",
													"    responseCode = parseInt(response.code);\r",
													"    \r",
													"    if ( Math.floor(responseCode/100) === 2 ) {\r",
													"        let responseObject;\r",
													"        responseObject = JSON.parse(response.stream);\r",
													"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
													"        fcList = responseObject[\"core-model-1-4:control-construct\"][\"forwarding-domain\"][0][\"forwarding-construct\"];\r",
													"\r",
													"    } else {\r",
													"        ltpList = [];\r",
													"        fcList = [];\r",
													"    }\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! ltpList could not be extracted.\");\r",
													"}\r",
													"\r",
													"var currentOperationServer;\r",
													"var newReleaseHttpClientLtp;\r",
													"var newReleaseTcpClientLtp;\r",
													"try {\r",
													"    currentOperationServer = FindOperationServer(\"/v1/bequeath-your-data-and-die\", ltpList);\r",
													"\r",
													"    //Bequeath Transfer Of List Of Applications\r",
													"    let bequeathingDataCausesTransferOfListOfApplicationsOperationClientLtp = FindOperationClientUsingCallback(\"PromptForBequeathingDataCausesTransferOfListOfApplications\", fcList, ltpList)\r",
													"\r",
													"    newReleaseHttpClientLtp = FindServingLtp(bequeathingDataCausesTransferOfListOfApplicationsOperationClientLtp, ltpList);\r",
													"    newReleaseTcpClientLtp = FindServingLtp(newReleaseHttpClientLtp, ltpList); \r",
													"} catch (error) {\r",
													"    console.log(error);\r",
													"    console.log(\"! Reference objects could not be extracted.\");\r",
													"} \r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Setting Collection Variables\r",
													"****************************************************************************************/\r",
													"try {\r",
													"    pm.collectionVariables.clear();\r",
													"    \r",
													"    pm.collectionVariables.set(\"currentOperationServer\", currentOperationServer);\r",
													"    pm.collectionVariables.set(\"newReleaseHttpClientLtp\", newReleaseHttpClientLtp);\r",
													"    pm.collectionVariables.set(\"newReleaseTcpClientLtp\", newReleaseTcpClientLtp);\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Collection variables could not be set.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													"\r",
													"function FindOperationServer(operationName, ltpList) {\r",
													"    let operationServer;\r",
													"    operationServer = \"\";\r",
													"    try {\r",
													"        let sampleUuid;\r",
													"        for(let i=0; i<ltpList.length; i++) {\r",
													"            sampleUuid = ltpList[i][\"uuid\"];\r",
													"            if(sampleUuid.includes(\"op-s-\")) {\r",
													"                let sampleOperationName;\r",
													"                sampleOperationName = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
													"                if(sampleOperationName == operationName) {\r",
													"                    operationServer = ltpList[i];\r",
													"                    return operationServer;\r",
													"                }\r",
													"            }\r",
													"        }\r",
													"    } catch (error) {\r",
													"        console.log(\"! Exception in function : FindOperationServer. \");\r",
													"    }\r",
													"    return operationServer;\r",
													"}\r",
													"\r",
													"function FindOutputFcPortList(forwardingName, fcList) {\r",
													"    let outputFcPortList;\r",
													"    outputFcPortList = [];\r",
													"    try {\r",
													"        for( let i=0; i<fcList.length; i++ ) {\r",
													"            for(let j=0; j<fcList[i][\"name\"].length; j++) {               \r",
													"                if(fcList[i][\"name\"][j][\"value\"] == forwardingName) {\r",
													"                    fcPortList = fcList[i][\"fc-port\"];\r",
													"                    for(let k=0;k<fcPortList.length;k++) {\r",
													"                        if(fcPortList[k][\"port-direction\"] == \"core-model-1-4:PORT_DIRECTION_TYPE_OUTPUT\") {\r",
													"                            outputFcPortList.push(fcPortList[k]);\r",
													"                        }\r",
													"                    }\r",
													"                    return outputFcPortList;\r",
													"                }\r",
													"            }\r",
													"        }\r",
													"    } catch (error) {\r",
													"        console.log(\"! Exception in function FindOutputFcPortList. \");\r",
													"    }\r",
													"    return outputFcPortList;\r",
													"}\r",
													"\r",
													"function FindActualInstanceByUuid(expectedUuid, actualLtpList) {\r",
													"    let actualInstance;\r",
													"    actualInstance = {};\r",
													"    try {\r",
													"        for ( let i=0; i<actualLtpList.length; i++ ) {\r",
													"            let sampleUuid;\r",
													"            sampleUuid = actualLtpList[i][\"uuid\"];\r",
													"            if( sampleUuid == expectedUuid ) {\r",
													"                actualInstance = actualLtpList[i];\r",
													"                return actualInstance;\r",
													"            }\r",
													"        }\r",
													"\r",
													"    } catch (error) {\r",
													"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
													"    }\r",
													"    return undefined;\r",
													"}\r",
													"\r",
													"function FindServingLtp(clientLtp, ltpList) {\r",
													"    let servingLtp;\r",
													"    servingLtp = {};\r",
													"    try{\r",
													"        let serverLtpUuid;\r",
													"        serverLtpUuid = clientLtp[\"server-ltp\"][0];\r",
													"        for( let i=0; i<ltpList.length; i++ ) {\r",
													"            let sampleUuid;\r",
													"            sampleUuid = ltpList[i][\"uuid\"];\r",
													"            if( sampleUuid == serverLtpUuid ) {\r",
													"                servingLtp = ltpList[i];\r",
													"                return servingLtp;\r",
													"            }\r",
													"        }\r",
													"    } catch(error) {\r",
													"        console.log(error);\r",
													"        console.log(\"! Exception in function : FindServingLtp. \")\r",
													"    }\r",
													"    return servingLtp;\r",
													"}\r",
													"\r",
													"function FindOperationClientUsingCallback(callback, fcList, ltpList) {\r",
													"    let operationClientLtp\r",
													"    try {\r",
													"        let outputFcPortList = FindOutputFcPortList(callback, fcList);\r",
													"        let randomOutputFcPort = outputFcPortList[Math.floor(Math.random() * outputFcPortList.length)];\r",
													"        let outputLtpUuid = randomOutputFcPort[\"logical-termination-point\"];\r",
													"        operationClientLtp = FindActualInstanceByUuid(outputLtpUuid, ltpList);\r",
													"    } catch (error) {\r",
													"        console.log(error);\r",
													"        console.log(\"! Exception in function FindOperationClientUsingCallback. \");\r",
													"    }\r",
													"    return  operationClientLtp\r",
													"}\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "x-mock-response-code",
												"value": "200",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{uri}}",
											"host": [
												"{{uri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "dummy life-cycle-state",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"var APPLICATION;\r",
													"var operationServerUuid;\r",
													"var dummyLifeCycleState;\r",
													"try {\r",
													"    APPLICATION = pm.environment.get(\"application\");\r",
													"    \r",
													"    let currentOperationServer;\r",
													"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
													"\r",
													"    operationServerUuid = currentOperationServer[\"uuid\"];\r",
													"\r",
													"    currentLifeCycleState = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"life-cycle-state\"];\r",
													"\r",
													"    dummyLifeCycleState = GenerateDummyLifeCycleState(currentLifeCycleState);\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Variables could not be loaded.\");\r",
													"}\r",
													"\r",
													"/****************************************************************************************\r",
													"* Setting Collection Variables\r",
													"****************************************************************************************/\r",
													"try {\r",
													"    pm.collectionVariables.set(\"dummyLifeCycleState\", dummyLifeCycleState);\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Collection variables could not be set.\");\r",
													"}\r",
													"\r",
													"/****************************************************************************************\r",
													"* Setting Local Variables and Preparing the Request\r",
													"****************************************************************************************/\r",
													"try {\r",
													"    let URI;\r",
													"    URI = APPLICATION.serverUrl \r",
													"            + \"/core-model-1-4:control-construct/logical-termination-point=\"\r",
													"            + operationServerUuid\r",
													"            + \"/layer-protocol=0/operation-server-interface-1-0:operation-server-interface-pac/operation-server-interface-configuration/life-cycle-state\";\r",
													"\r",
													"    let REQUEST_BODY;\r",
													"    REQUEST_BODY = '{ '\r",
													"                    +   '\"operation-server-interface-1-0:life-cycle-state\": \"' + dummyLifeCycleState + '\"'\r",
													"                    + ' }';\r",
													"\r",
													"    let AUTHORIZATION;\r",
													"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
													"\r",
													"    let ACCEPT;\r",
													"    ACCEPT = \"application/json\";\r",
													"\r",
													"    let CONTENT_TYPE;\r",
													"    CONTENT_TYPE = \"application/json\";\r",
													"\r",
													"\r",
													"    pm.variables.clear();\r",
													"\r",
													"    pm.variables.set(\"uri\", URI);\r",
													"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
													"\r",
													"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
													"\r",
													"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
													"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(error)\r",
													"    console.log(\"! Local variables could not be set.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													"function GenerateDummyLifeCycleState(currentLifeCycleState) {\r",
													"    let alternativeLifeCycleStateTypeList;\r",
													"    alternativeLifeCycleStateTypeList = [  \"operation-server-interface-1-0:LIFE_CYCLE_STATE_TYPE_EXPERIMENTAL\",\r",
													"                                            \"operation-server-interface-1-0:LIFE_CYCLE_STATE_TYPE_OPERATIONAL\",\r",
													"                                            \"operation-server-interface-1-0:LIFE_CYCLE_STATE_TYPE_DEPRECATED\", \r",
													"                                            \"operation-server-interface-1-0:LIFE_CYCLE_STATE_TYPE_OBSOLETE\",\r",
													"                                            \"operation-server-interface-1-0:LIFE_CYCLE_STATE_TYPE_UNKNOWN\",\r",
													"                                            \"operation-server-interface-1-0:LIFE_CYCLE_STATE_TYPE_NOT_YET_DEFINED\"\r",
													"                                        ];\r",
													"    let indexOfCurrentLifeCycleState;\r",
													"    indexOfCurrentLifeCycleState = alternativeLifeCycleStateTypeList.indexOf(currentLifeCycleState);\r",
													"    if (indexOfCurrentLifeCycleState > -1) {\r",
													"        alternativeLifeCycleStateTypeList.splice(indexOfCurrentLifeCycleState, 1);\r",
													"    }\r",
													"\r",
													"    let alternativeLifeCycleState;\r",
													"    let alternativeLifeCycleStateTypeIndex;\r",
													"    alternativeLifeCycleStateTypeIndex = Math.floor(Math.random() * alternativeLifeCycleStateTypeList.length);\r",
													"    alternativeLifeCycleState = alternativeLifeCycleStateTypeList[alternativeLifeCycleStateTypeIndex]; \r",
													"\r",
													"    return alternativeLifeCycleState;\r",
													"}\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"\r",
													"/****************************************************************************************\r",
													"* Extracting Result\r",
													"****************************************************************************************/\r",
													"var RESPONSE_CODE;\r",
													"try {\r",
													"    let response;\r",
													"    response = pm.response;\r",
													"    \r",
													"    RESPONSE_CODE = parseInt(response.code);\r",
													"    \r",
													"} catch (error) {\r",
													"    console.log(\"! Response Code could not be extracted.\");\r",
													"}    \r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Testing\r",
													"****************************************************************************************/\r",
													"try {\r",
													"    pm.test(\"PUT dummy life-cycle-state responds 204\", function () {\r",
													"        pm.expect(RESPONSE_CODE).to.equal(204);\r",
													"    });\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Testing could not be executed.\");\r",
													"}\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-mock-response-code",
												"value": "204",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{uri}}",
											"host": [
												"{{uri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Expected /v1/bequeath-your-data-and-die",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"var APPLICATION;\r",
													"var OPERATION_KEY;\r",
													"var newApplicationName;\r",
													"var newApplicationRelease;\r",
													"var dummyApplicationProtocol;\r",
													"var dummyApplicationAddress;\r",
													"var dummyApplicationPort;\r",
													"try {\r",
													"    APPLICATION = pm.environment.get(\"application\");\r",
													"\r",
													"    let currentOperationServer;\r",
													"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
													"    \r",
													"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
													"\r",
													"    let newReleaseHttpClientLtp;\r",
													"    newReleaseHttpClientLtp = pm.collectionVariables.get(\"newReleaseHttpClientLtp\");\r",
													"\r",
													"    newApplicationName = newReleaseHttpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
													"\r",
													"    newApplicationRelease = newReleaseHttpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"release-number\"];\r",
													"\r",
													"    let newReleaseTcpClientLtp;\r",
													"    newReleaseTcpClientLtp = pm.collectionVariables.get(\"newReleaseTcpClientLtp\");\r",
													"\r",
													"    let protocol = newReleaseTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
													"    dummyApplicationProtocol = GenerateDummyRemoteProtocol(protocol);\r",
													"    dummyApplicationProtocol = dummyApplicationProtocol.substring(('tcp-client-interface-1-0:PROTOCOL_TYPE_').length);\r",
													"\r",
													"    let dummyIpv4Address = RandomIpAddress();\r",
													"    dummyApplicationAddress = {\r",
													"        \"ip-address\": {\r",
													"            \"ipv-4-address\": dummyIpv4Address\r",
													"        }\r",
													"    };\r",
													"    dummyApplicationPort = RandomTcpPort();\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(error);\r",
													"    console.log(\"! Input Data could not be loaded.\");\r",
													"}\r",
													"\r",
													"/****************************************************************************************\r",
													"* Defining Dummy Parameters\r",
													"****************************************************************************************/\r",
													"var USER_NAME;\r",
													"var ORIGINATOR;\r",
													"var X_CORRELATOR;\r",
													"var TRACE_INDICATOR;\r",
													"var CUSTOMER_JOURNEY;\r",
													"try {\r",
													"    USER_NAME = APPLICATION.userName;\r",
													"    ORIGINATOR = \"Postman\";\r",
													"    X_CORRELATOR = CreateXCorrelator();\r",
													"    TRACE_INDICATOR = \"1\";\r",
													"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
													"    \r",
													"} catch (error) {\r",
													"    console.log(\"! Could not define dummy values for parameters. \");\r",
													"}\r",
													"\r",
													"/****************************************************************************************\r",
													"* Defining Request Body\r",
													"****************************************************************************************/\r",
													"var REQUEST_BODY;\r",
													"try {\r",
													"    REQUEST_BODY = '{'\r",
													"        + '\"new-application-name\" : ' + '\"' + newApplicationName + '\",'\r",
													"        + '\"new-application-release\" : ' + '\"' + newApplicationRelease + '\",'\r",
													"        + '\"new-application-protocol\" : ' + '\"' + dummyApplicationProtocol + '\",'\r",
													"        + '\"new-application-address\" : ' + JSON.stringify(dummyApplicationAddress) + ','\r",
													"        + '\"new-application-port\" : ' +  dummyApplicationPort\r",
													"    +'}';\r",
													"} catch (error) {\r",
													"    console.log(\"!Could not define request body. \");\r",
													"}\r",
													"/****************************************************************************************\r",
													"* Setting Collection Variables\r",
													"****************************************************************************************/\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Setting Local Variables and Preparing the Request\r",
													"****************************************************************************************/\r",
													"try {\r",
													"    let URI;\r",
													"    URI = APPLICATION.serverUrl + \"/v1/bequeath-your-data-and-die\";\r",
													"\r",
													"    let ACCEPT;\r",
													"    ACCEPT = \"application/json\";\r",
													"\r",
													"    let CONTENT_TYPE;\r",
													"    CONTENT_TYPE = \"application/json\";\r",
													"\r",
													"    pm.variables.clear();\r",
													"\r",
													"    pm.variables.set(\"uri\", URI);\r",
													"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
													"\r",
													"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
													"\r",
													"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
													"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
													"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
													"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
													"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
													"\r",
													"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
													"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(error);\r",
													"    console.log(\"! Local variables could not be set.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													"\r",
													"function CreateXCorrelator() {\r",
													"    let xCorrelator;\r",
													"    xCorrelator = \"\";\r",
													"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
													"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
													"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
													"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
													"    xCorrelator += GenerateRandomHexString(12);\r",
													"    return xCorrelator;\r",
													"}\r",
													"\r",
													"function GenerateRandomHexString(length) {\r",
													"    var randomRandomHexString = \"\";\r",
													"    while (randomRandomHexString.length < length) {\r",
													"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
													"    }\r",
													"    return randomRandomHexString.substring(0,length);\r",
													"}\r",
													"\r",
													"function RandomIpAddress() {\r",
													"    let randomAddress\r",
													"    let addressParts = [];\r",
													"    for ( let i=0; i<4; i++ ) {\r",
													"        addressParts[i] = String(Math.floor(Math.random() * 256));\r",
													"    }\r",
													"    randomAddress = addressParts[0] + \".\" + addressParts[1] + \".\" + addressParts[2] + \".\" + addressParts[3];\r",
													"    return randomAddress;\r",
													"}\r",
													"\r",
													"function RandomTcpPort() {\r",
													"    let randomPort;\r",
													"    randomPort = 2000 + Math.floor( Math.random() * 1000 );\r",
													"    return randomPort;\r",
													"}\r",
													"\r",
													"function GenerateDummyRemoteProtocol(currentProtocol) {\r",
													"    let alternativeProtocolList;\r",
													"    alternativeProtocolList = [  \"tcp-client-interface-1-0:PROTOCOL_TYPE_HTTP\",\r",
													"                                    \"tcp-client-interface-1-0:PROTOCOL_TYPE_HTTPS\"\r",
													"                                ];\r",
													"    let indexOfCurrentProtocol;\r",
													"    indexOfCurrentProtocol = alternativeProtocolList.indexOf(currentProtocol);\r",
													"    if (indexOfCurrentProtocol > -1) {\r",
													"        alternativeProtocolList.splice(indexOfCurrentProtocol, 1);\r",
													"    }\r",
													"\r",
													"    let alternativeProtocol;\r",
													"    let alternativeProtocolIndex;\r",
													"    alternativeProtocolIndex = Math.floor(Math.random() * alternativeProtocolList.length);\r",
													"    alternativeProtocol = alternativeProtocolList[alternativeProtocolIndex]; \r",
													"\r",
													"    return alternativeProtocol;\r",
													"}\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"var expectedLifeCycleState;\r",
													"try {\r",
													"    let dummyLifeCycleState;\r",
													"    dummyLifeCycleState = pm.collectionVariables.get(\"dummyLifeCycleState\");\r",
													"\r",
													"    let prefixLength = ('operation-server-interface-1-0:LIFE_CYCLE_STATE_TYPE_').length;     \r",
													"    expectedLifeCycleState = dummyLifeCycleState.substring(prefixLength);\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Could not load Input Data. \");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Extracting Result\r",
													"****************************************************************************************/\r",
													"var RESPONSE_CODE;\r",
													"var actualLifeCycleState;\r",
													"try {\r",
													"    let response;\r",
													"    response = pm.response;\r",
													"\r",
													"    RESPONSE_CODE = parseInt(response.code);\r",
													"\r",
													"    let RESPONSE_HEADERS;\r",
													"    RESPONSE_HEADERS = pm.response.headers;  \r",
													"\r",
													"    actualLifeCycleState = RESPONSE_HEADERS.get(\"life-cycle-state\");\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Response Code could not be extracted.\");\r",
													"}    \r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Testing\r",
													"****************************************************************************************/\r",
													"try {\r",
													"    pm.test(\"Provides dummy life-cycle-state in the header of the response: '\" + expectedLifeCycleState + \"' \", function () {\r",
													"        pm.expect(actualLifeCycleState).to.equal(expectedLifeCycleState);\r",
													"    });\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Testing could not be executed.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-mock-response-code",
												"value": "204",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{uri}}",
											"host": [
												"{{uri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initial life-cycle-state",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"var APPLICATION;\r",
													"var operationServerUuid;\r",
													"var initialLifeCycleState;\r",
													"try {\r",
													"    APPLICATION = pm.environment.get(\"application\");\r",
													"\r",
													"    let currentOperationServer;\r",
													"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
													"\r",
													"    operationServerUuid = currentOperationServer[\"uuid\"];\r",
													"\r",
													"    initialLifeCycleState = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"life-cycle-state\"];\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Input Data could not be loaded.\");\r",
													"}\r",
													"\r",
													"/****************************************************************************************\r",
													"* Setting Local Variables and Preparing the Request\r",
													"****************************************************************************************/\r",
													"try {\r",
													"    let URI;\r",
													"    URI = APPLICATION.serverUrl \r",
													"            + \"/core-model-1-4:control-construct/logical-termination-point=\"\r",
													"            + operationServerUuid\r",
													"            + \"/layer-protocol=0/operation-server-interface-1-0:operation-server-interface-pac/operation-server-interface-configuration/life-cycle-state\";\r",
													"\r",
													"    let REQUEST_BODY;\r",
													"    REQUEST_BODY =   '{ '\r",
													"                    +   '\"operation-server-interface-1-0:life-cycle-state\": \"' + initialLifeCycleState + '\"'\r",
													"                    + ' }';\r",
													"\r",
													"    let AUTHORIZATION;\r",
													"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
													"\r",
													"    let ACCEPT;\r",
													"    ACCEPT = \"application/json\";\r",
													"\r",
													"    let CONTENT_TYPE;\r",
													"    CONTENT_TYPE = \"application/json\";\r",
													"\r",
													"    pm.variables.clear();\r",
													"\r",
													"    pm.variables.set(\"uri\", URI);\r",
													"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
													"    \r",
													"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
													"\r",
													"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
													"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});  \r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Local variables could not be set.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Extracting Result\r",
													"****************************************************************************************/\r",
													"var RESPONSE_CODE;\r",
													"try {\r",
													"    let response;\r",
													"    response = pm.response;\r",
													"    \r",
													"    RESPONSE_CODE = parseInt(response.code);\r",
													"    \r",
													"} catch (error) {\r",
													"    console.log(\"! Response Code could not be extracted.\");\r",
													"}    \r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Testing\r",
													"****************************************************************************************/\r",
													"try {\r",
													"    pm.test(\"PUT Initial life-cycle-state responds 204 \", function () {\r",
													"        pm.expect(RESPONSE_CODE).to.equal(204);\r",
													"    });\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Testing could not be executed.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-mock-response-code",
												"value": "204",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{uri}}",
											"host": [
												"{{uri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "initial newRelease/remote-protocol",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"var APPLICATION;\r",
													"var newReleaseTcpClientUuid;\r",
													"var initialReleaseRemoteProtocol;\r",
													"try {\r",
													"    APPLICATION = pm.environment.get(\"application\");\r",
													"    \r",
													"    let newReleaseTcpClientLtp;\r",
													"    newReleaseTcpClientLtp = pm.collectionVariables.get(\"newReleaseTcpClientLtp\");\r",
													"\r",
													"    newReleaseTcpClientUuid = newReleaseTcpClientLtp[\"uuid\"];\r",
													"\r",
													"    initialReleaseRemoteProtocol = newReleaseTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Variables could not be loaded.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Setting Local Variables and Preparing the Request\r",
													"****************************************************************************************/\r",
													"try {\r",
													"    let URI;\r",
													"    URI = APPLICATION.serverUrl \r",
													"            + \"/core-model-1-4:control-construct/logical-termination-point=\" \r",
													"            + newReleaseTcpClientUuid\r",
													"            + \"/layer-protocol=0/tcp-client-interface-1-0:tcp-client-interface-pac/tcp-client-interface-configuration/remote-protocol\";\r",
													"\r",
													"    let REQUEST_BODY;\r",
													"    REQUEST_BODY = '{ '\r",
													"                    +   '\"tcp-client-interface-1-0:remote-protocol\": \"' + initialReleaseRemoteProtocol + '\"'\r",
													"                    + ' }';\r",
													"\r",
													"    let AUTHORIZATION;\r",
													"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
													"\r",
													"    let ACCEPT;\r",
													"    ACCEPT = \"application/json\";\r",
													"\r",
													"    let CONTENT_TYPE;\r",
													"    CONTENT_TYPE = \"application/json\";\r",
													"\r",
													"\r",
													"    pm.variables.clear();\r",
													"\r",
													"    pm.variables.set(\"uri\", URI);\r",
													"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
													"\r",
													"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
													"\r",
													"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
													"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(error)\r",
													"    console.log(\"! Local variables could not be set.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-mock-response-code",
												"value": "204",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{uri}}",
											"host": [
												"{{uri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "initial newRelease/remote-address",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"var APPLICATION;\r",
													"var newReleaseTcpClientUuid;\r",
													"var initialReleaseRemoteAddress;\r",
													"try {\r",
													"    APPLICATION = pm.environment.get(\"application\");\r",
													"    \r",
													"    let newReleaseTcpClientLtp;\r",
													"    newReleaseTcpClientLtp = pm.collectionVariables.get(\"newReleaseTcpClientLtp\");\r",
													"\r",
													"    newReleaseTcpClientUuid = newReleaseTcpClientLtp[\"uuid\"];\r",
													"\r",
													"    initialReleaseRemoteAddress = newReleaseTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-address\"];\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Variables could not be loaded.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Setting Local Variables and Preparing the Request\r",
													"****************************************************************************************/\r",
													"try {\r",
													"    let URI;\r",
													"    URI = APPLICATION.serverUrl \r",
													"            + \"/core-model-1-4:control-construct/logical-termination-point=\"\r",
													"            + newReleaseTcpClientUuid\r",
													"            + \"/layer-protocol=0/tcp-client-interface-1-0:tcp-client-interface-pac/tcp-client-interface-configuration/remote-address\";\r",
													"\r",
													"    let REQUEST_BODY;\r",
													"    REQUEST_BODY = '{ '\r",
													"                    +   '\"tcp-client-interface-1-0:remote-address\": ' + JSON.stringify(initialReleaseRemoteAddress)\r",
													"                    + ' }';\r",
													"\r",
													"    let AUTHORIZATION;\r",
													"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
													"\r",
													"    let ACCEPT;\r",
													"    ACCEPT = \"application/json\";\r",
													"\r",
													"    let CONTENT_TYPE;\r",
													"    CONTENT_TYPE = \"application/json\";\r",
													"\r",
													"    pm.variables.clear();\r",
													"\r",
													"    pm.variables.set(\"uri\", URI);\r",
													"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
													"\r",
													"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
													"\r",
													"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
													"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(error)\r",
													"    console.log(\"! Local variables could not be set.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-mock-response-code",
												"value": "204",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{uri}}",
											"host": [
												"{{uri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "initial newRelease/remote-port",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"var APPLICATION;\r",
													"var newReleaseTcpClientUuid;\r",
													"var initialReleaseRemotePort;\r",
													"try {\r",
													"    APPLICATION = pm.environment.get(\"application\");\r",
													"    \r",
													"    let newReleaseTcpClientLtp;\r",
													"    newReleaseTcpClientLtp = pm.collectionVariables.get(\"newReleaseTcpClientLtp\");\r",
													"\r",
													"    newReleaseTcpClientUuid = newReleaseTcpClientLtp[\"uuid\"];\r",
													"\r",
													"    initialReleaseRemotePort = newReleaseTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-port\"];\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Variables could not be loaded.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Setting Local Variables and Preparing the Request\r",
													"****************************************************************************************/\r",
													"try {\r",
													"    let URI;\r",
													"    URI = APPLICATION.serverUrl \r",
													"            + \"/core-model-1-4:control-construct/logical-termination-point=\" \r",
													"            + newReleaseTcpClientUuid\r",
													"            + \"/layer-protocol=0/tcp-client-interface-1-0:tcp-client-interface-pac/tcp-client-interface-configuration/remote-port\";\r",
													"\r",
													"    let REQUEST_BODY;\r",
													"    REQUEST_BODY = '{ '\r",
													"                    +   '\"tcp-client-interface-1-0:remote-port\": ' + initialReleaseRemotePort\r",
													"                    + ' }';\r",
													"\r",
													"    let AUTHORIZATION;\r",
													"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
													"\r",
													"    let ACCEPT;\r",
													"    ACCEPT = \"application/json\";\r",
													"\r",
													"    let CONTENT_TYPE;\r",
													"    CONTENT_TYPE = \"application/json\";\r",
													"\r",
													"\r",
													"    pm.variables.clear();\r",
													"\r",
													"    pm.variables.set(\"uri\", URI);\r",
													"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
													"\r",
													"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
													"\r",
													"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
													"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(error)\r",
													"    console.log(\"! Local variables could not be set.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-mock-response-code",
												"value": "204",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{uri}}",
											"host": [
												"{{uri}}"
											]
										}
									},
									"response": []
								}
							],
							"description": "## Gets lifeCycleState propagated?\n#### Preparation:\n- GETing CC (/core-model-1-4:control-construct)\n  - searching CC for op-s of /v1/bequeath-your-data-and-die, storing operation-key\n  - searcing CC for output port of PromptForBequeathingDataCausesTransferOfListOfApplications, find corresponding op-c, http-c and tcp-c, store them.\n- PUTting op-s-configuration/life-cycle-state with random alternative value\n- POST /v1/bequeath-your-data-and-die with\n  - new-application-name and new-application-release according to chosen http-c\n  - new-application-protocol, new-application-address and new-application-port with random generated dummy values (assure sufficiently high probability that set does not exist!)\n  - operation-key from above\n  - reasonable parameter\n\n#### Testing:\n- checking for ResponseCode==204\n- checking for lifeCycleState being identical with alternative op-s-configuration/life-cycle-state\n\n#### Clearing:\n- PUTting op-s-configuration/life-cycle-state back to original value\n- PUT NewRelease/remote-protocol with original value\n- PUT NewRelease/remote-address with original value\n- PUT NewRelease/remote-port with original value"
						},
						{
							"name": "Attribute completeness",
							"item": [
								{
									"name": "reference /core-model-1-4:control-construct",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"console.log(\"\\n-----  /v1/bequeath-your-data-and-die acceptance -- attribute completeness -------------------------------\");\r",
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"var APPLICATION;\r",
													"try {\r",
													"    APPLICATION = pm.environment.get(\"application\");\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Environment variables could not be loaded.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Setting Local Variables and Preparing the Request\r",
													"****************************************************************************************/\r",
													"try {\r",
													"    let URI;\r",
													"    URI = APPLICATION.serverUrl + \"/core-model-1-4:control-construct\";\r",
													"\r",
													"    let REQUEST_BODY;\r",
													"    REQUEST_BODY = \"\";\r",
													"\r",
													"    let AUTHORIZATION;\r",
													"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
													"\r",
													"    let ACCEPT;\r",
													"    ACCEPT = \"application/json\";\r",
													"\r",
													"    let CONTENT_TYPE;\r",
													"    CONTENT_TYPE = \"application/json\";\r",
													"\r",
													"\r",
													"    pm.variables.clear();\r",
													"\r",
													"    pm.variables.set(\"uri\", URI);\r",
													"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
													"\r",
													"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
													"\r",
													"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
													"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Local variables could not be set.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Extracting Result\r",
													"****************************************************************************************/\r",
													"var ltpList;\r",
													"var fcList;\r",
													"try {\r",
													"    let response;\r",
													"    response = pm.response;\r",
													"    \r",
													"    let responseCode;\r",
													"    responseCode = parseInt(response.code);\r",
													"    \r",
													"    if ( Math.floor(responseCode/100) === 2 ) {\r",
													"        let responseObject;\r",
													"        responseObject = JSON.parse(response.stream);\r",
													"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
													"        fcList = responseObject[\"core-model-1-4:control-construct\"][\"forwarding-domain\"][0][\"forwarding-construct\"];\r",
													"\r",
													"    } else {\r",
													"        ltpList = [];\r",
													"        fcList = [];\r",
													"    }\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! ltpList could not be extracted.\");\r",
													"}\r",
													"\r",
													"var currentOperationServer;\r",
													"var newReleaseHttpClientLtp;\r",
													"var newReleaseTcpClientLtp;\r",
													"try {\r",
													"    currentOperationServer = FindOperationServer(\"/v1/bequeath-your-data-and-die\", ltpList);\r",
													"\r",
													"    //Bequeath Transfer Of List Of Applications\r",
													"    let bequeathingDataCausesTransferOfListOfApplicationsOperationClientLtp = FindOperationClientUsingCallback(\"PromptForBequeathingDataCausesTransferOfListOfApplications\", fcList, ltpList)\r",
													"\r",
													"    newReleaseHttpClientLtp = FindServingLtp(bequeathingDataCausesTransferOfListOfApplicationsOperationClientLtp, ltpList);\r",
													"    newReleaseTcpClientLtp = FindServingLtp(newReleaseHttpClientLtp, ltpList); \r",
													"} catch (error) {\r",
													"    console.log(error);\r",
													"    console.log(\"! Reference objects could not be extracted.\");\r",
													"} \r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Setting Collection Variables\r",
													"****************************************************************************************/\r",
													"try {\r",
													"    pm.collectionVariables.clear();\r",
													"    \r",
													"    pm.collectionVariables.set(\"currentOperationServer\", currentOperationServer);\r",
													"    pm.collectionVariables.set(\"newReleaseHttpClientLtp\", newReleaseHttpClientLtp);\r",
													"    pm.collectionVariables.set(\"newReleaseTcpClientLtp\", newReleaseTcpClientLtp);\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Collection variables could not be set.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													"\r",
													"function FindOperationServer(operationName, ltpList) {\r",
													"    let operationServer;\r",
													"    operationServer = \"\";\r",
													"    try {\r",
													"        let sampleUuid;\r",
													"        for(let i=0; i<ltpList.length; i++) {\r",
													"            sampleUuid = ltpList[i][\"uuid\"];\r",
													"            if(sampleUuid.includes(\"op-s-\")) {\r",
													"                let sampleOperationName;\r",
													"                sampleOperationName = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
													"                if(sampleOperationName == operationName) {\r",
													"                    operationServer = ltpList[i];\r",
													"                    return operationServer;\r",
													"                }\r",
													"            }\r",
													"        }\r",
													"    } catch (error) {\r",
													"        console.log(\"! Exception in function : FindOperationServer. \");\r",
													"    }\r",
													"    return operationServer;\r",
													"}\r",
													"\r",
													"function FindOutputFcPortList(forwardingName, fcList) {\r",
													"    let outputFcPortList;\r",
													"    outputFcPortList = [];\r",
													"    try {\r",
													"        for( let i=0; i<fcList.length; i++ ) {\r",
													"            for(let j=0; j<fcList[i][\"name\"].length; j++) {               \r",
													"                if(fcList[i][\"name\"][j][\"value\"] == forwardingName) {\r",
													"                    fcPortList = fcList[i][\"fc-port\"];\r",
													"                    for(let k=0;k<fcPortList.length;k++) {\r",
													"                        if(fcPortList[k][\"port-direction\"] == \"core-model-1-4:PORT_DIRECTION_TYPE_OUTPUT\") {\r",
													"                            outputFcPortList.push(fcPortList[k]);\r",
													"                        }\r",
													"                    }\r",
													"                    return outputFcPortList;\r",
													"                }\r",
													"            }\r",
													"        }\r",
													"    } catch (error) {\r",
													"        console.log(\"! Exception in function FindOutputFcPortList. \");\r",
													"    }\r",
													"    return outputFcPortList;\r",
													"}\r",
													"\r",
													"function FindActualInstanceByUuid(expectedUuid, actualLtpList) {\r",
													"    let actualInstance;\r",
													"    actualInstance = {};\r",
													"    try {\r",
													"        for ( let i=0; i<actualLtpList.length; i++ ) {\r",
													"            let sampleUuid;\r",
													"            sampleUuid = actualLtpList[i][\"uuid\"];\r",
													"            if( sampleUuid == expectedUuid ) {\r",
													"                actualInstance = actualLtpList[i];\r",
													"                return actualInstance;\r",
													"            }\r",
													"        }\r",
													"\r",
													"    } catch (error) {\r",
													"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
													"    }\r",
													"    return undefined;\r",
													"}\r",
													"\r",
													"function FindServingLtp(clientLtp, ltpList) {\r",
													"    let servingLtp;\r",
													"    servingLtp = {};\r",
													"    try{\r",
													"        let serverLtpUuid;\r",
													"        serverLtpUuid = clientLtp[\"server-ltp\"][0];\r",
													"        for( let i=0; i<ltpList.length; i++ ) {\r",
													"            let sampleUuid;\r",
													"            sampleUuid = ltpList[i][\"uuid\"];\r",
													"            if( sampleUuid == serverLtpUuid ) {\r",
													"                servingLtp = ltpList[i];\r",
													"                return servingLtp;\r",
													"            }\r",
													"        }\r",
													"    } catch(error) {\r",
													"        console.log(error);\r",
													"        console.log(\"! Exception in function : FindServingLtp. \")\r",
													"    }\r",
													"    return servingLtp;\r",
													"}\r",
													"\r",
													"function FindOperationClientUsingCallback(callback, fcList, ltpList) {\r",
													"    let operationClientLtp\r",
													"    try {\r",
													"        let outputFcPortList = FindOutputFcPortList(callback, fcList);\r",
													"        let randomOutputFcPort = outputFcPortList[Math.floor(Math.random() * outputFcPortList.length)];\r",
													"        let outputLtpUuid = randomOutputFcPort[\"logical-termination-point\"];\r",
													"        operationClientLtp = FindActualInstanceByUuid(outputLtpUuid, ltpList);\r",
													"    } catch (error) {\r",
													"        console.log(error);\r",
													"        console.log(\"! Exception in function FindOperationClientUsingCallback. \");\r",
													"    }\r",
													"    return  operationClientLtp\r",
													"}\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "x-mock-response-code",
												"value": "200",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{uri}}",
											"host": [
												"{{uri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Expected  /v1/bequeath-your-data-and-die - attribute completeness",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"var APPLICATION;\r",
													"var OPERATION_KEY;\r",
													"var newApplicationName;\r",
													"var newApplicationRelease;\r",
													"var dummyApplicationProtocol;\r",
													"var dummyApplicationAddress;\r",
													"var dummyApplicationPort;\r",
													"try {\r",
													"    APPLICATION = pm.environment.get(\"application\");\r",
													"\r",
													"    let currentOperationServer;\r",
													"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
													"    \r",
													"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
													"\r",
													"    let newReleaseHttpClientLtp;\r",
													"    newReleaseHttpClientLtp = pm.collectionVariables.get(\"newReleaseHttpClientLtp\");\r",
													"\r",
													"    newApplicationName = newReleaseHttpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
													"\r",
													"    newApplicationRelease = newReleaseHttpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"release-number\"];\r",
													"\r",
													"    let newReleaseTcpClientLtp;\r",
													"    newReleaseTcpClientLtp = pm.collectionVariables.get(\"newReleaseTcpClientLtp\");\r",
													"\r",
													"    let protocol = newReleaseTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
													"    dummyApplicationProtocol = GenerateDummyRemoteProtocol(protocol);\r",
													"    dummyApplicationProtocol = dummyApplicationProtocol.substring(('tcp-client-interface-1-0:PROTOCOL_TYPE_').length);\r",
													"\r",
													"    let dummyIpv4Address = RandomIpAddress();\r",
													"    dummyApplicationAddress = {\r",
													"        \"ip-address\": {\r",
													"            \"ipv-4-address\": dummyIpv4Address\r",
													"        }\r",
													"    };\r",
													"    dummyApplicationPort = RandomTcpPort();\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(error);\r",
													"    console.log(\"! Input Data could not be loaded.\");\r",
													"}\r",
													"\r",
													"/****************************************************************************************\r",
													"* Defining Dummy Parameters\r",
													"****************************************************************************************/\r",
													"var USER_NAME;\r",
													"var ORIGINATOR;\r",
													"var X_CORRELATOR;\r",
													"var TRACE_INDICATOR;\r",
													"var CUSTOMER_JOURNEY;\r",
													"try {\r",
													"    USER_NAME = APPLICATION.userName;\r",
													"    ORIGINATOR = \"Postman\";\r",
													"    X_CORRELATOR = CreateXCorrelator();\r",
													"    TRACE_INDICATOR = \"1\";\r",
													"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
													"    \r",
													"} catch (error) {\r",
													"    console.log(\"! Could not define dummy values for parameters. \");\r",
													"}\r",
													"\r",
													"/****************************************************************************************\r",
													"* Defining Request Body\r",
													"****************************************************************************************/\r",
													"var REQUEST_BODY;\r",
													"try {\r",
													"    REQUEST_BODY = '{'\r",
													"        + '\"new-application-name\" : ' + '\"' + newApplicationName + '\",'\r",
													"        + '\"new-application-release\" : ' + '\"' + newApplicationRelease + '\",'\r",
													"        + '\"new-application-protocol\" : ' + '\"' + dummyApplicationProtocol + '\",'\r",
													"        + '\"new-application-address\" : ' + JSON.stringify(dummyApplicationAddress) + ','\r",
													"        + '\"new-application-port\" : ' +  dummyApplicationPort\r",
													"    +'}';\r",
													"\r",
													"    let attributes;\r",
													"    attributes = [\"new-application-name\", \"new-application-release\", \"new-application-protocol\", \"new-application-address\", \"new-application-port\"];\r",
													"    let missingAttribute;\r",
													"    missingAttribute = GetMissingAttribute(attributes);\r",
													"\r",
													"    REQUEST_BODY = JSON.parse(REQUEST_BODY);\r",
													"    delete REQUEST_BODY[missingAttribute];\r",
													"    REQUEST_BODY = JSON.stringify(REQUEST_BODY);\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"!Could not define request body. \");\r",
													"}\r",
													"/****************************************************************************************\r",
													"* Setting Collection Variables\r",
													"****************************************************************************************/\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Setting Local Variables and Preparing the Request\r",
													"****************************************************************************************/\r",
													"try {\r",
													"    let URI;\r",
													"    URI = APPLICATION.serverUrl + \"/v1/bequeath-your-data-and-die\";\r",
													"\r",
													"    let ACCEPT;\r",
													"    ACCEPT = \"application/json\";\r",
													"\r",
													"    let CONTENT_TYPE;\r",
													"    CONTENT_TYPE = \"application/json\";\r",
													"\r",
													"    pm.variables.clear();\r",
													"\r",
													"    pm.variables.set(\"uri\", URI);\r",
													"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
													"\r",
													"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
													"\r",
													"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
													"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
													"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
													"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
													"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
													"\r",
													"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
													"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(error);\r",
													"    console.log(\"! Local variables could not be set.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													"\r",
													"function CreateXCorrelator() {\r",
													"    let xCorrelator;\r",
													"    xCorrelator = \"\";\r",
													"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
													"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
													"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
													"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
													"    xCorrelator += GenerateRandomHexString(12);\r",
													"    return xCorrelator;\r",
													"}\r",
													"\r",
													"function GenerateRandomHexString(length) {\r",
													"    var randomRandomHexString = \"\";\r",
													"    while (randomRandomHexString.length < length) {\r",
													"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
													"    }\r",
													"    return randomRandomHexString.substring(0,length);\r",
													"}\r",
													"\r",
													"function RandomIpAddress() {\r",
													"    let randomAddress\r",
													"    let addressParts = [];\r",
													"    for ( let i=0; i<4; i++ ) {\r",
													"        addressParts[i] = String(Math.floor(Math.random() * 256));\r",
													"    }\r",
													"    randomAddress = addressParts[0] + \".\" + addressParts[1] + \".\" + addressParts[2] + \".\" + addressParts[3];\r",
													"    return randomAddress;\r",
													"}\r",
													"\r",
													"function RandomTcpPort() {\r",
													"    let randomPort;\r",
													"    randomPort = 2000 + Math.floor( Math.random() * 1000 );\r",
													"    return randomPort;\r",
													"}\r",
													"\r",
													"function GetMissingAttribute(attributes) {\r",
													"\tlet missingAttribute;\r",
													"\tmissingAttribute = attributes[Math.floor(Math.random()*attributes.length)];\r",
													"\treturn missingAttribute;\r",
													"}\r",
													"\r",
													"function GenerateDummyRemoteProtocol(currentProtocol) {\r",
													"    let alternativeProtocolList;\r",
													"    alternativeProtocolList = [  \"tcp-client-interface-1-0:PROTOCOL_TYPE_HTTP\",\r",
													"                                    \"tcp-client-interface-1-0:PROTOCOL_TYPE_HTTPS\"\r",
													"                                ];\r",
													"    let indexOfCurrentProtocol;\r",
													"    indexOfCurrentProtocol = alternativeProtocolList.indexOf(currentProtocol);\r",
													"    if (indexOfCurrentProtocol > -1) {\r",
													"        alternativeProtocolList.splice(indexOfCurrentProtocol, 1);\r",
													"    }\r",
													"\r",
													"    let alternativeProtocol;\r",
													"    let alternativeProtocolIndex;\r",
													"    alternativeProtocolIndex = Math.floor(Math.random() * alternativeProtocolList.length);\r",
													"    alternativeProtocol = alternativeProtocolList[alternativeProtocolIndex]; \r",
													"\r",
													"    return alternativeProtocol;\r",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Extracting Result\r",
													"****************************************************************************************/\r",
													"var RESPONSE_CODE;\r",
													"try {\r",
													"    let response;\r",
													"    response = pm.response;\r",
													"\r",
													"    RESPONSE_CODE = parseInt(response.code);\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Response Code could not be extracted.\");\r",
													"}    \r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Testing\r",
													"****************************************************************************************/\r",
													"try {\r",
													"    pm.test(\"POST /v1/bequeath-your-data-and-die responds 400, because of missing attribute\", function () {\r",
													"        pm.expect(RESPONSE_CODE).to.equal(400);\r",
													"    });\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Testing could not be executed.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-mock-response-code",
												"value": "400",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{uri}}",
											"host": [
												"{{uri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "initial newRelease/remote-protocol",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"var APPLICATION;\r",
													"var newReleaseTcpClientUuid;\r",
													"var initialReleaseRemoteProtocol;\r",
													"try {\r",
													"    APPLICATION = pm.environment.get(\"application\");\r",
													"    \r",
													"    let newReleaseTcpClientLtp;\r",
													"    newReleaseTcpClientLtp = pm.collectionVariables.get(\"newReleaseTcpClientLtp\");\r",
													"\r",
													"    newReleaseTcpClientUuid = newReleaseTcpClientLtp[\"uuid\"];\r",
													"\r",
													"    initialReleaseRemoteProtocol = newReleaseTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Variables could not be loaded.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Setting Local Variables and Preparing the Request\r",
													"****************************************************************************************/\r",
													"try {\r",
													"    let URI;\r",
													"    URI = APPLICATION.serverUrl \r",
													"            + \"/core-model-1-4:control-construct/logical-termination-point=\" \r",
													"            + newReleaseTcpClientUuid\r",
													"            + \"/layer-protocol=0/tcp-client-interface-1-0:tcp-client-interface-pac/tcp-client-interface-configuration/remote-protocol\";\r",
													"\r",
													"    let REQUEST_BODY;\r",
													"    REQUEST_BODY = '{ '\r",
													"                    +   '\"tcp-client-interface-1-0:remote-protocol\": \"' + initialReleaseRemoteProtocol + '\"'\r",
													"                    + ' }';\r",
													"\r",
													"    let AUTHORIZATION;\r",
													"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
													"\r",
													"    let ACCEPT;\r",
													"    ACCEPT = \"application/json\";\r",
													"\r",
													"    let CONTENT_TYPE;\r",
													"    CONTENT_TYPE = \"application/json\";\r",
													"\r",
													"\r",
													"    pm.variables.clear();\r",
													"\r",
													"    pm.variables.set(\"uri\", URI);\r",
													"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
													"\r",
													"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
													"\r",
													"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
													"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(error)\r",
													"    console.log(\"! Local variables could not be set.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-mock-response-code",
												"value": "204",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{uri}}",
											"host": [
												"{{uri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "initial newRelease/remote-address",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"var APPLICATION;\r",
													"var newReleaseTcpClientUuid;\r",
													"var initialReleaseRemoteAddress;\r",
													"try {\r",
													"    APPLICATION = pm.environment.get(\"application\");\r",
													"    \r",
													"    let newReleaseTcpClientLtp;\r",
													"    newReleaseTcpClientLtp = pm.collectionVariables.get(\"newReleaseTcpClientLtp\");\r",
													"\r",
													"    newReleaseTcpClientUuid = newReleaseTcpClientLtp[\"uuid\"];\r",
													"\r",
													"    initialReleaseRemoteAddress = newReleaseTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-address\"];\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Variables could not be loaded.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Setting Local Variables and Preparing the Request\r",
													"****************************************************************************************/\r",
													"try {\r",
													"    let URI;\r",
													"    URI = APPLICATION.serverUrl \r",
													"            + \"/core-model-1-4:control-construct/logical-termination-point=\"\r",
													"            + newReleaseTcpClientUuid\r",
													"            + \"/layer-protocol=0/tcp-client-interface-1-0:tcp-client-interface-pac/tcp-client-interface-configuration/remote-address\";\r",
													"\r",
													"    let REQUEST_BODY;\r",
													"    REQUEST_BODY = '{ '\r",
													"                    +   '\"tcp-client-interface-1-0:remote-address\": ' + JSON.stringify(initialReleaseRemoteAddress)\r",
													"                    + ' }';\r",
													"\r",
													"    let AUTHORIZATION;\r",
													"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
													"\r",
													"    let ACCEPT;\r",
													"    ACCEPT = \"application/json\";\r",
													"\r",
													"    let CONTENT_TYPE;\r",
													"    CONTENT_TYPE = \"application/json\";\r",
													"\r",
													"    pm.variables.clear();\r",
													"\r",
													"    pm.variables.set(\"uri\", URI);\r",
													"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
													"\r",
													"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
													"\r",
													"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
													"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(error)\r",
													"    console.log(\"! Local variables could not be set.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-mock-response-code",
												"value": "204",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{uri}}",
											"host": [
												"{{uri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "initial newRelease/remote-port",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"var APPLICATION;\r",
													"var newReleaseTcpClientUuid;\r",
													"var initialReleaseRemotePort;\r",
													"try {\r",
													"    APPLICATION = pm.environment.get(\"application\");\r",
													"    \r",
													"    let newReleaseTcpClientLtp;\r",
													"    newReleaseTcpClientLtp = pm.collectionVariables.get(\"newReleaseTcpClientLtp\");\r",
													"\r",
													"    newReleaseTcpClientUuid = newReleaseTcpClientLtp[\"uuid\"];\r",
													"\r",
													"    initialReleaseRemotePort = newReleaseTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-port\"];\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(\"! Variables could not be loaded.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Setting Local Variables and Preparing the Request\r",
													"****************************************************************************************/\r",
													"try {\r",
													"    let URI;\r",
													"    URI = APPLICATION.serverUrl \r",
													"            + \"/core-model-1-4:control-construct/logical-termination-point=\" \r",
													"            + newReleaseTcpClientUuid\r",
													"            + \"/layer-protocol=0/tcp-client-interface-1-0:tcp-client-interface-pac/tcp-client-interface-configuration/remote-port\";\r",
													"\r",
													"    let REQUEST_BODY;\r",
													"    REQUEST_BODY = '{ '\r",
													"                    +   '\"tcp-client-interface-1-0:remote-port\": ' + initialReleaseRemotePort\r",
													"                    + ' }';\r",
													"\r",
													"    let AUTHORIZATION;\r",
													"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
													"\r",
													"    let ACCEPT;\r",
													"    ACCEPT = \"application/json\";\r",
													"\r",
													"    let CONTENT_TYPE;\r",
													"    CONTENT_TYPE = \"application/json\";\r",
													"\r",
													"\r",
													"    pm.variables.clear();\r",
													"\r",
													"    pm.variables.set(\"uri\", URI);\r",
													"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
													"\r",
													"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
													"\r",
													"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
													"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
													"\r",
													"} catch (error) {\r",
													"    console.log(error)\r",
													"    console.log(\"! Local variables could not be set.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-mock-response-code",
												"value": "204",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{uri}}",
											"host": [
												"{{uri}}"
											]
										}
									},
									"response": []
								}
							],
							"description": "## Get attributes checked for completeness?\n#### Preparation:\n- GETing CC (/core-model-1-4:control-construct)\n  - searching CC for op-s of /v1/bequeath-your-data-and-die, storing operation-key\n  - searcing CC for output port of PromptForBequeathingDataCausesTransferOfListOfApplications, find corresponding op-c, http-c and tcp-c, store them.\n- POST /v1/bequeath-your-data-and-die with\n  - new-application-name and new-application-release according to chosen http-c\n  - new-application-protocol, new-application-address and new-application-port with random generated dummy values (assure sufficiently high probability that set does not exist!), BUT one randomly chosen attribute missing\n  - operation-key from above\n  - reasonable parameters\n\n#### Testing:\n- checking for ResponseCode==400\n\n#### Clearing:\n- not applicable"
						},
						{
							"name": "Attribute correctness",
							"item": [
								{
									"name": "new-application-release checked?",
									"item": [
										{
											"name": "reference /core-model-1-4:control-construct",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n----- /v1/bequeath-your-data-and-die acceptance -- new-application-release attribute checked? -------------------------------\");\r",
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"var APPLICATION;\r",
															"try {\r",
															"    APPLICATION = pm.environment.get(\"application\");\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Environment variables could not be loaded.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Setting Local Variables and Preparing the Request\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    let URI;\r",
															"    URI = APPLICATION.serverUrl + \"/core-model-1-4:control-construct\";\r",
															"\r",
															"    let REQUEST_BODY;\r",
															"    REQUEST_BODY = \"\";\r",
															"\r",
															"    let AUTHORIZATION;\r",
															"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
															"\r",
															"    let ACCEPT;\r",
															"    ACCEPT = \"application/json\";\r",
															"\r",
															"    let CONTENT_TYPE;\r",
															"    CONTENT_TYPE = \"application/json\";\r",
															"\r",
															"\r",
															"    pm.variables.clear();\r",
															"\r",
															"    pm.variables.set(\"uri\", URI);\r",
															"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
															"\r",
															"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
															"\r",
															"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
															"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Local variables could not be set.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Extracting Result\r",
															"****************************************************************************************/\r",
															"var ltpList;\r",
															"var fcList;\r",
															"try {\r",
															"    let response;\r",
															"    response = pm.response;\r",
															"    \r",
															"    let responseCode;\r",
															"    responseCode = parseInt(response.code);\r",
															"    \r",
															"    if ( Math.floor(responseCode/100) === 2 ) {\r",
															"        let responseObject;\r",
															"        responseObject = JSON.parse(response.stream);\r",
															"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
															"        fcList = responseObject[\"core-model-1-4:control-construct\"][\"forwarding-domain\"][0][\"forwarding-construct\"];\r",
															"\r",
															"    } else {\r",
															"        ltpList = [];\r",
															"        fcList = [];\r",
															"    }\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! ltpList could not be extracted.\");\r",
															"}\r",
															"\r",
															"var currentOperationServer;\r",
															"var newReleaseHttpClientLtp;\r",
															"var newReleaseTcpClientLtp;\r",
															"try {\r",
															"    currentOperationServer = FindOperationServer(\"/v1/bequeath-your-data-and-die\", ltpList);\r",
															"\r",
															"    //Bequeath Transfer Of List Of Applications\r",
															"    let bequeathingDataCausesTransferOfListOfApplicationsOperationClientLtp = FindOperationClientUsingCallback(\"PromptForBequeathingDataCausesTransferOfListOfApplications\", fcList, ltpList)\r",
															"\r",
															"    newReleaseHttpClientLtp = FindServingLtp(bequeathingDataCausesTransferOfListOfApplicationsOperationClientLtp, ltpList);\r",
															"    newReleaseTcpClientLtp = FindServingLtp(newReleaseHttpClientLtp, ltpList); \r",
															"} catch (error) {\r",
															"    console.log(error);\r",
															"    console.log(\"! Reference objects could not be extracted.\");\r",
															"}\r",
															"\r",
															"/****************************************************************************************\r",
															"* Setting Collection Variables\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    pm.collectionVariables.clear();\r",
															"    \r",
															"    pm.collectionVariables.set(\"currentOperationServer\", currentOperationServer);\r",
															"    pm.collectionVariables.set(\"newReleaseHttpClientLtp\", newReleaseHttpClientLtp);\r",
															"    pm.collectionVariables.set(\"newReleaseTcpClientLtp\", newReleaseTcpClientLtp);\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Collection variables could not be set.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/\r",
															"\r",
															"function FindOperationServer(operationName, ltpList) {\r",
															"    let operationServer;\r",
															"    operationServer = \"\";\r",
															"    try {\r",
															"        let sampleUuid;\r",
															"        for(let i=0; i<ltpList.length; i++) {\r",
															"            sampleUuid = ltpList[i][\"uuid\"];\r",
															"            if(sampleUuid.includes(\"op-s-\")) {\r",
															"                let sampleOperationName;\r",
															"                sampleOperationName = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
															"                if(sampleOperationName == operationName) {\r",
															"                    operationServer = ltpList[i];\r",
															"                    return operationServer;\r",
															"                }\r",
															"            }\r",
															"        }\r",
															"    } catch (error) {\r",
															"        console.log(\"! Exception in function : FindOperationServer. \");\r",
															"    }\r",
															"    return operationServer;\r",
															"}\r",
															"\r",
															"function FindOutputFcPortList(forwardingName, fcList) {\r",
															"    let outputFcPortList;\r",
															"    outputFcPortList = [];\r",
															"    try {\r",
															"        for( let i=0; i<fcList.length; i++ ) {\r",
															"            for(let j=0; j<fcList[i][\"name\"].length; j++) {               \r",
															"                if(fcList[i][\"name\"][j][\"value\"] == forwardingName) {\r",
															"                    fcPortList = fcList[i][\"fc-port\"];\r",
															"                    for(let k=0;k<fcPortList.length;k++) {\r",
															"                        if(fcPortList[k][\"port-direction\"] == \"core-model-1-4:PORT_DIRECTION_TYPE_OUTPUT\") {\r",
															"                            outputFcPortList.push(fcPortList[k]);\r",
															"                        }\r",
															"                    }\r",
															"                    return outputFcPortList;\r",
															"                }\r",
															"            }\r",
															"        }\r",
															"    } catch (error) {\r",
															"        console.log(\"! Exception in function FindOutputFcPortList. \");\r",
															"    }\r",
															"    return outputFcPortList;\r",
															"}\r",
															"\r",
															"function FindActualInstanceByUuid(expectedUuid, actualLtpList) {\r",
															"    let actualInstance;\r",
															"    actualInstance = {};\r",
															"    try {\r",
															"        for ( let i=0; i<actualLtpList.length; i++ ) {\r",
															"            let sampleUuid;\r",
															"            sampleUuid = actualLtpList[i][\"uuid\"];\r",
															"            if( sampleUuid == expectedUuid ) {\r",
															"                actualInstance = actualLtpList[i];\r",
															"                return actualInstance;\r",
															"            }\r",
															"        }\r",
															"\r",
															"    } catch (error) {\r",
															"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
															"    }\r",
															"    return undefined;\r",
															"}\r",
															"\r",
															"function FindServingLtp(clientLtp, ltpList) {\r",
															"    let servingLtp;\r",
															"    servingLtp = {};\r",
															"    try{\r",
															"        let serverLtpUuid;\r",
															"        serverLtpUuid = clientLtp[\"server-ltp\"][0];\r",
															"        for( let i=0; i<ltpList.length; i++ ) {\r",
															"            let sampleUuid;\r",
															"            sampleUuid = ltpList[i][\"uuid\"];\r",
															"            if( sampleUuid == serverLtpUuid ) {\r",
															"                servingLtp = ltpList[i];\r",
															"                return servingLtp;\r",
															"            }\r",
															"        }\r",
															"    } catch(error) {\r",
															"        console.log(error);\r",
															"        console.log(\"! Exception in function : FindServingLtp. \")\r",
															"    }\r",
															"    return servingLtp;\r",
															"}\r",
															"\r",
															"function FindOperationClientUsingCallback(callback, fcList, ltpList) {\r",
															"    let operationClientLtp\r",
															"    try {\r",
															"        let outputFcPortList = FindOutputFcPortList(callback, fcList);\r",
															"        let randomOutputFcPort = outputFcPortList[Math.floor(Math.random() * outputFcPortList.length)];\r",
															"        let outputLtpUuid = randomOutputFcPort[\"logical-termination-point\"];\r",
															"        operationClientLtp = FindActualInstanceByUuid(outputLtpUuid, ltpList);\r",
															"    } catch (error) {\r",
															"        console.log(error);\r",
															"        console.log(\"! Exception in function FindOperationClientUsingCallback. \");\r",
															"    }\r",
															"    return  operationClientLtp\r",
															"}\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "x-mock-response-code",
														"value": "200",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Expected   /v1/bequeath-your-data-and-die- too-short new-application-release",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n-----  too short new-application-release -------------------------------\");\r",
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"var APPLICATION;\r",
															"var OPERATION_KEY;\r",
															"var newApplicationName;\r",
															"var dummyNewApplicationRelease;\r",
															"var dummyApplicationProtocol;\r",
															"var dummyApplicationAddress;\r",
															"var dummyApplicationPort\r",
															"try {\r",
															"    APPLICATION = pm.environment.get(\"application\");\r",
															"\r",
															"    let currentOperationServer;\r",
															"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
															"    \r",
															"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
															"\r",
															"    let newReleaseHttpClientLtp;\r",
															"    newReleaseHttpClientLtp = pm.collectionVariables.get(\"newReleaseHttpClientLtp\");\r",
															"\r",
															"    newApplicationName = newReleaseHttpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
															"\r",
															"    dummyNewApplicationRelease = FaultyReleaseNumber()\r",
															"\r",
															"    let newReleaseTcpClientLtp;\r",
															"    newReleaseTcpClientLtp = pm.collectionVariables.get(\"newReleaseTcpClientLtp\");\r",
															"\r",
															"    let protocol = newReleaseTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
															"    dummyApplicationProtocol = GenerateDummyRemoteProtocol(protocol);\r",
															"    dummyApplicationProtocol = dummyApplicationProtocol.substring(('tcp-client-interface-1-0:PROTOCOL_TYPE_').length);\r",
															"\r",
															"    let dummyIpv4Address = RandomIpAddress();\r",
															"    dummyApplicationAddress = {\r",
															"        \"ip-address\": {\r",
															"            \"ipv-4-address\": dummyIpv4Address\r",
															"        }\r",
															"    };\r",
															"    dummyApplicationPort = RandomTcpPort();\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(error);\r",
															"    console.log(\"! Input Data could not be loaded.\");\r",
															"}\r",
															"\r",
															"/****************************************************************************************\r",
															"* Defining Dummy Parameters\r",
															"****************************************************************************************/\r",
															"var USER_NAME;\r",
															"var ORIGINATOR;\r",
															"var X_CORRELATOR;\r",
															"var TRACE_INDICATOR;\r",
															"var CUSTOMER_JOURNEY;\r",
															"try {\r",
															"    USER_NAME = APPLICATION.userName;\r",
															"    ORIGINATOR = \"Postman\";\r",
															"    X_CORRELATOR = CreateXCorrelator();\r",
															"    TRACE_INDICATOR = \"1\";\r",
															"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
															"    \r",
															"} catch (error) {\r",
															"    console.log(\"! Could not define dummy values for parameters. \");\r",
															"}\r",
															"\r",
															"/****************************************************************************************\r",
															"* Defining Request Body\r",
															"****************************************************************************************/\r",
															"var REQUEST_BODY;\r",
															"try {\r",
															"    REQUEST_BODY = '{'\r",
															"        + '\"new-application-name\" : ' + '\"' + newApplicationName + '\",'\r",
															"        + '\"new-application-release\" : ' + '\"' + dummyNewApplicationRelease + '\",'\r",
															"        + '\"new-application-protocol\" : ' + '\"' + dummyApplicationProtocol + '\",'\r",
															"        + '\"new-application-address\" : ' + JSON.stringify(dummyApplicationAddress) + ','\r",
															"        + '\"new-application-port\" : ' +  dummyApplicationPort\r",
															"    +'}';\r",
															"} catch (error) {\r",
															"    console.log(\"!Could not define request body. \");\r",
															"}\r",
															"/****************************************************************************************\r",
															"* Setting Collection Variables\r",
															"****************************************************************************************/\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Setting Local Variables and Preparing the Request\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    let URI;\r",
															"    URI = APPLICATION.serverUrl + \"/v1/bequeath-your-data-and-die\";\r",
															"\r",
															"    let ACCEPT;\r",
															"    ACCEPT = \"application/json\";\r",
															"\r",
															"    let CONTENT_TYPE;\r",
															"    CONTENT_TYPE = \"application/json\";\r",
															"\r",
															"    pm.variables.clear();\r",
															"\r",
															"    pm.variables.set(\"uri\", URI);\r",
															"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
															"\r",
															"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
															"\r",
															"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
															"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
															"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
															"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
															"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
															"\r",
															"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
															"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(error);\r",
															"    console.log(\"! Local variables could not be set.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/\r",
															"\r",
															"function CreateXCorrelator() {\r",
															"    let xCorrelator;\r",
															"    xCorrelator = \"\";\r",
															"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
															"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
															"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
															"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
															"    xCorrelator += GenerateRandomHexString(12);\r",
															"    return xCorrelator;\r",
															"}\r",
															"\r",
															"function GenerateRandomHexString(length) {\r",
															"    var randomRandomHexString = \"\";\r",
															"    while (randomRandomHexString.length < length) {\r",
															"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
															"    }\r",
															"    return randomRandomHexString.substring(0,length);\r",
															"}\r",
															"\r",
															"function FaultyReleaseNumber() {\r",
															"    let releaseNumber;\r",
															"    let releaseNumberParts = [];\r",
															"    for (let i = 0; i < 2; i++) {\r",
															"        releaseNumberParts[i] = Math.floor(Math.random() * 10);\r",
															"    }\r",
															"    releaseNumber = releaseNumberParts[0] + \".\" + releaseNumberParts[1];\r",
															"    return releaseNumber;\r",
															"}\r",
															"\r",
															"function RandomIpAddress() {\r",
															"    let randomAddress\r",
															"    let addressParts = [];\r",
															"    for ( let i=0; i<4; i++ ) {\r",
															"        addressParts[i] = String(Math.floor(Math.random() * 256));\r",
															"    }\r",
															"    randomAddress = addressParts[0] + \".\" + addressParts[1] + \".\" + addressParts[2] + \".\" + addressParts[3];\r",
															"    return randomAddress;\r",
															"}\r",
															"\r",
															"function RandomTcpPort() {\r",
															"    let randomPort;\r",
															"    randomPort = 2000 + Math.floor( Math.random() * 1000 );\r",
															"    return randomPort;\r",
															"}\r",
															"\r",
															"function GenerateDummyRemoteProtocol(currentProtocol) {\r",
															"    let alternativeProtocolList;\r",
															"    alternativeProtocolList = [  \"tcp-client-interface-1-0:PROTOCOL_TYPE_HTTP\",\r",
															"                                    \"tcp-client-interface-1-0:PROTOCOL_TYPE_HTTPS\"\r",
															"                                ];\r",
															"    let indexOfCurrentProtocol;\r",
															"    indexOfCurrentProtocol = alternativeProtocolList.indexOf(currentProtocol);\r",
															"    if (indexOfCurrentProtocol > -1) {\r",
															"        alternativeProtocolList.splice(indexOfCurrentProtocol, 1);\r",
															"    }\r",
															"\r",
															"    let alternativeProtocol;\r",
															"    let alternativeProtocolIndex;\r",
															"    alternativeProtocolIndex = Math.floor(Math.random() * alternativeProtocolList.length);\r",
															"    alternativeProtocol = alternativeProtocolList[alternativeProtocolIndex]; \r",
															"\r",
															"    return alternativeProtocol;\r",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Extracting Result\r",
															"****************************************************************************************/\r",
															"var RESPONSE_CODE;\r",
															"try {\r",
															"    let response;\r",
															"    response = pm.response;\r",
															"\r",
															"    RESPONSE_CODE = parseInt(response.code);\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Response Code could not be extracted.\");\r",
															"}    \r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Testing\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    pm.test(\"POST /v1/bequeath-your-data-and-die responds 400, because of too short new-application-release\", function () {\r",
															"        pm.expect(RESPONSE_CODE).to.equal(400);\r",
															"    });\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Testing could not be executed.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-mock-response-code",
														"value": "400",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Expected  /v1/bequeath-your-data-and-die - too-long new-application-release",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n-----  too long new-application-release -------------------------------\");\r",
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"var APPLICATION;\r",
															"var OPERATION_KEY;\r",
															"var newApplicationName;\r",
															"var dummyNewApplicationRelease;\r",
															"var dummyApplicationProtocol;\r",
															"var dummyApplicationAddress;\r",
															"var dummyApplicationPort\r",
															"try {\r",
															"    APPLICATION = pm.environment.get(\"application\");\r",
															"\r",
															"    let currentOperationServer;\r",
															"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
															"    \r",
															"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
															"\r",
															"    let newReleaseHttpClientLtp;\r",
															"    newReleaseHttpClientLtp = pm.collectionVariables.get(\"newReleaseHttpClientLtp\");\r",
															"\r",
															"    newApplicationName = newReleaseHttpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
															"\r",
															"    dummyNewApplicationRelease = FaultyReleaseNumber()\r",
															"\r",
															"    let newReleaseTcpClientLtp;\r",
															"    newReleaseTcpClientLtp = pm.collectionVariables.get(\"newReleaseTcpClientLtp\");\r",
															"\r",
															"    let protocol = newReleaseTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
															"    dummyApplicationProtocol = GenerateDummyRemoteProtocol(protocol);\r",
															"    dummyApplicationProtocol = dummyApplicationProtocol.substring(('tcp-client-interface-1-0:PROTOCOL_TYPE_').length);\r",
															"\r",
															"    let dummyIpv4Address = RandomIpAddress();\r",
															"    dummyApplicationAddress = {\r",
															"        \"ip-address\": {\r",
															"            \"ipv-4-address\": dummyIpv4Address\r",
															"        }\r",
															"    };\r",
															"    dummyApplicationPort = RandomTcpPort();\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(error);\r",
															"    console.log(\"! Input Data could not be loaded.\");\r",
															"}\r",
															"\r",
															"/****************************************************************************************\r",
															"* Defining Dummy Parameters\r",
															"****************************************************************************************/\r",
															"var USER_NAME;\r",
															"var ORIGINATOR;\r",
															"var X_CORRELATOR;\r",
															"var TRACE_INDICATOR;\r",
															"var CUSTOMER_JOURNEY;\r",
															"try {\r",
															"    USER_NAME = APPLICATION.userName;\r",
															"    ORIGINATOR = \"Postman\";\r",
															"    X_CORRELATOR = CreateXCorrelator();\r",
															"    TRACE_INDICATOR = \"1\";\r",
															"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
															"    \r",
															"} catch (error) {\r",
															"    console.log(\"! Could not define dummy values for parameters. \");\r",
															"}\r",
															"\r",
															"/****************************************************************************************\r",
															"* Defining Request Body\r",
															"****************************************************************************************/\r",
															"var REQUEST_BODY;\r",
															"try {\r",
															"    REQUEST_BODY = '{'\r",
															"        + '\"new-application-name\" : ' + '\"' + newApplicationName + '\",'\r",
															"        + '\"new-application-release\" : ' + '\"' + dummyNewApplicationRelease + '\",'\r",
															"        + '\"new-application-protocol\" : ' + '\"' + dummyApplicationProtocol + '\",'\r",
															"        + '\"new-application-address\" : ' + JSON.stringify(dummyApplicationAddress) + ','\r",
															"        + '\"new-application-port\" : ' +  dummyApplicationPort\r",
															"    +'}';\r",
															"} catch (error) {\r",
															"    console.log(\"!Could not define request body. \");\r",
															"}\r",
															"/****************************************************************************************\r",
															"* Setting Collection Variables\r",
															"****************************************************************************************/\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Setting Local Variables and Preparing the Request\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    let URI;\r",
															"    URI = APPLICATION.serverUrl + \"/v1/bequeath-your-data-and-die\";\r",
															"\r",
															"    let ACCEPT;\r",
															"    ACCEPT = \"application/json\";\r",
															"\r",
															"    let CONTENT_TYPE;\r",
															"    CONTENT_TYPE = \"application/json\";\r",
															"\r",
															"    pm.variables.clear();\r",
															"\r",
															"    pm.variables.set(\"uri\", URI);\r",
															"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
															"\r",
															"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
															"\r",
															"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
															"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
															"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
															"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
															"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
															"\r",
															"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
															"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(error);\r",
															"    console.log(\"! Local variables could not be set.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/\r",
															"\r",
															"function CreateXCorrelator() {\r",
															"    let xCorrelator;\r",
															"    xCorrelator = \"\";\r",
															"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
															"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
															"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
															"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
															"    xCorrelator += GenerateRandomHexString(12);\r",
															"    return xCorrelator;\r",
															"}\r",
															"\r",
															"function GenerateRandomHexString(length) {\r",
															"    var randomRandomHexString = \"\";\r",
															"    while (randomRandomHexString.length < length) {\r",
															"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
															"    }\r",
															"    return randomRandomHexString.substring(0,length);\r",
															"}\r",
															"\r",
															"function FaultyReleaseNumber() {\r",
															"    let releaseNumber;\r",
															"    let releaseNumberParts = [];\r",
															"    for (let i = 0; i < 4; i++) {\r",
															"        releaseNumberParts[i] = Math.floor(Math.random() * 10);\r",
															"    }\r",
															"    releaseNumber = releaseNumberParts[0] + \".\" + releaseNumberParts[1] + \".\" + releaseNumberParts[2] + \".\" + releaseNumberParts[3];\r",
															"    return releaseNumber;\r",
															"}\r",
															"\r",
															"function RandomIpAddress() {\r",
															"    let randomAddress\r",
															"    let addressParts = [];\r",
															"    for ( let i=0; i<4; i++ ) {\r",
															"        addressParts[i] = String(Math.floor(Math.random() * 256));\r",
															"    }\r",
															"    randomAddress = addressParts[0] + \".\" + addressParts[1] + \".\" + addressParts[2] + \".\" + addressParts[3];\r",
															"    return randomAddress;\r",
															"}\r",
															"\r",
															"function RandomTcpPort() {\r",
															"    let randomPort;\r",
															"    randomPort = 2000 + Math.floor( Math.random() * 1000 );\r",
															"    return randomPort;\r",
															"}\r",
															"\r",
															"function GenerateDummyRemoteProtocol(currentProtocol) {\r",
															"    let alternativeProtocolList;\r",
															"    alternativeProtocolList = [  \"tcp-client-interface-1-0:PROTOCOL_TYPE_HTTP\",\r",
															"                                    \"tcp-client-interface-1-0:PROTOCOL_TYPE_HTTPS\"\r",
															"                                ];\r",
															"    let indexOfCurrentProtocol;\r",
															"    indexOfCurrentProtocol = alternativeProtocolList.indexOf(currentProtocol);\r",
															"    if (indexOfCurrentProtocol > -1) {\r",
															"        alternativeProtocolList.splice(indexOfCurrentProtocol, 1);\r",
															"    }\r",
															"\r",
															"    let alternativeProtocol;\r",
															"    let alternativeProtocolIndex;\r",
															"    alternativeProtocolIndex = Math.floor(Math.random() * alternativeProtocolList.length);\r",
															"    alternativeProtocol = alternativeProtocolList[alternativeProtocolIndex]; \r",
															"\r",
															"    return alternativeProtocol;\r",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Extracting Result\r",
															"****************************************************************************************/\r",
															"var RESPONSE_CODE;\r",
															"try {\r",
															"    let response;\r",
															"    response = pm.response;\r",
															"\r",
															"    RESPONSE_CODE = parseInt(response.code);\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Response Code could not be extracted.\");\r",
															"}    \r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Testing\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    pm.test(\"POST /v1/bequeath-your-data-and-die responds 400, because of too long new-application-release\", function () {\r",
															"        pm.expect(RESPONSE_CODE).to.equal(400);\r",
															"    });\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Testing could not be executed.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-mock-response-code",
														"value": "400",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Expected  /v1/bequeath-your-data-and-die - letters in new-application-release",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n-----  letters in new-application-release -------------------------------\");\r",
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"var APPLICATION;\r",
															"var OPERATION_KEY;\r",
															"var newApplicationName;\r",
															"var dummyNewApplicationRelease;\r",
															"var dummyApplicationProtocol;\r",
															"var dummyApplicationAddress;\r",
															"var dummyApplicationPort\r",
															"try {\r",
															"    APPLICATION = pm.environment.get(\"application\");\r",
															"\r",
															"    let currentOperationServer;\r",
															"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
															"    \r",
															"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
															"\r",
															"    let newReleaseHttpClientLtp;\r",
															"    newReleaseHttpClientLtp = pm.collectionVariables.get(\"newReleaseHttpClientLtp\");\r",
															"\r",
															"    newApplicationName = newReleaseHttpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
															"\r",
															"    dummyNewApplicationRelease = FaultyReleaseNumber()\r",
															"    \r",
															"    let newReleaseTcpClientLtp;\r",
															"    newReleaseTcpClientLtp = pm.collectionVariables.get(\"newReleaseTcpClientLtp\");\r",
															"\r",
															"    let protocol = newReleaseTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
															"    dummyApplicationProtocol = GenerateDummyRemoteProtocol(protocol);\r",
															"    dummyApplicationProtocol = dummyApplicationProtocol.substring(('tcp-client-interface-1-0:PROTOCOL_TYPE_').length);\r",
															"\r",
															"    let dummyIpv4Address = RandomIpAddress();\r",
															"    dummyApplicationAddress = {\r",
															"        \"ip-address\": {\r",
															"            \"ipv-4-address\": dummyIpv4Address\r",
															"        }\r",
															"    };\r",
															"    dummyApplicationPort = RandomTcpPort();\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(error);\r",
															"    console.log(\"! Input Data could not be loaded.\");\r",
															"}\r",
															"\r",
															"/****************************************************************************************\r",
															"* Defining Dummy Parameters\r",
															"****************************************************************************************/\r",
															"var USER_NAME;\r",
															"var ORIGINATOR;\r",
															"var X_CORRELATOR;\r",
															"var TRACE_INDICATOR;\r",
															"var CUSTOMER_JOURNEY;\r",
															"try {\r",
															"    USER_NAME = APPLICATION.userName;\r",
															"    ORIGINATOR = \"Postman\";\r",
															"    X_CORRELATOR = CreateXCorrelator();\r",
															"    TRACE_INDICATOR = \"1\";\r",
															"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
															"    \r",
															"} catch (error) {\r",
															"    console.log(\"! Could not define dummy values for parameters. \");\r",
															"}\r",
															"\r",
															"/****************************************************************************************\r",
															"* Defining Request Body\r",
															"****************************************************************************************/\r",
															"var REQUEST_BODY;\r",
															"try {\r",
															"    REQUEST_BODY = '{'\r",
															"        + '\"new-application-name\" : ' + '\"' + newApplicationName + '\",'\r",
															"        + '\"new-application-release\" : ' + '\"' + dummyNewApplicationRelease + '\",'\r",
															"        + '\"new-application-protocol\" : ' + '\"' + dummyApplicationProtocol + '\",'\r",
															"        + '\"new-application-address\" : ' + JSON.stringify(dummyApplicationAddress) + ','\r",
															"        + '\"new-application-port\" : ' +  dummyApplicationPort\r",
															"    +'}';\r",
															"} catch (error) {\r",
															"    console.log(\"!Could not define request body. \");\r",
															"}\r",
															"/****************************************************************************************\r",
															"* Setting Collection Variables\r",
															"****************************************************************************************/\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Setting Local Variables and Preparing the Request\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    let URI;\r",
															"    URI = APPLICATION.serverUrl + \"/v1/bequeath-your-data-and-die\";\r",
															"\r",
															"    let ACCEPT;\r",
															"    ACCEPT = \"application/json\";\r",
															"\r",
															"    let CONTENT_TYPE;\r",
															"    CONTENT_TYPE = \"application/json\";\r",
															"\r",
															"    pm.variables.clear();\r",
															"\r",
															"    pm.variables.set(\"uri\", URI);\r",
															"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
															"\r",
															"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
															"\r",
															"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
															"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
															"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
															"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
															"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
															"\r",
															"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
															"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(error);\r",
															"    console.log(\"! Local variables could not be set.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/\r",
															"\r",
															"function CreateXCorrelator() {\r",
															"    let xCorrelator;\r",
															"    xCorrelator = \"\";\r",
															"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
															"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
															"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
															"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
															"    xCorrelator += GenerateRandomHexString(12);\r",
															"    return xCorrelator;\r",
															"}\r",
															"\r",
															"function GenerateRandomHexString(length) {\r",
															"    var randomRandomHexString = \"\";\r",
															"    while (randomRandomHexString.length < length) {\r",
															"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
															"    }\r",
															"    return randomRandomHexString.substring(0,length);\r",
															"}\r",
															"\r",
															"function FaultyReleaseNumber() {\r",
															"    let releaseNumber;\r",
															"    let releaseNumberParts = [];\r",
															"    for  (let i=0; i<3 ; i++) {\r",
															"        releaseNumberParts[i] = Math.floor(Math.random() * 10);\r",
															"    }\r",
															"    let characters;\r",
															"    characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\r",
															"    let charactersLength;\r",
															"    charactersLength = characters.length;\r",
															"\r",
															"    let faultyElement;\r",
															"    faultyElement = characters.charAt(Math.floor(Math.random() * charactersLength));\r",
															"\r",
															"    let faultyreleaseNumberPart;\r",
															"    faultyreleaseNumberPart = Math.floor(Math.random() * 3);\r",
															"    releaseNumberParts[faultyreleaseNumberPart] = faultyElement;\r",
															"\r",
															"    releaseNumber = releaseNumberParts[0] + \".\" + releaseNumberParts[1] + \".\" + releaseNumberParts[2];\r",
															"    return releaseNumber;\r",
															"}\r",
															"\r",
															"function RandomIpAddress() {\r",
															"    let randomAddress\r",
															"    let addressParts = [];\r",
															"    for ( let i=0; i<4; i++ ) {\r",
															"        addressParts[i] = String(Math.floor(Math.random() * 256));\r",
															"    }\r",
															"    randomAddress = addressParts[0] + \".\" + addressParts[1] + \".\" + addressParts[2] + \".\" + addressParts[3];\r",
															"    return randomAddress;\r",
															"}\r",
															"\r",
															"function RandomTcpPort() {\r",
															"    let randomPort;\r",
															"    randomPort = 2000 + Math.floor( Math.random() * 1000 );\r",
															"    return randomPort;\r",
															"}\r",
															"\r",
															"function GenerateDummyRemoteProtocol(currentProtocol) {\r",
															"    let alternativeProtocolList;\r",
															"    alternativeProtocolList = [  \"tcp-client-interface-1-0:PROTOCOL_TYPE_HTTP\",\r",
															"                                    \"tcp-client-interface-1-0:PROTOCOL_TYPE_HTTPS\"\r",
															"                                ];\r",
															"    let indexOfCurrentProtocol;\r",
															"    indexOfCurrentProtocol = alternativeProtocolList.indexOf(currentProtocol);\r",
															"    if (indexOfCurrentProtocol > -1) {\r",
															"        alternativeProtocolList.splice(indexOfCurrentProtocol, 1);\r",
															"    }\r",
															"\r",
															"    let alternativeProtocol;\r",
															"    let alternativeProtocolIndex;\r",
															"    alternativeProtocolIndex = Math.floor(Math.random() * alternativeProtocolList.length);\r",
															"    alternativeProtocol = alternativeProtocolList[alternativeProtocolIndex]; \r",
															"\r",
															"    return alternativeProtocol;\r",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Extracting Result\r",
															"****************************************************************************************/\r",
															"var RESPONSE_CODE;\r",
															"try {\r",
															"    let response;\r",
															"    response = pm.response;\r",
															"\r",
															"    RESPONSE_CODE = parseInt(response.code);\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Response Code could not be extracted.\");\r",
															"}    \r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Testing\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    pm.test(\"POST /v1/bequeath-your-data-and-die responds 400, because of letters in new-application-release\", function () {\r",
															"        pm.expect(RESPONSE_CODE).to.equal(400);\r",
															"    });\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Testing could not be executed.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-mock-response-code",
														"value": "400",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Expected   /v1/bequeath-your-data-and-die - sign in new-application-release",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n-----  sign in new-application-release -------------------------------\");\r",
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"var APPLICATION;\r",
															"var OPERATION_KEY;\r",
															"var newApplicationName;\r",
															"var dummyNewApplicationRelease;\r",
															"var dummyApplicationProtocol;\r",
															"var dummyApplicationAddress;\r",
															"var dummyApplicationPort\r",
															"try {\r",
															"    APPLICATION = pm.environment.get(\"application\");\r",
															"\r",
															"    let currentOperationServer;\r",
															"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
															"    \r",
															"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
															"\r",
															"    let newReleaseHttpClientLtp;\r",
															"    newReleaseHttpClientLtp = pm.collectionVariables.get(\"newReleaseHttpClientLtp\");\r",
															"\r",
															"    newApplicationName = newReleaseHttpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
															"\r",
															"    dummyNewApplicationRelease = FaultyReleaseNumber()\r",
															"\r",
															"    let newReleaseTcpClientLtp;\r",
															"    newReleaseTcpClientLtp = pm.collectionVariables.get(\"newReleaseTcpClientLtp\");\r",
															"\r",
															"    let protocol = newReleaseTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
															"    dummyApplicationProtocol = GenerateDummyRemoteProtocol(protocol);\r",
															"    dummyApplicationProtocol = dummyApplicationProtocol.substring(('tcp-client-interface-1-0:PROTOCOL_TYPE_').length);\r",
															"\r",
															"    let dummyIpv4Address = RandomIpAddress();\r",
															"    dummyApplicationAddress = {\r",
															"        \"ip-address\": {\r",
															"            \"ipv-4-address\": dummyIpv4Address\r",
															"        }\r",
															"    };\r",
															"    dummyApplicationPort = RandomTcpPort();\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(error);\r",
															"    console.log(\"! Input Data could not be loaded.\");\r",
															"}\r",
															"\r",
															"/****************************************************************************************\r",
															"* Defining Dummy Parameters\r",
															"****************************************************************************************/\r",
															"var USER_NAME;\r",
															"var ORIGINATOR;\r",
															"var X_CORRELATOR;\r",
															"var TRACE_INDICATOR;\r",
															"var CUSTOMER_JOURNEY;\r",
															"try {\r",
															"    USER_NAME = APPLICATION.userName;\r",
															"    ORIGINATOR = \"Postman\";\r",
															"    X_CORRELATOR = CreateXCorrelator();\r",
															"    TRACE_INDICATOR = \"1\";\r",
															"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
															"    \r",
															"} catch (error) {\r",
															"    console.log(\"! Could not define dummy values for parameters. \");\r",
															"}\r",
															"\r",
															"/****************************************************************************************\r",
															"* Defining Request Body\r",
															"****************************************************************************************/\r",
															"var REQUEST_BODY;\r",
															"try {\r",
															"    REQUEST_BODY = '{'\r",
															"        + '\"new-application-name\" : ' + '\"' + newApplicationName + '\",'\r",
															"        + '\"new-application-release\" : ' + '\"' + dummyNewApplicationRelease + '\",'\r",
															"        + '\"new-application-protocol\" : ' + '\"' + dummyApplicationProtocol + '\",'\r",
															"        + '\"new-application-address\" : ' + JSON.stringify(dummyApplicationAddress) + ','\r",
															"        + '\"new-application-port\" : ' +  dummyApplicationPort\r",
															"    +'}';\r",
															"} catch (error) {\r",
															"    console.log(\"!Could not define request body. \");\r",
															"}\r",
															"/****************************************************************************************\r",
															"* Setting Collection Variables\r",
															"****************************************************************************************/\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Setting Local Variables and Preparing the Request\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    let URI;\r",
															"    URI = APPLICATION.serverUrl + \"/v1/bequeath-your-data-and-die\";\r",
															"\r",
															"    let ACCEPT;\r",
															"    ACCEPT = \"application/json\";\r",
															"\r",
															"    let CONTENT_TYPE;\r",
															"    CONTENT_TYPE = \"application/json\";\r",
															"\r",
															"    pm.variables.clear();\r",
															"\r",
															"    pm.variables.set(\"uri\", URI);\r",
															"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
															"\r",
															"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
															"\r",
															"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
															"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
															"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
															"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
															"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
															"\r",
															"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
															"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(error);\r",
															"    console.log(\"! Local variables could not be set.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/\r",
															"\r",
															"function CreateXCorrelator() {\r",
															"    let xCorrelator;\r",
															"    xCorrelator = \"\";\r",
															"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
															"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
															"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
															"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
															"    xCorrelator += GenerateRandomHexString(12);\r",
															"    return xCorrelator;\r",
															"}\r",
															"\r",
															"function GenerateRandomHexString(length) {\r",
															"    var randomRandomHexString = \"\";\r",
															"    while (randomRandomHexString.length < length) {\r",
															"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
															"    }\r",
															"    return randomRandomHexString.substring(0,length);\r",
															"}\r",
															"\r",
															"function FaultyReleaseNumber() {\r",
															"    let releaseNumber;\r",
															"    let releaseNumberParts = [];\r",
															"    for  (let i=0; i<3 ; i++) {\r",
															"        releaseNumberParts[i] = Math.floor(Math.random() * 10);\r",
															"    }\r",
															"    let faultyElement;\r",
															"    faultyElement = Math.random() < 0.5 ? '-' : '+' ;\r",
															"    releaseNumber = faultyElement + releaseNumberParts[0] + \".\" + releaseNumberParts[1] + \".\" + releaseNumberParts[2];\r",
															"    return releaseNumber;\r",
															"}\r",
															"\r",
															"function RandomIpAddress() {\r",
															"    let randomAddress\r",
															"    let addressParts = [];\r",
															"    for ( let i=0; i<4; i++ ) {\r",
															"        addressParts[i] = String(Math.floor(Math.random() * 256));\r",
															"    }\r",
															"    randomAddress = addressParts[0] + \".\" + addressParts[1] + \".\" + addressParts[2] + \".\" + addressParts[3];\r",
															"    return randomAddress;\r",
															"}\r",
															"\r",
															"function RandomTcpPort() {\r",
															"    let randomPort;\r",
															"    randomPort = 2000 + Math.floor( Math.random() * 1000 );\r",
															"    return randomPort;\r",
															"}\r",
															"\r",
															"function GenerateDummyRemoteProtocol(currentProtocol) {\r",
															"    let alternativeProtocolList;\r",
															"    alternativeProtocolList = [  \"tcp-client-interface-1-0:PROTOCOL_TYPE_HTTP\",\r",
															"                                    \"tcp-client-interface-1-0:PROTOCOL_TYPE_HTTPS\"\r",
															"                                ];\r",
															"    let indexOfCurrentProtocol;\r",
															"    indexOfCurrentProtocol = alternativeProtocolList.indexOf(currentProtocol);\r",
															"    if (indexOfCurrentProtocol > -1) {\r",
															"        alternativeProtocolList.splice(indexOfCurrentProtocol, 1);\r",
															"    }\r",
															"\r",
															"    let alternativeProtocol;\r",
															"    let alternativeProtocolIndex;\r",
															"    alternativeProtocolIndex = Math.floor(Math.random() * alternativeProtocolList.length);\r",
															"    alternativeProtocol = alternativeProtocolList[alternativeProtocolIndex]; \r",
															"\r",
															"    return alternativeProtocol;\r",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Extracting Result\r",
															"****************************************************************************************/\r",
															"var RESPONSE_CODE;\r",
															"try {\r",
															"    let response;\r",
															"    response = pm.response;\r",
															"\r",
															"    RESPONSE_CODE = parseInt(response.code);\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Response Code could not be extracted.\");\r",
															"}    \r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Testing\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    pm.test(\"POST /v1/bequeath-your-data-and-die responds 400, because of sign in new-application-release\", function () {\r",
															"        pm.expect(RESPONSE_CODE).to.equal(400);\r",
															"    });\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Testing could not be executed.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-mock-response-code",
														"value": "400",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Expected  /v1/bequeath-your-data-and-die - incorrect separator in new-application-release",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n-----  incorrect separators in new-application-release -------------------------------\");\r",
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"var APPLICATION;\r",
															"var OPERATION_KEY;\r",
															"var newApplicationName;\r",
															"var dummyNewApplicationRelease;\r",
															"var dummyApplicationProtocol;\r",
															"var dummyApplicationAddress;\r",
															"var dummyApplicationPort\r",
															"try {\r",
															"    APPLICATION = pm.environment.get(\"application\");\r",
															"\r",
															"    let currentOperationServer;\r",
															"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
															"    \r",
															"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
															"\r",
															"    let newReleaseHttpClientLtp;\r",
															"    newReleaseHttpClientLtp = pm.collectionVariables.get(\"newReleaseHttpClientLtp\");\r",
															"\r",
															"    newApplicationName = newReleaseHttpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
															"\r",
															"    dummyNewApplicationRelease = FaultyReleaseNumber()\r",
															"\r",
															"    let newReleaseTcpClientLtp;\r",
															"    newReleaseTcpClientLtp = pm.collectionVariables.get(\"newReleaseTcpClientLtp\");\r",
															"\r",
															"    let protocol = newReleaseTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
															"    dummyApplicationProtocol = GenerateDummyRemoteProtocol(protocol);\r",
															"    dummyApplicationProtocol = dummyApplicationProtocol.substring(('tcp-client-interface-1-0:PROTOCOL_TYPE_').length);\r",
															"\r",
															"    let dummyIpv4Address = RandomIpAddress();\r",
															"    dummyApplicationAddress = {\r",
															"        \"ip-address\": {\r",
															"            \"ipv-4-address\": dummyIpv4Address\r",
															"        }\r",
															"    };\r",
															"    dummyApplicationPort = RandomTcpPort();\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(error);\r",
															"    console.log(\"! Input Data could not be loaded.\");\r",
															"}\r",
															"\r",
															"/****************************************************************************************\r",
															"* Defining Dummy Parameters\r",
															"****************************************************************************************/\r",
															"var USER_NAME;\r",
															"var ORIGINATOR;\r",
															"var X_CORRELATOR;\r",
															"var TRACE_INDICATOR;\r",
															"var CUSTOMER_JOURNEY;\r",
															"try {\r",
															"    USER_NAME = APPLICATION.userName;\r",
															"    ORIGINATOR = \"Postman\";\r",
															"    X_CORRELATOR = CreateXCorrelator();\r",
															"    TRACE_INDICATOR = \"1\";\r",
															"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
															"    \r",
															"} catch (error) {\r",
															"    console.log(\"! Could not define dummy values for parameters. \");\r",
															"}\r",
															"\r",
															"/****************************************************************************************\r",
															"* Defining Request Body\r",
															"****************************************************************************************/\r",
															"var REQUEST_BODY;\r",
															"try {\r",
															"    REQUEST_BODY = '{'\r",
															"        + '\"new-application-name\" : ' + '\"' + newApplicationName + '\",'\r",
															"        + '\"new-application-release\" : ' + '\"' + dummyNewApplicationRelease + '\",'\r",
															"        + '\"new-application-protocol\" : ' + '\"' + dummyApplicationProtocol + '\",'\r",
															"        + '\"new-application-address\" : ' + JSON.stringify(dummyApplicationAddress) + ','\r",
															"        + '\"new-application-port\" : ' +  dummyApplicationPort\r",
															"    +'}';\r",
															"} catch (error) {\r",
															"    console.log(\"!Could not define request body. \");\r",
															"}\r",
															"/****************************************************************************************\r",
															"* Setting Collection Variables\r",
															"****************************************************************************************/\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Setting Local Variables and Preparing the Request\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    let URI;\r",
															"    URI = APPLICATION.serverUrl + \"/v1/bequeath-your-data-and-die\";\r",
															"\r",
															"    let ACCEPT;\r",
															"    ACCEPT = \"application/json\";\r",
															"\r",
															"    let CONTENT_TYPE;\r",
															"    CONTENT_TYPE = \"application/json\";\r",
															"\r",
															"    pm.variables.clear();\r",
															"\r",
															"    pm.variables.set(\"uri\", URI);\r",
															"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
															"\r",
															"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
															"\r",
															"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
															"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
															"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
															"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
															"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
															"\r",
															"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
															"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(error);\r",
															"    console.log(\"! Local variables could not be set.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/\r",
															"\r",
															"function CreateXCorrelator() {\r",
															"    let xCorrelator;\r",
															"    xCorrelator = \"\";\r",
															"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
															"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
															"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
															"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
															"    xCorrelator += GenerateRandomHexString(12);\r",
															"    return xCorrelator;\r",
															"}\r",
															"\r",
															"function GenerateRandomHexString(length) {\r",
															"    var randomRandomHexString = \"\";\r",
															"    while (randomRandomHexString.length < length) {\r",
															"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
															"    }\r",
															"    return randomRandomHexString.substring(0,length);\r",
															"}\r",
															"\r",
															"function FaultyReleaseNumber() {\r",
															"    let releaseNumber;\r",
															"    releaseNumber = \"\";\r",
															"    let releaseNumberParts;\r",
															"    releaseNumberParts = [];\r",
															"    for(let i=0; i<3; i++) {\r",
															"        releaseNumberParts[i] = Math.floor(Math.random() * 10);\r",
															"    }\r",
															"    let separators;\r",
															"    separators = \"-:;/\";\r",
															"    let separatorsLength;\r",
															"    separatorsLength = separators.length;\r",
															"    let faultySeparator;\r",
															"    faultySeparator = separators.charAt(Math.floor(Math.random() * separatorsLength));\r",
															"    releaseNumber = releaseNumberParts.join(faultySeparator);\r",
															"    return releaseNumber;\r",
															"}\r",
															"\r",
															"function RandomIpAddress() {\r",
															"    let randomAddress\r",
															"    let addressParts = [];\r",
															"    for ( let i=0; i<4; i++ ) {\r",
															"        addressParts[i] = String(Math.floor(Math.random() * 256));\r",
															"    }\r",
															"    randomAddress = addressParts[0] + \".\" + addressParts[1] + \".\" + addressParts[2] + \".\" + addressParts[3];\r",
															"    return randomAddress;\r",
															"}\r",
															"\r",
															"function RandomTcpPort() {\r",
															"    let randomPort;\r",
															"    randomPort = 2000 + Math.floor( Math.random() * 1000 );\r",
															"    return randomPort;\r",
															"}\r",
															"\r",
															"function GenerateDummyRemoteProtocol(currentProtocol) {\r",
															"    let alternativeProtocolList;\r",
															"    alternativeProtocolList = [  \"tcp-client-interface-1-0:PROTOCOL_TYPE_HTTP\",\r",
															"                                    \"tcp-client-interface-1-0:PROTOCOL_TYPE_HTTPS\"\r",
															"                                ];\r",
															"    let indexOfCurrentProtocol;\r",
															"    indexOfCurrentProtocol = alternativeProtocolList.indexOf(currentProtocol);\r",
															"    if (indexOfCurrentProtocol > -1) {\r",
															"        alternativeProtocolList.splice(indexOfCurrentProtocol, 1);\r",
															"    }\r",
															"\r",
															"    let alternativeProtocol;\r",
															"    let alternativeProtocolIndex;\r",
															"    alternativeProtocolIndex = Math.floor(Math.random() * alternativeProtocolList.length);\r",
															"    alternativeProtocol = alternativeProtocolList[alternativeProtocolIndex]; \r",
															"\r",
															"    return alternativeProtocol;\r",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Extracting Result\r",
															"****************************************************************************************/\r",
															"var RESPONSE_CODE;\r",
															"try {\r",
															"    let response;\r",
															"    response = pm.response;\r",
															"\r",
															"    RESPONSE_CODE = parseInt(response.code);\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Response Code could not be extracted.\");\r",
															"}    \r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Testing\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    pm.test(\"POST /v1/bequeath-your-data-and-die responds 400, because of incorrect separator in new-application-release\", function () {\r",
															"        pm.expect(RESPONSE_CODE).to.equal(400);\r",
															"    });\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Testing could not be executed.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-mock-response-code",
														"value": "400",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Expected /v1/bequeath-your-data-and-die - multiple digit in placeholder of new-application-release",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n-----  multiple digit in placeholder of new-application-release -------------------------------\");\r",
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"var APPLICATION;\r",
															"var OPERATION_KEY;\r",
															"var newApplicationName;\r",
															"var dummyNewApplicationRelease;\r",
															"var dummyApplicationProtocol;\r",
															"var dummyApplicationAddress;\r",
															"var dummyApplicationPort\r",
															"try {\r",
															"    APPLICATION = pm.environment.get(\"application\");\r",
															"\r",
															"    let currentOperationServer;\r",
															"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
															"    \r",
															"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
															"    \r",
															"    let newReleaseHttpClientLtp;\r",
															"    newReleaseHttpClientLtp = pm.collectionVariables.get(\"newReleaseHttpClientLtp\");\r",
															"\r",
															"    newApplicationName = newReleaseHttpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
															"\r",
															"    dummyNewApplicationRelease = FaultyReleaseNumber()\r",
															"\r",
															"    let newReleaseTcpClientLtp;\r",
															"    newReleaseTcpClientLtp = pm.collectionVariables.get(\"newReleaseTcpClientLtp\");\r",
															"\r",
															"    let protocol = newReleaseTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
															"    dummyApplicationProtocol = GenerateDummyRemoteProtocol(protocol);\r",
															"    dummyApplicationProtocol = dummyApplicationProtocol.substring(('tcp-client-interface-1-0:PROTOCOL_TYPE_').length);\r",
															"\r",
															"    let dummyIpv4Address = RandomIpAddress();\r",
															"    dummyApplicationAddress = {\r",
															"        \"ip-address\": {\r",
															"            \"ipv-4-address\": dummyIpv4Address\r",
															"        }\r",
															"    };\r",
															"    dummyApplicationPort = RandomTcpPort();\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(error);\r",
															"    console.log(\"! Input Data could not be loaded.\");\r",
															"}\r",
															"\r",
															"/****************************************************************************************\r",
															"* Defining Dummy Parameters\r",
															"****************************************************************************************/\r",
															"var USER_NAME;\r",
															"var ORIGINATOR;\r",
															"var X_CORRELATOR;\r",
															"var TRACE_INDICATOR;\r",
															"var CUSTOMER_JOURNEY;\r",
															"try {\r",
															"    USER_NAME = APPLICATION.userName;\r",
															"    ORIGINATOR = \"Postman\";\r",
															"    X_CORRELATOR = CreateXCorrelator();\r",
															"    TRACE_INDICATOR = \"1\";\r",
															"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
															"    \r",
															"} catch (error) {\r",
															"    console.log(\"! Could not define dummy values for parameters. \");\r",
															"}\r",
															"\r",
															"/****************************************************************************************\r",
															"* Defining Request Body\r",
															"****************************************************************************************/\r",
															"var REQUEST_BODY;\r",
															"try {\r",
															"    REQUEST_BODY = '{'\r",
															"        + '\"new-application-name\" : ' + '\"' + newApplicationName + '\",'\r",
															"        + '\"new-application-release\" : ' + '\"' + dummyNewApplicationRelease + '\",'\r",
															"        + '\"new-application-protocol\" : ' + '\"' + dummyApplicationProtocol + '\",'\r",
															"        + '\"new-application-address\" : ' + JSON.stringify(dummyApplicationAddress) + ','\r",
															"        + '\"new-application-port\" : ' +  dummyApplicationPort\r",
															"    +'}';\r",
															"} catch (error) {\r",
															"    console.log(\"!Could not define request body. \");\r",
															"}\r",
															"/****************************************************************************************\r",
															"* Setting Collection Variables\r",
															"****************************************************************************************/\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Setting Local Variables and Preparing the Request\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    let URI;\r",
															"    URI = APPLICATION.serverUrl + \"/v1/bequeath-your-data-and-die\";\r",
															"\r",
															"    let ACCEPT;\r",
															"    ACCEPT = \"application/json\";\r",
															"\r",
															"    let CONTENT_TYPE;\r",
															"    CONTENT_TYPE = \"application/json\";\r",
															"\r",
															"    pm.variables.clear();\r",
															"\r",
															"    pm.variables.set(\"uri\", URI);\r",
															"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
															"\r",
															"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
															"\r",
															"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
															"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
															"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
															"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
															"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
															"\r",
															"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
															"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(error);\r",
															"    console.log(\"! Local variables could not be set.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/\r",
															"\r",
															"function CreateXCorrelator() {\r",
															"    let xCorrelator;\r",
															"    xCorrelator = \"\";\r",
															"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
															"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
															"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
															"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
															"    xCorrelator += GenerateRandomHexString(12);\r",
															"    return xCorrelator;\r",
															"}\r",
															"\r",
															"function GenerateRandomHexString(length) {\r",
															"    var randomRandomHexString = \"\";\r",
															"    while (randomRandomHexString.length < length) {\r",
															"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
															"    }\r",
															"    return randomRandomHexString.substring(0,length);\r",
															"}\r",
															"\r",
															"function RandomIpAddress() {\r",
															"    let randomAddress\r",
															"    let addressParts = [];\r",
															"    for ( let i=0; i<4; i++ ) {\r",
															"        addressParts[i] = String(Math.floor(Math.random() * 256));\r",
															"    }\r",
															"    randomAddress = addressParts[0] + \".\" + addressParts[1] + \".\" + addressParts[2] + \".\" + addressParts[3];\r",
															"    return randomAddress;\r",
															"}\r",
															"\r",
															"function RandomTcpPort() {\r",
															"    let randomPort;\r",
															"    randomPort = 2000 + Math.floor( Math.random() * 1000 );\r",
															"    return randomPort;\r",
															"}\r",
															"\r",
															"function GenerateDummyRemoteProtocol(currentProtocol) {\r",
															"    let alternativeProtocolList;\r",
															"    alternativeProtocolList = [  \"tcp-client-interface-1-0:PROTOCOL_TYPE_HTTP\",\r",
															"                                    \"tcp-client-interface-1-0:PROTOCOL_TYPE_HTTPS\"\r",
															"                                ];\r",
															"    let indexOfCurrentProtocol;\r",
															"    indexOfCurrentProtocol = alternativeProtocolList.indexOf(currentProtocol);\r",
															"    if (indexOfCurrentProtocol > -1) {\r",
															"        alternativeProtocolList.splice(indexOfCurrentProtocol, 1);\r",
															"    }\r",
															"\r",
															"    let alternativeProtocol;\r",
															"    let alternativeProtocolIndex;\r",
															"    alternativeProtocolIndex = Math.floor(Math.random() * alternativeProtocolList.length);\r",
															"    alternativeProtocol = alternativeProtocolList[alternativeProtocolIndex]; \r",
															"\r",
															"    return alternativeProtocol;\r",
															"}\r",
															"\r",
															"function FaultyReleaseNumber() {\r",
															"    let releaseNumber;\r",
															"    releaseNumber = \"\";\r",
															"    let releaseNumberParts;\r",
															"    releaseNumberParts = [];\r",
															"    for(let i=0; i<3; i++) {\r",
															"        releaseNumberParts[i] = Math.floor(Math.random() * 10);\r",
															"    }\r",
															"    let randomFaultyLength = Math.floor(3 + Math.random() * 7);\r",
															"    let faultyElement = Math.floor(Math.pow(10, randomFaultyLength-1) + Math.random() * (Math.pow(10, randomFaultyLength) - Math.pow(10, randomFaultyLength-1) - 1));\r",
															"\r",
															"    let faultyreleaseNumberPart;\r",
															"    faultyreleaseNumberPart = Math.floor(Math.random() * 3);\r",
															"    releaseNumberParts[faultyreleaseNumberPart] = faultyElement;\r",
															"\r",
															"    releaseNumber = releaseNumberParts[0] + \".\" + releaseNumberParts[1] + \".\" + releaseNumberParts[2];\r",
															"    return releaseNumber;\r",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Extracting Result\r",
															"****************************************************************************************/\r",
															"var RESPONSE_CODE;\r",
															"try {\r",
															"    let response;\r",
															"    response = pm.response;\r",
															"\r",
															"    RESPONSE_CODE = parseInt(response.code);\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Response Code could not be extracted.\");\r",
															"}    \r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Testing\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    pm.test(\"POST /v1/regard-application responds 400, because of multiple digit in placeholder of new-application-release\", function () {\r",
															"        pm.expect(RESPONSE_CODE).to.equal(400);\r",
															"    });\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Testing could not be executed.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-mock-response-code",
														"value": "400",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"description": "## Get new-application-release checked for correctness?\n#### Preparation:\n- GETing CC (/core-model-1-4:control-construct)\n  - searching CC for op-s of /v1/bequeath-your-data-and-die, storing operation-key\n  - searcing CC for output port of PromptForBequeathingDataCausesTransferOfListOfApplications, find corresponding op-c, http-c and tcp-c, store them\n- POST /v1/bequeath-your-data-and-die with\n  - new-application-name according to chosen http-c\n  - new-application-protocol, new-application-address and new-application-port with random generated dummy values (assure sufficiently high probability that set does not exist!), BUT new-application-release attribute with random dummy value(differing from specification in many ways)\n  - operation-key from above\n  - reasonable parameters\n\n#### Testing:\n- checking for ResponseCode==400\n\n#### Clearing:\n- not applicable"
								},
								{
									"name": "new-application-protocol checked?",
									"item": [
										{
											"name": "reference /core-model-1-4:control-construct",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n-----  /v1/bequeath-your-data-and-die acceptance -- new-application-protocol attribute checked? -------------------------------\");\r",
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"var APPLICATION;\r",
															"try {\r",
															"    APPLICATION = pm.environment.get(\"application\");\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Environment variables could not be loaded.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Setting Local Variables and Preparing the Request\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    let URI;\r",
															"    URI = APPLICATION.serverUrl + \"/core-model-1-4:control-construct\";\r",
															"\r",
															"    let REQUEST_BODY;\r",
															"    REQUEST_BODY = \"\";\r",
															"\r",
															"    let AUTHORIZATION;\r",
															"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
															"\r",
															"    let ACCEPT;\r",
															"    ACCEPT = \"application/json\";\r",
															"\r",
															"    let CONTENT_TYPE;\r",
															"    CONTENT_TYPE = \"application/json\";\r",
															"\r",
															"\r",
															"    pm.variables.clear();\r",
															"\r",
															"    pm.variables.set(\"uri\", URI);\r",
															"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
															"\r",
															"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
															"\r",
															"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
															"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Local variables could not be set.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Extracting Result\r",
															"****************************************************************************************/\r",
															"var ltpList;\r",
															"var fcList;\r",
															"try {\r",
															"    let response;\r",
															"    response = pm.response;\r",
															"    \r",
															"    let responseCode;\r",
															"    responseCode = parseInt(response.code);\r",
															"    \r",
															"    if ( Math.floor(responseCode/100) === 2 ) {\r",
															"        let responseObject;\r",
															"        responseObject = JSON.parse(response.stream);\r",
															"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
															"        fcList = responseObject[\"core-model-1-4:control-construct\"][\"forwarding-domain\"][0][\"forwarding-construct\"];\r",
															"\r",
															"    } else {\r",
															"        ltpList = [];\r",
															"        fcList = [];\r",
															"    }\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! ltpList could not be extracted.\");\r",
															"}\r",
															"\r",
															"var currentOperationServer;\r",
															"var newReleaseHttpClientLtp;\r",
															"var newReleaseTcpClientLtp;\r",
															"try {\r",
															"    currentOperationServer = FindOperationServer(\"/v1/bequeath-your-data-and-die\", ltpList);\r",
															"\r",
															"    //Bequeath Transfer Of List Of Applications\r",
															"    let bequeathingDataCausesTransferOfListOfApplicationsOperationClientLtp = FindOperationClientUsingCallback(\"PromptForBequeathingDataCausesTransferOfListOfApplications\", fcList, ltpList)\r",
															"\r",
															"    newReleaseHttpClientLtp = FindServingLtp(bequeathingDataCausesTransferOfListOfApplicationsOperationClientLtp, ltpList);\r",
															"    newReleaseTcpClientLtp = FindServingLtp(newReleaseHttpClientLtp, ltpList); \r",
															"} catch (error) {\r",
															"    console.log(error);\r",
															"    console.log(\"! Reference objects could not be extracted.\");\r",
															"} \r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Setting Collection Variables\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    pm.collectionVariables.clear();\r",
															"    \r",
															"    pm.collectionVariables.set(\"currentOperationServer\", currentOperationServer);\r",
															"    pm.collectionVariables.set(\"newReleaseHttpClientLtp\", newReleaseHttpClientLtp);\r",
															"    pm.collectionVariables.set(\"newReleaseTcpClientLtp\", newReleaseTcpClientLtp);\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Collection variables could not be set.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/\r",
															"\r",
															"function FindOperationServer(operationName, ltpList) {\r",
															"    let operationServer;\r",
															"    operationServer = \"\";\r",
															"    try {\r",
															"        let sampleUuid;\r",
															"        for(let i=0; i<ltpList.length; i++) {\r",
															"            sampleUuid = ltpList[i][\"uuid\"];\r",
															"            if(sampleUuid.includes(\"op-s-\")) {\r",
															"                let sampleOperationName;\r",
															"                sampleOperationName = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
															"                if(sampleOperationName == operationName) {\r",
															"                    operationServer = ltpList[i];\r",
															"                    return operationServer;\r",
															"                }\r",
															"            }\r",
															"        }\r",
															"    } catch (error) {\r",
															"        console.log(\"! Exception in function : FindOperationServer. \");\r",
															"    }\r",
															"    return operationServer;\r",
															"}\r",
															"\r",
															"function FindOutputFcPortList(forwardingName, fcList) {\r",
															"    let outputFcPortList;\r",
															"    outputFcPortList = [];\r",
															"    try {\r",
															"        for( let i=0; i<fcList.length; i++ ) {\r",
															"            for(let j=0; j<fcList[i][\"name\"].length; j++) {               \r",
															"                if(fcList[i][\"name\"][j][\"value\"] == forwardingName) {\r",
															"                    fcPortList = fcList[i][\"fc-port\"];\r",
															"                    for(let k=0;k<fcPortList.length;k++) {\r",
															"                        if(fcPortList[k][\"port-direction\"] == \"core-model-1-4:PORT_DIRECTION_TYPE_OUTPUT\") {\r",
															"                            outputFcPortList.push(fcPortList[k]);\r",
															"                        }\r",
															"                    }\r",
															"                    return outputFcPortList;\r",
															"                }\r",
															"            }\r",
															"        }\r",
															"    } catch (error) {\r",
															"        console.log(\"! Exception in function FindOutputFcPortList. \");\r",
															"    }\r",
															"    return outputFcPortList;\r",
															"}\r",
															"\r",
															"function FindActualInstanceByUuid(expectedUuid, actualLtpList) {\r",
															"    let actualInstance;\r",
															"    actualInstance = {};\r",
															"    try {\r",
															"        for ( let i=0; i<actualLtpList.length; i++ ) {\r",
															"            let sampleUuid;\r",
															"            sampleUuid = actualLtpList[i][\"uuid\"];\r",
															"            if( sampleUuid == expectedUuid ) {\r",
															"                actualInstance = actualLtpList[i];\r",
															"                return actualInstance;\r",
															"            }\r",
															"        }\r",
															"\r",
															"    } catch (error) {\r",
															"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
															"    }\r",
															"    return undefined;\r",
															"}\r",
															"\r",
															"function FindServingLtp(clientLtp, ltpList) {\r",
															"    let servingLtp;\r",
															"    servingLtp = {};\r",
															"    try{\r",
															"        let serverLtpUuid;\r",
															"        serverLtpUuid = clientLtp[\"server-ltp\"][0];\r",
															"        for( let i=0; i<ltpList.length; i++ ) {\r",
															"            let sampleUuid;\r",
															"            sampleUuid = ltpList[i][\"uuid\"];\r",
															"            if( sampleUuid == serverLtpUuid ) {\r",
															"                servingLtp = ltpList[i];\r",
															"                return servingLtp;\r",
															"            }\r",
															"        }\r",
															"    } catch(error) {\r",
															"        console.log(error);\r",
															"        console.log(\"! Exception in function : FindServingLtp. \")\r",
															"    }\r",
															"    return servingLtp;\r",
															"}\r",
															"\r",
															"function FindOperationClientUsingCallback(callback, fcList, ltpList) {\r",
															"    let operationClientLtp\r",
															"    try {\r",
															"        let outputFcPortList = FindOutputFcPortList(callback, fcList);\r",
															"        let randomOutputFcPort = outputFcPortList[Math.floor(Math.random() * outputFcPortList.length)];\r",
															"        let outputLtpUuid = randomOutputFcPort[\"logical-termination-point\"];\r",
															"        operationClientLtp = FindActualInstanceByUuid(outputLtpUuid, ltpList);\r",
															"    } catch (error) {\r",
															"        console.log(error);\r",
															"        console.log(\"! Exception in function FindOperationClientUsingCallback. \");\r",
															"    }\r",
															"    return  operationClientLtp\r",
															"}\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "x-mock-response-code",
														"value": "200",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Expected  /v1/bequeath-your-data-and-die - random string new-application-protocol",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n-----  random string new-application-protocol -------------------------------\");\r",
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"var APPLICATION;\r",
															"var OPERATION_KEY;\r",
															"var newApplicationName;\r",
															"var newApplicationRelease;\r",
															"var dummyApplicationProtocol;\r",
															"var dummyApplicationAddress;\r",
															"var dummyApplicationPort;\r",
															"try {\r",
															"    APPLICATION = pm.environment.get(\"application\");\r",
															"\r",
															"    let currentOperationServer;\r",
															"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
															"    \r",
															"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
															"\r",
															"    let newReleaseHttpClientLtp;\r",
															"    newReleaseHttpClientLtp = pm.collectionVariables.get(\"newReleaseHttpClientLtp\");\r",
															"\r",
															"    newApplicationName = newReleaseHttpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
															"\r",
															"    newApplicationRelease = newReleaseHttpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"release-number\"];\r",
															"\r",
															"    dummyApplicationProtocol = GenerateRandomString(12);\r",
															"\r",
															"    let dummyIpv4Address = RandomIpAddress();\r",
															"    dummyApplicationAddress = {\r",
															"        \"ip-address\": {\r",
															"            \"ipv-4-address\": dummyIpv4Address\r",
															"        }\r",
															"    };\r",
															"\r",
															"    dummyApplicationPort = RandomTcpPort();\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(error);\r",
															"    console.log(\"! Input Data could not be loaded.\");\r",
															"}\r",
															"\r",
															"/****************************************************************************************\r",
															"* Defining Dummy Parameters\r",
															"****************************************************************************************/\r",
															"var USER_NAME;\r",
															"var ORIGINATOR;\r",
															"var X_CORRELATOR;\r",
															"var TRACE_INDICATOR;\r",
															"var CUSTOMER_JOURNEY;\r",
															"try {\r",
															"    USER_NAME = APPLICATION.userName;\r",
															"    ORIGINATOR = \"Postman\";\r",
															"    X_CORRELATOR = CreateXCorrelator();\r",
															"    TRACE_INDICATOR = \"1\";\r",
															"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
															"    \r",
															"} catch (error) {\r",
															"    console.log(\"! Could not define dummy values for parameters. \");\r",
															"}\r",
															"\r",
															"/****************************************************************************************\r",
															"* Defining Request Body\r",
															"****************************************************************************************/\r",
															"var REQUEST_BODY;\r",
															"try {\r",
															"    REQUEST_BODY = '{'\r",
															"        + '\"new-application-name\" : ' + '\"' + newApplicationName + '\",'\r",
															"        + '\"new-application-release\" : ' + '\"' + newApplicationRelease + '\",'\r",
															"        + '\"new-application-protocol\" : ' + '\"' + dummyApplicationProtocol + '\",'\r",
															"        + '\"new-application-address\" : ' + JSON.stringify(dummyApplicationAddress) + ','\r",
															"        + '\"new-application-port\" : ' +  dummyApplicationPort\r",
															"    +'}';\r",
															"} catch (error) {\r",
															"    console.log(\"!Could not define request body. \");\r",
															"}\r",
															"/****************************************************************************************\r",
															"* Setting Collection Variables\r",
															"****************************************************************************************/\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Setting Local Variables and Preparing the Request\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    let URI;\r",
															"    URI = APPLICATION.serverUrl + \"/v1/bequeath-your-data-and-die\";\r",
															"\r",
															"    let ACCEPT;\r",
															"    ACCEPT = \"application/json\";\r",
															"\r",
															"    let CONTENT_TYPE;\r",
															"    CONTENT_TYPE = \"application/json\";\r",
															"\r",
															"    pm.variables.clear();\r",
															"\r",
															"    pm.variables.set(\"uri\", URI);\r",
															"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
															"\r",
															"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
															"\r",
															"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
															"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
															"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
															"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
															"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
															"\r",
															"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
															"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(error);\r",
															"    console.log(\"! Local variables could not be set.\");\r",
															"}\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/\r",
															"\r",
															"function CreateXCorrelator() {\r",
															"    let xCorrelator;\r",
															"    xCorrelator = \"\";\r",
															"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
															"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
															"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
															"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
															"    xCorrelator += GenerateRandomHexString(12);\r",
															"    return xCorrelator;\r",
															"}\r",
															"\r",
															"function GenerateRandomHexString(length) {\r",
															"    var randomRandomHexString = \"\";\r",
															"    while (randomRandomHexString.length < length) {\r",
															"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
															"    }\r",
															"    return randomRandomHexString.substring(0,length);\r",
															"}\r",
															"\r",
															"function RandomTcpPort() {\r",
															"    let randomPort;\r",
															"    randomPort = 2000 + Math.floor( Math.random() * 1000 );\r",
															"    return randomPort;\r",
															"}\r",
															"\r",
															"function RandomIpAddress() {\r",
															"    let randomAddress\r",
															"    let addressParts = [];\r",
															"    for ( let i=0; i<4; i++ ) {\r",
															"        addressParts[i] = String(Math.floor(Math.random() * 256));\r",
															"    }\r",
															"    randomAddress = addressParts[0] + \".\" + addressParts[1] + \".\" + addressParts[2] + \".\" + addressParts[3];\r",
															"    return randomAddress;\r",
															"}\r",
															"\r",
															"function GenerateRandomString(length) {\r",
															"    let randomString;\r",
															"    randomString = \"\";\r",
															"    try {\r",
															"        let characters = \"abcdefghijklmnopqrstuvwxyz\";\r",
															"        let charactersLength = characters.length;\r",
															"        for (let i = 0; i < length; i++) {\r",
															"            randomString += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
															"        }\r",
															"    } catch (error) {\r",
															"        console.log(\"! Could not generate random string. \");\r",
															"    }\r",
															"    return randomString;\r",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Extracting Result\r",
															"****************************************************************************************/\r",
															"var RESPONSE_CODE;\r",
															"try {\r",
															"    let response;\r",
															"    response = pm.response;\r",
															"\r",
															"    RESPONSE_CODE = parseInt(response.code);\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Response Code could not be extracted.\");\r",
															"}    \r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Testing\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    pm.test(\"POST /v1/bequeath-your-data-and-die responds 400, because of random string new-application-protocol\", function () {\r",
															"        pm.expect(RESPONSE_CODE).to.equal(400);\r",
															"    });\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Testing could not be executed.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-mock-response-code",
														"value": "400",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Expected  /v1/bequeath-your-data-and-die - full form for enum value new-application-protocol",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n-----  full form for enum value new-application-protocol -------------------------------\");\r",
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"var APPLICATION;\r",
															"var OPERATION_KEY;\r",
															"var newApplicationName;\r",
															"var newApplicationRelease;\r",
															"var dummyApplicationProtocol;\r",
															"var dummyApplicationAddress;\r",
															"var dummyApplicationPort;\r",
															"try {\r",
															"    APPLICATION = pm.environment.get(\"application\");\r",
															"\r",
															"    let currentOperationServer;\r",
															"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
															"    \r",
															"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
															"\r",
															"    let newReleaseHttpClientLtp;\r",
															"    newReleaseHttpClientLtp = pm.collectionVariables.get(\"newReleaseHttpClientLtp\");\r",
															"\r",
															"    newApplicationName = newReleaseHttpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
															"\r",
															"    newApplicationRelease = newReleaseHttpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"release-number\"];\r",
															"\r",
															"    dummyApplicationProtocol = RandomRemoteProtocol();\r",
															"\r",
															"    let dummyIpv4Address = RandomIpAddress();\r",
															"    dummyApplicationAddress = {\r",
															"        \"ip-address\": {\r",
															"            \"ipv-4-address\": dummyIpv4Address\r",
															"        }\r",
															"    };\r",
															"\r",
															"    dummyApplicationPort = RandomTcpPort();\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(error);\r",
															"    console.log(\"! Input Data could not be loaded.\");\r",
															"}\r",
															"\r",
															"/****************************************************************************************\r",
															"* Defining Dummy Parameters\r",
															"****************************************************************************************/\r",
															"var USER_NAME;\r",
															"var ORIGINATOR;\r",
															"var X_CORRELATOR;\r",
															"var TRACE_INDICATOR;\r",
															"var CUSTOMER_JOURNEY;\r",
															"try {\r",
															"    USER_NAME = APPLICATION.userName;\r",
															"    ORIGINATOR = \"Postman\";\r",
															"    X_CORRELATOR = CreateXCorrelator();\r",
															"    TRACE_INDICATOR = \"1\";\r",
															"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
															"    \r",
															"} catch (error) {\r",
															"    console.log(\"! Could not define dummy values for parameters. \");\r",
															"}\r",
															"\r",
															"/****************************************************************************************\r",
															"* Defining Request Body\r",
															"****************************************************************************************/\r",
															"var REQUEST_BODY;\r",
															"try {\r",
															"    REQUEST_BODY = '{'\r",
															"        + '\"new-application-name\" : ' + '\"' + newApplicationName + '\",'\r",
															"        + '\"new-application-release\" : ' + '\"' + newApplicationRelease + '\",'\r",
															"        + '\"new-application-protocol\" : ' + '\"' + dummyApplicationProtocol + '\",'\r",
															"        + '\"new-application-address\" : ' + JSON.stringify(dummyApplicationAddress) + ','\r",
															"        + '\"new-application-port\" : ' +  dummyApplicationPort\r",
															"    +'}';\r",
															"} catch (error) {\r",
															"    console.log(\"!Could not define request body. \");\r",
															"}\r",
															"/****************************************************************************************\r",
															"* Setting Collection Variables\r",
															"****************************************************************************************/\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Setting Local Variables and Preparing the Request\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    let URI;\r",
															"    URI = APPLICATION.serverUrl + \"/v1/bequeath-your-data-and-die\";\r",
															"\r",
															"    let ACCEPT;\r",
															"    ACCEPT = \"application/json\";\r",
															"\r",
															"    let CONTENT_TYPE;\r",
															"    CONTENT_TYPE = \"application/json\";\r",
															"\r",
															"    pm.variables.clear();\r",
															"\r",
															"    pm.variables.set(\"uri\", URI);\r",
															"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
															"\r",
															"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
															"\r",
															"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
															"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
															"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
															"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
															"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
															"\r",
															"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
															"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(error);\r",
															"    console.log(\"! Local variables could not be set.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/\r",
															"\r",
															"function CreateXCorrelator() {\r",
															"    let xCorrelator;\r",
															"    xCorrelator = \"\";\r",
															"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
															"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
															"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
															"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
															"    xCorrelator += GenerateRandomHexString(12);\r",
															"    return xCorrelator;\r",
															"}\r",
															"\r",
															"function GenerateRandomHexString(length) {\r",
															"    var randomRandomHexString = \"\";\r",
															"    while (randomRandomHexString.length < length) {\r",
															"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
															"    }\r",
															"    return randomRandomHexString.substring(0,length);\r",
															"}\r",
															"\r",
															"function RandomTcpPort() {\r",
															"    let randomPort;\r",
															"    randomPort = 2000 + Math.floor( Math.random() * 1000 );\r",
															"    return randomPort;\r",
															"}\r",
															"\r",
															"function RandomIpAddress() {\r",
															"    let randomAddress\r",
															"    let addressParts = [];\r",
															"    for ( let i=0; i<4; i++ ) {\r",
															"        addressParts[i] = String(Math.floor(Math.random() * 256));\r",
															"    }\r",
															"    randomAddress = addressParts[0] + \".\" + addressParts[1] + \".\" + addressParts[2] + \".\" + addressParts[3];\r",
															"    return randomAddress;\r",
															"}\r",
															"\r",
															"function RandomRemoteProtocol() {\r",
															"    let protocolList;\r",
															"    protocolList = [  \"tcp-client-interface-1-0:PROTOCOL_TYPE_HTTP\",\r",
															"                                    \"tcp-client-interface-1-0:PROTOCOL_TYPE_HTTPS\",\r",
															"                                    \"tcp-client-interface-1-0:PROTOCOL_TYPE_NOT_YET_DEFINED\"\r",
															"                                ];\r",
															"    let protocol;\r",
															"    protocol = protocolList[Math.floor(Math.random() * protocolList.length)];\r",
															"\r",
															"    return protocol;\r",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Extracting Result\r",
															"****************************************************************************************/\r",
															"var RESPONSE_CODE;\r",
															"try {\r",
															"    let response;\r",
															"    response = pm.response;\r",
															"\r",
															"    RESPONSE_CODE = parseInt(response.code);\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Response Code could not be extracted.\");\r",
															"}    \r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Testing\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    pm.test(\"POST /v1/bequeath-your-data-and-die responds 400, because of full form for enum value new-application-protocol\", function () {\r",
															"        pm.expect(RESPONSE_CODE).to.equal(400);\r",
															"    });\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Testing could not be executed.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-mock-response-code",
														"value": "400",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"description": "## Get new-application-protocol checked for correctness?\n#### Preparation:\n- GETing CC (/core-model-1-4:control-construct)\n  - searching CC for op-s of /v1/bequeath-your-data-and-die, storing operation-key\n  - searcing CC for output port of PromptForBequeathingDataCausesTransferOfListOfApplications, find corresponding op-c, http-c and tcp-c, store them\n- POST /v1/bequeath-your-data-and-die with\n  - new-application-name and new-application-release according to chosen http-c\n  - new-application-address, new-application-port with random generated dummy values (assure sufficiently high probability that set does not exist!)\n  - new-application-protocol attribute with random dummy value (that does not comply specification).\n  - operation-key from above\n  - reasonable parameters\n\n#### Testing:\n- checking for ResponseCode==400\n\n#### Clearing:\n- not applicable"
								},
								{
									"name": "new-application-address checked?",
									"item": [
										{
											"name": "new-application-address/ipv-4-address checked?",
											"item": [
												{
													"name": "reference /core-model-1-4:control-construct",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"console.log(\"\\n-----/v1/bequeath-your-data-and-die acceptance -- new-application-address/ipv-4-address attribute checked? -------------------------------\");\r",
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Environment variables could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/core-model-1-4:control-construct\";\r",
																	"\r",
																	"    let REQUEST_BODY;\r",
																	"    REQUEST_BODY = \"\";\r",
																	"\r",
																	"    let AUTHORIZATION;\r",
																	"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var ltpList;\r",
																	"var fcList;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"    \r",
																	"    let responseCode;\r",
																	"    responseCode = parseInt(response.code);\r",
																	"    \r",
																	"    if ( Math.floor(responseCode/100) === 2 ) {\r",
																	"        let responseObject;\r",
																	"        responseObject = JSON.parse(response.stream);\r",
																	"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																	"        fcList = responseObject[\"core-model-1-4:control-construct\"][\"forwarding-domain\"][0][\"forwarding-construct\"];\r",
																	"\r",
																	"    } else {\r",
																	"        ltpList = [];\r",
																	"        fcList = [];\r",
																	"    }\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! ltpList could not be extracted.\");\r",
																	"}\r",
																	"\r",
																	"var currentOperationServer;\r",
																	"var newReleaseHttpClientLtp;\r",
																	"var newReleaseTcpClientLtp;\r",
																	"try {\r",
																	"    currentOperationServer = FindOperationServer(\"/v1/bequeath-your-data-and-die\", ltpList);\r",
																	"\r",
																	"    //Bequeath Transfer Of List Of Applications\r",
																	"    let bequeathingDataCausesTransferOfListOfApplicationsOperationClientLtp = FindOperationClientUsingCallback(\"PromptForBequeathingDataCausesTransferOfListOfApplications\", fcList, ltpList)\r",
																	"\r",
																	"    newReleaseHttpClientLtp = FindServingLtp(bequeathingDataCausesTransferOfListOfApplicationsOperationClientLtp, ltpList);\r",
																	"    newReleaseTcpClientLtp = FindServingLtp(newReleaseHttpClientLtp, ltpList); \r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Reference objects could not be extracted.\");\r",
																	"} \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.collectionVariables.clear();\r",
																	"    \r",
																	"    pm.collectionVariables.set(\"currentOperationServer\", currentOperationServer);\r",
																	"    pm.collectionVariables.set(\"newReleaseHttpClientLtp\", newReleaseHttpClientLtp);\r",
																	"    pm.collectionVariables.set(\"newReleaseTcpClientLtp\", newReleaseTcpClientLtp);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Collection variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"function FindOperationServer(operationName, ltpList) {\r",
																	"    let operationServer;\r",
																	"    operationServer = \"\";\r",
																	"    try {\r",
																	"        let sampleUuid;\r",
																	"        for(let i=0; i<ltpList.length; i++) {\r",
																	"            sampleUuid = ltpList[i][\"uuid\"];\r",
																	"            if(sampleUuid.includes(\"op-s-\")) {\r",
																	"                let sampleOperationName;\r",
																	"                sampleOperationName = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
																	"                if(sampleOperationName == operationName) {\r",
																	"                    operationServer = ltpList[i];\r",
																	"                    return operationServer;\r",
																	"                }\r",
																	"            }\r",
																	"        }\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Exception in function : FindOperationServer. \");\r",
																	"    }\r",
																	"    return operationServer;\r",
																	"}\r",
																	"\r",
																	"function FindOutputFcPortList(forwardingName, fcList) {\r",
																	"    let outputFcPortList;\r",
																	"    outputFcPortList = [];\r",
																	"    try {\r",
																	"        for( let i=0; i<fcList.length; i++ ) {\r",
																	"            for(let j=0; j<fcList[i][\"name\"].length; j++) {               \r",
																	"                if(fcList[i][\"name\"][j][\"value\"] == forwardingName) {\r",
																	"                    fcPortList = fcList[i][\"fc-port\"];\r",
																	"                    for(let k=0;k<fcPortList.length;k++) {\r",
																	"                        if(fcPortList[k][\"port-direction\"] == \"core-model-1-4:PORT_DIRECTION_TYPE_OUTPUT\") {\r",
																	"                            outputFcPortList.push(fcPortList[k]);\r",
																	"                        }\r",
																	"                    }\r",
																	"                    return outputFcPortList;\r",
																	"                }\r",
																	"            }\r",
																	"        }\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Exception in function FindOutputFcPortList. \");\r",
																	"    }\r",
																	"    return outputFcPortList;\r",
																	"}\r",
																	"\r",
																	"function FindActualInstanceByUuid(expectedUuid, actualLtpList) {\r",
																	"    let actualInstance;\r",
																	"    actualInstance = {};\r",
																	"    try {\r",
																	"        for ( let i=0; i<actualLtpList.length; i++ ) {\r",
																	"            let sampleUuid;\r",
																	"            sampleUuid = actualLtpList[i][\"uuid\"];\r",
																	"            if( sampleUuid == expectedUuid ) {\r",
																	"                actualInstance = actualLtpList[i];\r",
																	"                return actualInstance;\r",
																	"            }\r",
																	"        }\r",
																	"\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
																	"    }\r",
																	"    return undefined;\r",
																	"}\r",
																	"\r",
																	"function FindServingLtp(clientLtp, ltpList) {\r",
																	"    let servingLtp;\r",
																	"    servingLtp = {};\r",
																	"    try{\r",
																	"        let serverLtpUuid;\r",
																	"        serverLtpUuid = clientLtp[\"server-ltp\"][0];\r",
																	"        for( let i=0; i<ltpList.length; i++ ) {\r",
																	"            let sampleUuid;\r",
																	"            sampleUuid = ltpList[i][\"uuid\"];\r",
																	"            if( sampleUuid == serverLtpUuid ) {\r",
																	"                servingLtp = ltpList[i];\r",
																	"                return servingLtp;\r",
																	"            }\r",
																	"        }\r",
																	"    } catch(error) {\r",
																	"        console.log(error);\r",
																	"        console.log(\"! Exception in function : FindServingLtp. \")\r",
																	"    }\r",
																	"    return servingLtp;\r",
																	"}\r",
																	"\r",
																	"function FindOperationClientUsingCallback(callback, fcList, ltpList) {\r",
																	"    let operationClientLtp\r",
																	"    try {\r",
																	"        let outputFcPortList = FindOutputFcPortList(callback, fcList);\r",
																	"        let randomOutputFcPort = outputFcPortList[Math.floor(Math.random() * outputFcPortList.length)];\r",
																	"        let outputLtpUuid = randomOutputFcPort[\"logical-termination-point\"];\r",
																	"        operationClientLtp = FindActualInstanceByUuid(outputLtpUuid, ltpList);\r",
																	"    } catch (error) {\r",
																	"        console.log(error);\r",
																	"        console.log(\"! Exception in function FindOperationClientUsingCallback. \");\r",
																	"    }\r",
																	"    return  operationClientLtp\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "GET",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "200",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Expected /v1/bequeath-your-data-and-die - too-short new-application-address",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"console.log(\"\\n-----  too short ipv-4-address in new-application-address -------------------------------\");\r",
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"var OPERATION_KEY;\r",
																	"var newApplicationName;\r",
																	"var newApplicationRelease;\r",
																	"var dummyApplicationProtocol;\r",
																	"var faultyApplicationAddress;\r",
																	"var dummyApplicationPort;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"    let currentOperationServer;\r",
																	"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
																	"    \r",
																	"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																	"\r",
																	"    let newReleaseHttpClientLtp;\r",
																	"    newReleaseHttpClientLtp = pm.collectionVariables.get(\"newReleaseHttpClientLtp\");\r",
																	"\r",
																	"    newApplicationName = newReleaseHttpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
																	"\r",
																	"    newApplicationRelease = newReleaseHttpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"release-number\"];\r",
																	"\r",
																	"    let newReleaseTcpClientLtp;\r",
																	"    newReleaseTcpClientLtp = pm.collectionVariables.get(\"newReleaseTcpClientLtp\");\r",
																	"\r",
																	"    let protocol = newReleaseTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
																	"    dummyApplicationProtocol = GenerateDummyRemoteProtocol(protocol);\r",
																	"    dummyApplicationProtocol = dummyApplicationProtocol.substring(('tcp-client-interface-1-0:PROTOCOL_TYPE_').length);\r",
																	"\r",
																	"    let dummyIpv4Address = FaultyIpAddress();\r",
																	"    faultyApplicationAddress = {\r",
																	"        \"ip-address\": {\r",
																	"            \"ipv-4-address\": dummyIpv4Address\r",
																	"        }\r",
																	"    };\r",
																	"    dummyApplicationPort = RandomTcpPort();\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Input Data could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Dummy Parameters\r",
																	"****************************************************************************************/\r",
																	"var USER_NAME;\r",
																	"var ORIGINATOR;\r",
																	"var X_CORRELATOR;\r",
																	"var TRACE_INDICATOR;\r",
																	"var CUSTOMER_JOURNEY;\r",
																	"try {\r",
																	"    USER_NAME = APPLICATION.userName;\r",
																	"    ORIGINATOR = \"Postman\";\r",
																	"    X_CORRELATOR = CreateXCorrelator();\r",
																	"    TRACE_INDICATOR = \"1\";\r",
																	"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																	"    \r",
																	"} catch (error) {\r",
																	"    console.log(\"! Could not define dummy values for parameters. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Request Body\r",
																	"****************************************************************************************/\r",
																	"var REQUEST_BODY;\r",
																	"try {\r",
																	"    REQUEST_BODY = '{'\r",
																	"        + '\"new-application-name\" : ' + '\"' + newApplicationName + '\",'\r",
																	"        + '\"new-application-release\" : ' + '\"' + newApplicationRelease + '\",'\r",
																	"        + '\"new-application-protocol\" : ' + '\"' + dummyApplicationProtocol + '\",'\r",
																	"        + '\"new-application-address\" : ' + JSON.stringify(faultyApplicationAddress) + ','\r",
																	"        + '\"new-application-port\" : ' +  dummyApplicationPort\r",
																	"    +'}';\r",
																	"} catch (error) {\r",
																	"    console.log(\"!Could not define request body. \");\r",
																	"}\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/v1/bequeath-your-data-and-die\";\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																	"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																	"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																	"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																	"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"function CreateXCorrelator() {\r",
																	"    let xCorrelator;\r",
																	"    xCorrelator = \"\";\r",
																	"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(12);\r",
																	"    return xCorrelator;\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomHexString(length) {\r",
																	"    var randomRandomHexString = \"\";\r",
																	"    while (randomRandomHexString.length < length) {\r",
																	"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																	"    }\r",
																	"    return randomRandomHexString.substring(0,length);\r",
																	"}\r",
																	"\r",
																	"function FaultyIpAddress() {\r",
																	"    let randomAddress;\r",
																	"    let addressParts = [];\r",
																	"    for (let i = 0; i < 3; i++) {\r",
																	"        addressParts[i] = String(Math.floor(Math.random() * 256));\r",
																	"    }\r",
																	"    randomAddress = addressParts[0] + \".\" + addressParts[1] + \".\" + addressParts[2];\r",
																	"    return randomAddress;\r",
																	"}\r",
																	"\r",
																	"function RandomTcpPort() {\r",
																	"    let randomPort;\r",
																	"    randomPort = 2000 + Math.floor( Math.random() * 1000 );\r",
																	"    return randomPort;\r",
																	"}\r",
																	"\r",
																	"function GenerateDummyRemoteProtocol(currentProtocol) {\r",
																	"    let alternativeProtocolList;\r",
																	"    alternativeProtocolList = [  \"tcp-client-interface-1-0:PROTOCOL_TYPE_HTTP\",\r",
																	"                                    \"tcp-client-interface-1-0:PROTOCOL_TYPE_HTTPS\"\r",
																	"                                ];\r",
																	"    let indexOfCurrentProtocol;\r",
																	"    indexOfCurrentProtocol = alternativeProtocolList.indexOf(currentProtocol);\r",
																	"    if (indexOfCurrentProtocol > -1) {\r",
																	"        alternativeProtocolList.splice(indexOfCurrentProtocol, 1);\r",
																	"    }\r",
																	"\r",
																	"    let alternativeProtocol;\r",
																	"    let alternativeProtocolIndex;\r",
																	"    alternativeProtocolIndex = Math.floor(Math.random() * alternativeProtocolList.length);\r",
																	"    alternativeProtocol = alternativeProtocolList[alternativeProtocolIndex]; \r",
																	"\r",
																	"    return alternativeProtocol;\r",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var RESPONSE_CODE;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"\r",
																	"    RESPONSE_CODE = parseInt(response.code);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Response Code could not be extracted.\");\r",
																	"}    \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Testing\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.test(\"POST /v1/bequeath-your-data-and-die responds 400, because of too-short ipv-4-address in new-application-address\", function () {\r",
																	"        pm.expect(RESPONSE_CODE).to.equal(400);\r",
																	"    });\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Testing could not be executed.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "400",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Expected   /v1/bequeath-your-data-and-die - too-high new-application-address",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"console.log(\"\\n-----  too high ipv-4-address in new-application-address -------------------------------\");\r",
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"var OPERATION_KEY;\r",
																	"var newApplicationName;\r",
																	"var newApplicationRelease;\r",
																	"var dummyApplicationProtocol;\r",
																	"var faultyApplicationAddress;\r",
																	"var dummyApplicationPort;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"    let currentOperationServer;\r",
																	"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
																	"    \r",
																	"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																	"\r",
																	"    let newReleaseHttpClientLtp;\r",
																	"    newReleaseHttpClientLtp = pm.collectionVariables.get(\"newReleaseHttpClientLtp\");\r",
																	"\r",
																	"    newApplicationName = newReleaseHttpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
																	"\r",
																	"    newApplicationRelease = newReleaseHttpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"release-number\"];\r",
																	"\r",
																	"    let newReleaseTcpClientLtp;\r",
																	"    newReleaseTcpClientLtp = pm.collectionVariables.get(\"newReleaseTcpClientLtp\");\r",
																	"\r",
																	"    let protocol = newReleaseTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
																	"    dummyApplicationProtocol = GenerateDummyRemoteProtocol(protocol);\r",
																	"    dummyApplicationProtocol = dummyApplicationProtocol.substring(('tcp-client-interface-1-0:PROTOCOL_TYPE_').length);\r",
																	"\r",
																	"    let dummyIpv4Address = FaultyIpAddress();\r",
																	"    faultyApplicationAddress = {\r",
																	"        \"ip-address\": {\r",
																	"            \"ipv-4-address\": dummyIpv4Address\r",
																	"        }\r",
																	"    };\r",
																	"\r",
																	"    dummyApplicationPort = RandomTcpPort();\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Input Data could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Dummy Parameters\r",
																	"****************************************************************************************/\r",
																	"var USER_NAME;\r",
																	"var ORIGINATOR;\r",
																	"var X_CORRELATOR;\r",
																	"var TRACE_INDICATOR;\r",
																	"var CUSTOMER_JOURNEY;\r",
																	"try {\r",
																	"    USER_NAME = APPLICATION.userName;\r",
																	"    ORIGINATOR = \"Postman\";\r",
																	"    X_CORRELATOR = CreateXCorrelator();\r",
																	"    TRACE_INDICATOR = \"1\";\r",
																	"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																	"    \r",
																	"} catch (error) {\r",
																	"    console.log(\"! Could not define dummy values for parameters. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Request Body\r",
																	"****************************************************************************************/\r",
																	"var REQUEST_BODY;\r",
																	"try {\r",
																	"    REQUEST_BODY = '{'\r",
																	"        + '\"new-application-name\" : ' + '\"' + newApplicationName + '\",'\r",
																	"        + '\"new-application-release\" : ' + '\"' + newApplicationRelease + '\",'\r",
																	"        + '\"new-application-protocol\" : ' + '\"' + dummyApplicationProtocol + '\",'\r",
																	"        + '\"new-application-address\" : ' + JSON.stringify(faultyApplicationAddress) + ','\r",
																	"        + '\"new-application-port\" : ' +  dummyApplicationPort\r",
																	"    +'}';\r",
																	"} catch (error) {\r",
																	"    console.log(\"!Could not define request body. \");\r",
																	"}\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/v1/bequeath-your-data-and-die\";\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																	"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																	"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																	"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																	"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"function CreateXCorrelator() {\r",
																	"    let xCorrelator;\r",
																	"    xCorrelator = \"\";\r",
																	"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(12);\r",
																	"    return xCorrelator;\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomHexString(length) {\r",
																	"    var randomRandomHexString = \"\";\r",
																	"    while (randomRandomHexString.length < length) {\r",
																	"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																	"    }\r",
																	"    return randomRandomHexString.substring(0,length);\r",
																	"}\r",
																	"\r",
																	"function FaultyIpAddress() {\r",
																	"    let randomAddress;\r",
																	"    let addressParts = [];\r",
																	"    for (let i = 0; i < 3; i++) {\r",
																	"        addressParts[i] = String(Math.floor(Math.random() * 256));\r",
																	"    }\r",
																	"    addressParts[3] = String( Math.floor(Math.random() * 256) + 256 );\r",
																	"    randomAddress = addressParts[0] + \".\" + addressParts[1] + \".\" + addressParts[2] + \".\" + addressParts[3];\r",
																	"    return randomAddress;\r",
																	"}\r",
																	"\r",
																	"function RandomTcpPort() {\r",
																	"    let randomPort;\r",
																	"    randomPort = 2000 + Math.floor( Math.random() * 1000 );\r",
																	"    return randomPort;\r",
																	"}\r",
																	"\r",
																	"function GenerateDummyRemoteProtocol(currentProtocol) {\r",
																	"    let alternativeProtocolList;\r",
																	"    alternativeProtocolList = [  \"tcp-client-interface-1-0:PROTOCOL_TYPE_HTTP\",\r",
																	"                                    \"tcp-client-interface-1-0:PROTOCOL_TYPE_HTTPS\"\r",
																	"                                ];\r",
																	"    let indexOfCurrentProtocol;\r",
																	"    indexOfCurrentProtocol = alternativeProtocolList.indexOf(currentProtocol);\r",
																	"    if (indexOfCurrentProtocol > -1) {\r",
																	"        alternativeProtocolList.splice(indexOfCurrentProtocol, 1);\r",
																	"    }\r",
																	"\r",
																	"    let alternativeProtocol;\r",
																	"    let alternativeProtocolIndex;\r",
																	"    alternativeProtocolIndex = Math.floor(Math.random() * alternativeProtocolList.length);\r",
																	"    alternativeProtocol = alternativeProtocolList[alternativeProtocolIndex]; \r",
																	"\r",
																	"    return alternativeProtocol;\r",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var RESPONSE_CODE;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"\r",
																	"    RESPONSE_CODE = parseInt(response.code);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Response Code could not be extracted.\");\r",
																	"}    \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Testing\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.test(\"POST  /v1/bequeath-your-data-and-die responds 400, because of too-high ipv-4-address in new-application-address\", function () {\r",
																	"        pm.expect(RESPONSE_CODE).to.equal(400);\r",
																	"    });\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Testing could not be executed.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "400",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Expected /v1/bequeath-your-data-and-die - letters in new-application-address",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"console.log(\"\\n-----  letters in ipv-4-address of new-application-address -------------------------------\");\r",
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"var OPERATION_KEY;\r",
																	"var newApplicationName;\r",
																	"var newApplicationRelease;\r",
																	"var dummyApplicationProtocol;\r",
																	"var faultyApplicationAddress;\r",
																	"var dummyApplicationPort;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"    let currentOperationServer;\r",
																	"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
																	"    \r",
																	"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																	"\r",
																	"    let newReleaseHttpClientLtp;\r",
																	"    newReleaseHttpClientLtp = pm.collectionVariables.get(\"newReleaseHttpClientLtp\");\r",
																	"\r",
																	"    newApplicationName = newReleaseHttpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
																	"\r",
																	"    newApplicationRelease = newReleaseHttpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"release-number\"];\r",
																	"\r",
																	"    let newReleaseTcpClientLtp;\r",
																	"    newReleaseTcpClientLtp = pm.collectionVariables.get(\"newReleaseTcpClientLtp\");\r",
																	"\r",
																	"    let protocol = newReleaseTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
																	"    dummyApplicationProtocol = GenerateDummyRemoteProtocol(protocol);\r",
																	"    dummyApplicationProtocol = dummyApplicationProtocol.substring(('tcp-client-interface-1-0:PROTOCOL_TYPE_').length);\r",
																	"\r",
																	"    let dummyIpv4Address = FaultyIpAddress();\r",
																	"    faultyApplicationAddress = {\r",
																	"        \"ip-address\": {\r",
																	"            \"ipv-4-address\": dummyIpv4Address\r",
																	"        }\r",
																	"    };\r",
																	"\r",
																	"    dummyApplicationPort = RandomTcpPort();\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Input Data could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Dummy Parameters\r",
																	"****************************************************************************************/\r",
																	"var USER_NAME;\r",
																	"var ORIGINATOR;\r",
																	"var X_CORRELATOR;\r",
																	"var TRACE_INDICATOR;\r",
																	"var CUSTOMER_JOURNEY;\r",
																	"try {\r",
																	"    USER_NAME = APPLICATION.userName;\r",
																	"    ORIGINATOR = \"Postman\";\r",
																	"    X_CORRELATOR = CreateXCorrelator();\r",
																	"    TRACE_INDICATOR = \"1\";\r",
																	"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																	"    \r",
																	"} catch (error) {\r",
																	"    console.log(\"! Could not define dummy values for parameters. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Request Body\r",
																	"****************************************************************************************/\r",
																	"var REQUEST_BODY;\r",
																	"try {\r",
																	"    REQUEST_BODY = '{'\r",
																	"        + '\"new-application-name\" : ' + '\"' + newApplicationName + '\",'\r",
																	"        + '\"new-application-release\" : ' + '\"' + newApplicationRelease + '\",'\r",
																	"        + '\"new-application-protocol\" : ' + '\"' + dummyApplicationProtocol + '\",'\r",
																	"        + '\"new-application-address\" : ' + JSON.stringify(faultyApplicationAddress) + ','\r",
																	"        + '\"new-application-port\" : ' +  dummyApplicationPort\r",
																	"    +'}';\r",
																	"} catch (error) {\r",
																	"    console.log(\"!Could not define request body. \");\r",
																	"}\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/v1/bequeath-your-data-and-die\";\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																	"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																	"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																	"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																	"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"function CreateXCorrelator() {\r",
																	"    let xCorrelator;\r",
																	"    xCorrelator = \"\";\r",
																	"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(12);\r",
																	"    return xCorrelator;\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomHexString(length) {\r",
																	"    var randomRandomHexString = \"\";\r",
																	"    while (randomRandomHexString.length < length) {\r",
																	"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																	"    }\r",
																	"    return randomRandomHexString.substring(0,length);\r",
																	"}\r",
																	"\r",
																	"function FaultyIpAddress() {\r",
																	"    let randomAddress;\r",
																	"    let addressParts = [];\r",
																	"    for (let i = 0; i < 3; i++) {\r",
																	"        addressParts[i] = String(Math.floor(Math.random() * 256));\r",
																	"    }\r",
																	"    let characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\r",
																	"    let charactersLength = characters.length;\r",
																	"    addressParts[3] = characters.charAt(Math.floor(Math.random() * charactersLength));\r",
																	"    randomAddress = addressParts[0] + \".\" + addressParts[1] + \".\" + addressParts[2] + \".\" + addressParts[3];\r",
																	"    return randomAddress;\r",
																	"}\r",
																	"\r",
																	"function RandomTcpPort() {\r",
																	"    let randomPort;\r",
																	"    randomPort = 2000 + Math.floor( Math.random() * 1000 );\r",
																	"    return randomPort;\r",
																	"}\r",
																	"\r",
																	"function GenerateDummyRemoteProtocol(currentProtocol) {\r",
																	"    let alternativeProtocolList;\r",
																	"    alternativeProtocolList = [  \"tcp-client-interface-1-0:PROTOCOL_TYPE_HTTP\",\r",
																	"                                    \"tcp-client-interface-1-0:PROTOCOL_TYPE_HTTPS\"\r",
																	"                                ];\r",
																	"    let indexOfCurrentProtocol;\r",
																	"    indexOfCurrentProtocol = alternativeProtocolList.indexOf(currentProtocol);\r",
																	"    if (indexOfCurrentProtocol > -1) {\r",
																	"        alternativeProtocolList.splice(indexOfCurrentProtocol, 1);\r",
																	"    }\r",
																	"\r",
																	"    let alternativeProtocol;\r",
																	"    let alternativeProtocolIndex;\r",
																	"    alternativeProtocolIndex = Math.floor(Math.random() * alternativeProtocolList.length);\r",
																	"    alternativeProtocol = alternativeProtocolList[alternativeProtocolIndex]; \r",
																	"\r",
																	"    return alternativeProtocol;\r",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var RESPONSE_CODE;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"\r",
																	"    RESPONSE_CODE = parseInt(response.code);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Response Code could not be extracted.\");\r",
																	"}    \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Testing\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.test(\"POST /v1/bequeath-your-data-and-die responds 400, because of letters in ipv-4-address of new-application-address\", function () {\r",
																	"        pm.expect(RESPONSE_CODE).to.equal(400);\r",
																	"    });\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Testing could not be executed.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "400",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "new-application-address/domain-name checked?",
											"item": [
												{
													"name": "reference /core-model-1-4:control-construct",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"console.log(\"\\n-----/v1/bequeath-your-data-and-die acceptance -- new-application-address/domain-name attribute checked? -------------------------------\");\r",
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Environment variables could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/core-model-1-4:control-construct\";\r",
																	"\r",
																	"    let REQUEST_BODY;\r",
																	"    REQUEST_BODY = \"\";\r",
																	"\r",
																	"    let AUTHORIZATION;\r",
																	"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var ltpList;\r",
																	"var fcList;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"    \r",
																	"    let responseCode;\r",
																	"    responseCode = parseInt(response.code);\r",
																	"    \r",
																	"    if ( Math.floor(responseCode/100) === 2 ) {\r",
																	"        let responseObject;\r",
																	"        responseObject = JSON.parse(response.stream);\r",
																	"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																	"        fcList = responseObject[\"core-model-1-4:control-construct\"][\"forwarding-domain\"][0][\"forwarding-construct\"];\r",
																	"\r",
																	"    } else {\r",
																	"        ltpList = [];\r",
																	"        fcList = [];\r",
																	"    }\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! ltpList could not be extracted.\");\r",
																	"}\r",
																	"\r",
																	"var currentOperationServer;\r",
																	"var newReleaseHttpClientLtp;\r",
																	"var newReleaseTcpClientLtp;\r",
																	"try {\r",
																	"    currentOperationServer = FindOperationServer(\"/v1/bequeath-your-data-and-die\", ltpList);\r",
																	"\r",
																	"    //Bequeath Transfer Of List Of Applications\r",
																	"    let bequeathingDataCausesTransferOfListOfApplicationsOperationClientLtp = FindOperationClientUsingCallback(\"PromptForBequeathingDataCausesTransferOfListOfApplications\", fcList, ltpList)\r",
																	"\r",
																	"    newReleaseHttpClientLtp = FindServingLtp(bequeathingDataCausesTransferOfListOfApplicationsOperationClientLtp, ltpList);\r",
																	"    newReleaseTcpClientLtp = FindServingLtp(newReleaseHttpClientLtp, ltpList); \r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Reference objects could not be extracted.\");\r",
																	"} \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.collectionVariables.clear();\r",
																	"    \r",
																	"    pm.collectionVariables.set(\"currentOperationServer\", currentOperationServer);\r",
																	"    pm.collectionVariables.set(\"newReleaseHttpClientLtp\", newReleaseHttpClientLtp);\r",
																	"    pm.collectionVariables.set(\"newReleaseTcpClientLtp\", newReleaseTcpClientLtp);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Collection variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"function FindOperationServer(operationName, ltpList) {\r",
																	"    let operationServer;\r",
																	"    operationServer = \"\";\r",
																	"    try {\r",
																	"        let sampleUuid;\r",
																	"        for(let i=0; i<ltpList.length; i++) {\r",
																	"            sampleUuid = ltpList[i][\"uuid\"];\r",
																	"            if(sampleUuid.includes(\"op-s-\")) {\r",
																	"                let sampleOperationName;\r",
																	"                sampleOperationName = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
																	"                if(sampleOperationName == operationName) {\r",
																	"                    operationServer = ltpList[i];\r",
																	"                    return operationServer;\r",
																	"                }\r",
																	"            }\r",
																	"        }\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Exception in function : FindOperationServer. \");\r",
																	"    }\r",
																	"    return operationServer;\r",
																	"}\r",
																	"\r",
																	"function FindOutputFcPortList(forwardingName, fcList) {\r",
																	"    let outputFcPortList;\r",
																	"    outputFcPortList = [];\r",
																	"    try {\r",
																	"        for( let i=0; i<fcList.length; i++ ) {\r",
																	"            for(let j=0; j<fcList[i][\"name\"].length; j++) {               \r",
																	"                if(fcList[i][\"name\"][j][\"value\"] == forwardingName) {\r",
																	"                    fcPortList = fcList[i][\"fc-port\"];\r",
																	"                    for(let k=0;k<fcPortList.length;k++) {\r",
																	"                        if(fcPortList[k][\"port-direction\"] == \"core-model-1-4:PORT_DIRECTION_TYPE_OUTPUT\") {\r",
																	"                            outputFcPortList.push(fcPortList[k]);\r",
																	"                        }\r",
																	"                    }\r",
																	"                    return outputFcPortList;\r",
																	"                }\r",
																	"            }\r",
																	"        }\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Exception in function FindOutputFcPortList. \");\r",
																	"    }\r",
																	"    return outputFcPortList;\r",
																	"}\r",
																	"\r",
																	"function FindActualInstanceByUuid(expectedUuid, actualLtpList) {\r",
																	"    let actualInstance;\r",
																	"    actualInstance = {};\r",
																	"    try {\r",
																	"        for ( let i=0; i<actualLtpList.length; i++ ) {\r",
																	"            let sampleUuid;\r",
																	"            sampleUuid = actualLtpList[i][\"uuid\"];\r",
																	"            if( sampleUuid == expectedUuid ) {\r",
																	"                actualInstance = actualLtpList[i];\r",
																	"                return actualInstance;\r",
																	"            }\r",
																	"        }\r",
																	"\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
																	"    }\r",
																	"    return undefined;\r",
																	"}\r",
																	"\r",
																	"function FindServingLtp(clientLtp, ltpList) {\r",
																	"    let servingLtp;\r",
																	"    servingLtp = {};\r",
																	"    try{\r",
																	"        let serverLtpUuid;\r",
																	"        serverLtpUuid = clientLtp[\"server-ltp\"][0];\r",
																	"        for( let i=0; i<ltpList.length; i++ ) {\r",
																	"            let sampleUuid;\r",
																	"            sampleUuid = ltpList[i][\"uuid\"];\r",
																	"            if( sampleUuid == serverLtpUuid ) {\r",
																	"                servingLtp = ltpList[i];\r",
																	"                return servingLtp;\r",
																	"            }\r",
																	"        }\r",
																	"    } catch(error) {\r",
																	"        console.log(error);\r",
																	"        console.log(\"! Exception in function : FindServingLtp. \")\r",
																	"    }\r",
																	"    return servingLtp;\r",
																	"}\r",
																	"\r",
																	"function FindOperationClientUsingCallback(callback, fcList, ltpList) {\r",
																	"    let operationClientLtp\r",
																	"    try {\r",
																	"        let outputFcPortList = FindOutputFcPortList(callback, fcList);\r",
																	"        let randomOutputFcPort = outputFcPortList[Math.floor(Math.random() * outputFcPortList.length)];\r",
																	"        let outputLtpUuid = randomOutputFcPort[\"logical-termination-point\"];\r",
																	"        operationClientLtp = FindActualInstanceByUuid(outputLtpUuid, ltpList);\r",
																	"    } catch (error) {\r",
																	"        console.log(error);\r",
																	"        console.log(\"! Exception in function FindOperationClientUsingCallback. \");\r",
																	"    }\r",
																	"    return  operationClientLtp\r",
																	"}\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "GET",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "200",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Expected /v1/bequeath-your-data-and-die - faulty separators in domain-name of new-application-address",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"console.log(\"\\n-----  faulty separators in domain-name of new-application-address -------------------------------\");\r",
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"var OPERATION_KEY;\r",
																	"var newApplicationName;\r",
																	"var newApplicationRelease;\r",
																	"var dummyApplicationProtocol;\r",
																	"var faultyApplicationAddress;\r",
																	"var dummyApplicationPort;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"    let currentOperationServer;\r",
																	"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
																	"    \r",
																	"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																	"\r",
																	"    let newReleaseHttpClientLtp;\r",
																	"    newReleaseHttpClientLtp = pm.collectionVariables.get(\"newReleaseHttpClientLtp\");\r",
																	"\r",
																	"    newApplicationName = newReleaseHttpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
																	"\r",
																	"    newApplicationRelease = newReleaseHttpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"release-number\"];\r",
																	"\r",
																	"    let newReleaseTcpClientLtp;\r",
																	"    newReleaseTcpClientLtp = pm.collectionVariables.get(\"newReleaseTcpClientLtp\");\r",
																	"\r",
																	"    let protocol = newReleaseTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
																	"    dummyApplicationProtocol = GenerateDummyRemoteProtocol(protocol);\r",
																	"    dummyApplicationProtocol = dummyApplicationProtocol.substring(('tcp-client-interface-1-0:PROTOCOL_TYPE_').length);\r",
																	"\r",
																	"    let dummyDomainName = FaultyDomainName();\r",
																	"    faultyApplicationAddress = {\r",
																	"        \"domain-name\": dummyDomainName\r",
																	"    };\r",
																	"\r",
																	"    dummyApplicationPort = RandomTcpPort();\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Input Data could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Dummy Parameters\r",
																	"****************************************************************************************/\r",
																	"var USER_NAME;\r",
																	"var ORIGINATOR;\r",
																	"var X_CORRELATOR;\r",
																	"var TRACE_INDICATOR;\r",
																	"var CUSTOMER_JOURNEY;\r",
																	"try {\r",
																	"    USER_NAME = APPLICATION.userName;\r",
																	"    ORIGINATOR = \"Postman\";\r",
																	"    X_CORRELATOR = CreateXCorrelator();\r",
																	"    TRACE_INDICATOR = \"1\";\r",
																	"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																	"    \r",
																	"} catch (error) {\r",
																	"    console.log(\"! Could not define dummy values for parameters. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Request Body\r",
																	"****************************************************************************************/\r",
																	"var REQUEST_BODY;\r",
																	"try {\r",
																	"    REQUEST_BODY = '{'\r",
																	"        + '\"new-application-name\" : ' + '\"' + newApplicationName + '\",'\r",
																	"        + '\"new-application-release\" : ' + '\"' + newApplicationRelease + '\",'\r",
																	"        + '\"new-application-protocol\" : ' + '\"' + dummyApplicationProtocol + '\",'\r",
																	"        + '\"new-application-address\" : ' + JSON.stringify(faultyApplicationAddress) + ','\r",
																	"        + '\"new-application-port\" : ' +  dummyApplicationPort\r",
																	"    +'}';\r",
																	"} catch (error) {\r",
																	"    console.log(\"!Could not define request body. \");\r",
																	"}\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/v1/bequeath-your-data-and-die\";\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																	"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																	"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																	"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																	"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"function CreateXCorrelator() {\r",
																	"    let xCorrelator;\r",
																	"    xCorrelator = \"\";\r",
																	"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(12);\r",
																	"    return xCorrelator;\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomHexString(length) {\r",
																	"    var randomRandomHexString = \"\";\r",
																	"    while (randomRandomHexString.length < length) {\r",
																	"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																	"    }\r",
																	"    return randomRandomHexString.substring(0,length);\r",
																	"}\r",
																	"function FaultyDomainName() {\r",
																	"    let randomAddress;\r",
																	"    let dummySubdomain = GenerateRandomString(Math.floor(1 + Math.random() * 10));\r",
																	"    let randomDomainPartLength = Math.floor(2 + Math.random() * 5);\r",
																	"    let dummyDomainName = \"\";\r",
																	"    for(let i=0; i<randomDomainPartLength; i += 2 ) {\r",
																	"        dummyDomainName = dummyDomainName + GenerateRandomString(Math.floor(1 + Math.random() * 4));\r",
																	"        dummyDomainName = dummyDomainName + GenerateRandomSeparator();\r",
																	"        dummyDomainName = dummyDomainName + GenerateRandomString(Math.floor(1 + Math.random() * 4));\r",
																	"    }\r",
																	"    let dummyTopLevelDomain = GenerateRandomString(Math.floor(2 + Math.random() * 5));\r",
																	"    let faultySeparator = GenerateRandomSeparator();\r",
																	"    randomAddress = dummySubdomain + faultySeparator + dummyDomainName + faultySeparator + dummyTopLevelDomain; \r",
																	"    return randomAddress;\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomString(length) {\r",
																	"    let randomString;\r",
																	"    randomString = \"\";\r",
																	"    try {\r",
																	"        let characters = \"abcdefghijklmnopqrstuvwxyz\";\r",
																	"        let charactersLength = characters.length;\r",
																	"        for (let i = 0; i < length; i++) {\r",
																	"            randomString += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
																	"        }\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Could not generate random string. \");\r",
																	"    }\r",
																	"    return randomString;\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomSeparator() {\r",
																	"    let separators = \"!@$^*(){}[]<>.\";\r",
																	"    let randomSeparator = separators.charAt(Math.floor(Math.random() * separators.length));\r",
																	"    return randomSeparator;\r",
																	"}\r",
																	"\r",
																	"function RandomTcpPort() {\r",
																	"    let randomPort;\r",
																	"    randomPort = 2000 + Math.floor( Math.random() * 1000 );\r",
																	"    return randomPort;\r",
																	"}\r",
																	"\r",
																	"function GenerateDummyRemoteProtocol(currentProtocol) {\r",
																	"    let alternativeProtocolList;\r",
																	"    alternativeProtocolList = [  \"tcp-client-interface-1-0:PROTOCOL_TYPE_HTTP\",\r",
																	"                                    \"tcp-client-interface-1-0:PROTOCOL_TYPE_HTTPS\"\r",
																	"                                ];\r",
																	"    let indexOfCurrentProtocol;\r",
																	"    indexOfCurrentProtocol = alternativeProtocolList.indexOf(currentProtocol);\r",
																	"    if (indexOfCurrentProtocol > -1) {\r",
																	"        alternativeProtocolList.splice(indexOfCurrentProtocol, 1);\r",
																	"    }\r",
																	"\r",
																	"    let alternativeProtocol;\r",
																	"    let alternativeProtocolIndex;\r",
																	"    alternativeProtocolIndex = Math.floor(Math.random() * alternativeProtocolList.length);\r",
																	"    alternativeProtocol = alternativeProtocolList[alternativeProtocolIndex]; \r",
																	"\r",
																	"    return alternativeProtocol;\r",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var RESPONSE_CODE;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"\r",
																	"    RESPONSE_CODE = parseInt(response.code);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Response Code could not be extracted.\");\r",
																	"}    \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Testing\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.test(\"POST /v1/bequeath-your-data-and-die responds 400, because of faulty separators in domain-name of new-application-address\", function () {\r",
																	"        pm.expect(RESPONSE_CODE).to.equal(400);\r",
																	"    });\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Testing could not be executed.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "400",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Expected /v1/bequeath-your-data-and-die - missing separators in domain-name of new-application-address",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"console.log(\"\\n-----  missing separators in domain-name of new-application-address -------------------------------\");\r",
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"var OPERATION_KEY;\r",
																	"var newApplicationName;\r",
																	"var newApplicationRelease;\r",
																	"var dummyApplicationProtocol;\r",
																	"var faultyApplicationAddress;\r",
																	"var dummyApplicationPort;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"    let currentOperationServer;\r",
																	"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
																	"    \r",
																	"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																	"\r",
																	"    let newReleaseHttpClientLtp;\r",
																	"    newReleaseHttpClientLtp = pm.collectionVariables.get(\"newReleaseHttpClientLtp\");\r",
																	"\r",
																	"    newApplicationName = newReleaseHttpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
																	"\r",
																	"    newApplicationRelease = newReleaseHttpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"release-number\"];\r",
																	"\r",
																	"    let newReleaseTcpClientLtp;\r",
																	"    newReleaseTcpClientLtp = pm.collectionVariables.get(\"newReleaseTcpClientLtp\");\r",
																	"\r",
																	"    let protocol = newReleaseTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
																	"    dummyApplicationProtocol = GenerateDummyRemoteProtocol(protocol);\r",
																	"    dummyApplicationProtocol = dummyApplicationProtocol.substring(('tcp-client-interface-1-0:PROTOCOL_TYPE_').length);\r",
																	"\r",
																	"    let dummyDomainName = FaultyDomainName();\r",
																	"    faultyApplicationAddress = {\r",
																	"        \"domain-name\": dummyDomainName\r",
																	"    };\r",
																	"\r",
																	"    dummyApplicationPort = RandomTcpPort();\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Input Data could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Dummy Parameters\r",
																	"****************************************************************************************/\r",
																	"var USER_NAME;\r",
																	"var ORIGINATOR;\r",
																	"var X_CORRELATOR;\r",
																	"var TRACE_INDICATOR;\r",
																	"var CUSTOMER_JOURNEY;\r",
																	"try {\r",
																	"    USER_NAME = APPLICATION.userName;\r",
																	"    ORIGINATOR = \"Postman\";\r",
																	"    X_CORRELATOR = CreateXCorrelator();\r",
																	"    TRACE_INDICATOR = \"1\";\r",
																	"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																	"    \r",
																	"} catch (error) {\r",
																	"    console.log(\"! Could not define dummy values for parameters. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Request Body\r",
																	"****************************************************************************************/\r",
																	"var REQUEST_BODY;\r",
																	"try {\r",
																	"    REQUEST_BODY = '{'\r",
																	"        + '\"new-application-name\" : ' + '\"' + newApplicationName + '\",'\r",
																	"        + '\"new-application-release\" : ' + '\"' + newApplicationRelease + '\",'\r",
																	"        + '\"new-application-protocol\" : ' + '\"' + dummyApplicationProtocol + '\",'\r",
																	"        + '\"new-application-address\" : ' + JSON.stringify(faultyApplicationAddress) + ','\r",
																	"        + '\"new-application-port\" : ' +  dummyApplicationPort\r",
																	"    +'}';\r",
																	"} catch (error) {\r",
																	"    console.log(\"!Could not define request body. \");\r",
																	"}\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/v1/bequeath-your-data-and-die\";\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																	"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																	"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																	"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																	"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"function CreateXCorrelator() {\r",
																	"    let xCorrelator;\r",
																	"    xCorrelator = \"\";\r",
																	"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(12);\r",
																	"    return xCorrelator;\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomHexString(length) {\r",
																	"    var randomRandomHexString = \"\";\r",
																	"    while (randomRandomHexString.length < length) {\r",
																	"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																	"    }\r",
																	"    return randomRandomHexString.substring(0,length);\r",
																	"}\r",
																	"\r",
																	"function FaultyDomainName() {\r",
																	"    let randomAddress;\r",
																	"    let dummySubdomain = GenerateRandomString(Math.floor(1 + Math.random() * 10));\r",
																	"    let randomDomainPartLength = Math.floor(2 + Math.random() * 5);\r",
																	"    let dummyDomainName = \"\";\r",
																	"    for(let i=0; i<randomDomainPartLength; i += 2 ) {\r",
																	"        dummyDomainName = dummyDomainName + GenerateRandomString(Math.floor(1 + Math.random() * 4));\r",
																	"        dummyDomainName = dummyDomainName + GenerateRandomString(Math.floor(1 + Math.random() * 4));\r",
																	"    }\r",
																	"    let dummyTopLevelDomain = GenerateRandomString(Math.floor(2 + Math.random() * 5));\r",
																	"    randomAddress = dummySubdomain + dummyDomainName + dummyTopLevelDomain; \r",
																	"    return randomAddress;\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomString(length) {\r",
																	"    let randomString;\r",
																	"    randomString = \"\";\r",
																	"    try {\r",
																	"        let characters = \"abcdefghijklmnopqrstuvwxyz\";\r",
																	"        let charactersLength = characters.length;\r",
																	"        for (let i = 0; i < length; i++) {\r",
																	"            randomString += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
																	"        }\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Could not generate random string. \");\r",
																	"    }\r",
																	"    return randomString;\r",
																	"}\r",
																	"\r",
																	"function RandomTcpPort() {\r",
																	"    let randomPort;\r",
																	"    randomPort = 2000 + Math.floor( Math.random() * 1000 );\r",
																	"    return randomPort;\r",
																	"}\r",
																	"\r",
																	"function GenerateDummyRemoteProtocol(currentProtocol) {\r",
																	"    let alternativeProtocolList;\r",
																	"    alternativeProtocolList = [  \"tcp-client-interface-1-0:PROTOCOL_TYPE_HTTP\",\r",
																	"                                    \"tcp-client-interface-1-0:PROTOCOL_TYPE_HTTPS\"\r",
																	"                                ];\r",
																	"    let indexOfCurrentProtocol;\r",
																	"    indexOfCurrentProtocol = alternativeProtocolList.indexOf(currentProtocol);\r",
																	"    if (indexOfCurrentProtocol > -1) {\r",
																	"        alternativeProtocolList.splice(indexOfCurrentProtocol, 1);\r",
																	"    }\r",
																	"\r",
																	"    let alternativeProtocol;\r",
																	"    let alternativeProtocolIndex;\r",
																	"    alternativeProtocolIndex = Math.floor(Math.random() * alternativeProtocolList.length);\r",
																	"    alternativeProtocol = alternativeProtocolList[alternativeProtocolIndex]; \r",
																	"\r",
																	"    return alternativeProtocol;\r",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var RESPONSE_CODE;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"\r",
																	"    RESPONSE_CODE = parseInt(response.code);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Response Code could not be extracted.\");\r",
																	"}    \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Testing\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.test(\"POST /v1/bequeath-your-data-and-die responds 400, because of missing separators in domain-name of new-application-address\", function () {\r",
																	"        pm.expect(RESPONSE_CODE).to.equal(400);\r",
																	"    });\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Testing could not be executed.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "400",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Expected /v1/bequeath-your-data-and-die - string with spaces in domain-name of new-application-address",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"console.log(\"\\n-----  spaces in domain-name of new-application-address -------------------------------\");\r",
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"var OPERATION_KEY;\r",
																	"var newApplicationName;\r",
																	"var newApplicationRelease;\r",
																	"var dummyApplicationProtocol;\r",
																	"var faultyApplicationAddress;\r",
																	"var dummyApplicationPort;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"    let currentOperationServer;\r",
																	"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
																	"    \r",
																	"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																	"\r",
																	"    let newReleaseHttpClientLtp;\r",
																	"    newReleaseHttpClientLtp = pm.collectionVariables.get(\"newReleaseHttpClientLtp\");\r",
																	"\r",
																	"    newApplicationName = newReleaseHttpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
																	"\r",
																	"    newApplicationRelease = newReleaseHttpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"release-number\"];\r",
																	"\r",
																	"    let newReleaseTcpClientLtp;\r",
																	"    newReleaseTcpClientLtp = pm.collectionVariables.get(\"newReleaseTcpClientLtp\");\r",
																	"\r",
																	"    let protocol = newReleaseTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
																	"    dummyApplicationProtocol = GenerateDummyRemoteProtocol(protocol);\r",
																	"    dummyApplicationProtocol = dummyApplicationProtocol.substring(('tcp-client-interface-1-0:PROTOCOL_TYPE_').length);\r",
																	"\r",
																	"    let dummyDomainName = FaultyDomainName();\r",
																	"    faultyApplicationAddress = {\r",
																	"        \"domain-name\": dummyDomainName\r",
																	"    };\r",
																	"\r",
																	"    dummyApplicationPort = RandomTcpPort();\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Input Data could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Dummy Parameters\r",
																	"****************************************************************************************/\r",
																	"var USER_NAME;\r",
																	"var ORIGINATOR;\r",
																	"var X_CORRELATOR;\r",
																	"var TRACE_INDICATOR;\r",
																	"var CUSTOMER_JOURNEY;\r",
																	"try {\r",
																	"    USER_NAME = APPLICATION.userName;\r",
																	"    ORIGINATOR = \"Postman\";\r",
																	"    X_CORRELATOR = CreateXCorrelator();\r",
																	"    TRACE_INDICATOR = \"1\";\r",
																	"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																	"    \r",
																	"} catch (error) {\r",
																	"    console.log(\"! Could not define dummy values for parameters. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Request Body\r",
																	"****************************************************************************************/\r",
																	"var REQUEST_BODY;\r",
																	"try {\r",
																	"    REQUEST_BODY = '{'\r",
																	"        + '\"new-application-name\" : ' + '\"' + newApplicationName + '\",'\r",
																	"        + '\"new-application-release\" : ' + '\"' + newApplicationRelease + '\",'\r",
																	"        + '\"new-application-protocol\" : ' + '\"' + dummyApplicationProtocol + '\",'\r",
																	"        + '\"new-application-address\" : ' + JSON.stringify(faultyApplicationAddress) + ','\r",
																	"        + '\"new-application-port\" : ' +  dummyApplicationPort\r",
																	"    +'}';\r",
																	"} catch (error) {\r",
																	"    console.log(\"!Could not define request body. \");\r",
																	"}\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/v1/bequeath-your-data-and-die\";\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																	"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																	"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																	"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																	"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"function CreateXCorrelator() {\r",
																	"    let xCorrelator;\r",
																	"    xCorrelator = \"\";\r",
																	"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(12);\r",
																	"    return xCorrelator;\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomHexString(length) {\r",
																	"    var randomRandomHexString = \"\";\r",
																	"    while (randomRandomHexString.length < length) {\r",
																	"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																	"    }\r",
																	"    return randomRandomHexString.substring(0,length);\r",
																	"}\r",
																	"\r",
																	"function FaultyDomainName() {\r",
																	"    let randomAddress;\r",
																	"    let dummySubdomain = GenerateRandomString(Math.floor(1 + Math.random() * 10));\r",
																	"    let randomDomainPartLength = Math.floor(2 + Math.random() * 5);\r",
																	"    let dummyDomainName = \"\";\r",
																	"    for(let i=0; i<randomDomainPartLength; i += 2 ) {\r",
																	"        dummyDomainName = dummyDomainName + GenerateRandomString(Math.floor(1 + Math.random() * 4));\r",
																	"        dummyDomainName = dummyDomainName + GenerateRandomString(Math.floor(1 + Math.random() * 4));\r",
																	"    }\r",
																	"    let dummyTopLevelDomain = GenerateRandomString(Math.floor(2 + Math.random() * 5));\r",
																	"    randomAddress = dummySubdomain + \" \" + dummyDomainName + \" \" + dummyTopLevelDomain; \r",
																	"    return randomAddress;\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomString(length) {\r",
																	"    let randomString;\r",
																	"    randomString = \"\";\r",
																	"    try {\r",
																	"        let characters = \"abcdefghijklmnopqrstuvwxyz\";\r",
																	"        let charactersLength = characters.length;\r",
																	"        for (let i = 0; i < length; i++) {\r",
																	"            randomString += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
																	"        }\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Could not generate random string. \");\r",
																	"    }\r",
																	"    return randomString;\r",
																	"}\r",
																	"\r",
																	"function RandomTcpPort() {\r",
																	"    let randomPort;\r",
																	"    randomPort = 2000 + Math.floor( Math.random() * 1000 );\r",
																	"    return randomPort;\r",
																	"}\r",
																	"\r",
																	"function GenerateDummyRemoteProtocol(currentProtocol) {\r",
																	"    let alternativeProtocolList;\r",
																	"    alternativeProtocolList = [  \"tcp-client-interface-1-0:PROTOCOL_TYPE_HTTP\",\r",
																	"                                    \"tcp-client-interface-1-0:PROTOCOL_TYPE_HTTPS\"\r",
																	"                                ];\r",
																	"    let indexOfCurrentProtocol;\r",
																	"    indexOfCurrentProtocol = alternativeProtocolList.indexOf(currentProtocol);\r",
																	"    if (indexOfCurrentProtocol > -1) {\r",
																	"        alternativeProtocolList.splice(indexOfCurrentProtocol, 1);\r",
																	"    }\r",
																	"\r",
																	"    let alternativeProtocol;\r",
																	"    let alternativeProtocolIndex;\r",
																	"    alternativeProtocolIndex = Math.floor(Math.random() * alternativeProtocolList.length);\r",
																	"    alternativeProtocol = alternativeProtocolList[alternativeProtocolIndex]; \r",
																	"\r",
																	"    return alternativeProtocol;\r",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var RESPONSE_CODE;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"\r",
																	"    RESPONSE_CODE = parseInt(response.code);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Response Code could not be extracted.\");\r",
																	"}    \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Testing\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.test(\"POST /v1/bequeath-your-data-and-die responds 400, because of spaces in domain-name of new-application-address\", function () {\r",
																	"        pm.expect(RESPONSE_CODE).to.equal(400);\r",
																	"    });\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Testing could not be executed.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "400",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Expected /v1/bequeath-your-data-and-die - numbers in TLD of domain-name of new-application-address",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"console.log(\"\\n-----  numbers in Top-lebvel-domain component of domain-name of new-application-address -------------------------------\");\r",
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"var OPERATION_KEY;\r",
																	"var newApplicationName;\r",
																	"var newApplicationRelease;\r",
																	"var dummyApplicationProtocol;\r",
																	"var faultyApplicationAddress;\r",
																	"var dummyApplicationPort;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"    let currentOperationServer;\r",
																	"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
																	"    \r",
																	"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																	"\r",
																	"    let newReleaseHttpClientLtp;\r",
																	"    newReleaseHttpClientLtp = pm.collectionVariables.get(\"newReleaseHttpClientLtp\");\r",
																	"\r",
																	"    newApplicationName = newReleaseHttpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
																	"\r",
																	"    newApplicationRelease = newReleaseHttpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"release-number\"];\r",
																	"\r",
																	"    let newReleaseTcpClientLtp;\r",
																	"    newReleaseTcpClientLtp = pm.collectionVariables.get(\"newReleaseTcpClientLtp\");\r",
																	"\r",
																	"    let protocol = newReleaseTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
																	"    dummyApplicationProtocol = GenerateDummyRemoteProtocol(protocol);\r",
																	"    dummyApplicationProtocol = dummyApplicationProtocol.substring(('tcp-client-interface-1-0:PROTOCOL_TYPE_').length);\r",
																	"\r",
																	"    let dummyDomainName = FaultyDomainName();\r",
																	"    faultyApplicationAddress = {\r",
																	"        \"domain-name\": dummyDomainName\r",
																	"    };\r",
																	"\r",
																	"    dummyApplicationPort = RandomTcpPort();\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Input Data could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Dummy Parameters\r",
																	"****************************************************************************************/\r",
																	"var USER_NAME;\r",
																	"var ORIGINATOR;\r",
																	"var X_CORRELATOR;\r",
																	"var TRACE_INDICATOR;\r",
																	"var CUSTOMER_JOURNEY;\r",
																	"try {\r",
																	"    USER_NAME = APPLICATION.userName;\r",
																	"    ORIGINATOR = \"Postman\";\r",
																	"    X_CORRELATOR = CreateXCorrelator();\r",
																	"    TRACE_INDICATOR = \"1\";\r",
																	"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																	"    \r",
																	"} catch (error) {\r",
																	"    console.log(\"! Could not define dummy values for parameters. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Request Body\r",
																	"****************************************************************************************/\r",
																	"var REQUEST_BODY;\r",
																	"try {\r",
																	"    REQUEST_BODY = '{'\r",
																	"        + '\"new-application-name\" : ' + '\"' + newApplicationName + '\",'\r",
																	"        + '\"new-application-release\" : ' + '\"' + newApplicationRelease + '\",'\r",
																	"        + '\"new-application-protocol\" : ' + '\"' + dummyApplicationProtocol + '\",'\r",
																	"        + '\"new-application-address\" : ' + JSON.stringify(faultyApplicationAddress) + ','\r",
																	"        + '\"new-application-port\" : ' +  dummyApplicationPort\r",
																	"    +'}';\r",
																	"} catch (error) {\r",
																	"    console.log(\"!Could not define request body. \");\r",
																	"}\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/v1/bequeath-your-data-and-die\";\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																	"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																	"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																	"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																	"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"function CreateXCorrelator() {\r",
																	"    let xCorrelator;\r",
																	"    xCorrelator = \"\";\r",
																	"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(12);\r",
																	"    return xCorrelator;\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomHexString(length) {\r",
																	"    var randomRandomHexString = \"\";\r",
																	"    while (randomRandomHexString.length < length) {\r",
																	"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																	"    }\r",
																	"    return randomRandomHexString.substring(0,length);\r",
																	"}\r",
																	"\r",
																	"function FaultyDomainName() {\r",
																	"    let randomAddress;\r",
																	"    let dummySubdomain = GenerateRandomString(Math.floor(1 + Math.random() * 10));\r",
																	"    let randomDomainPartLength = Math.floor(2 + Math.random() * 5);\r",
																	"    let dummyDomainName = \"\";\r",
																	"    for(let i=0; i<randomDomainPartLength; i += 2 ) {\r",
																	"        dummyDomainName = dummyDomainName + GenerateRandomString(Math.floor(1 + Math.random() * 4));\r",
																	"        dummyDomainName = dummyDomainName + GenerateRandomSeparator();\r",
																	"        dummyDomainName = dummyDomainName + GenerateRandomString(Math.floor(1 + Math.random() * 4));\r",
																	"    }\r",
																	"    let dummyTopLevelDomain = GenerateRandomString(Math.floor(2 + Math.random() * 5));\r",
																	"    let randomIndex = Math.floor(Math.random() * dummyTopLevelDomain.length);\r",
																	"    faultyTopLevelDomain = dummyTopLevelDomain.substr(0,randomIndex) + randomIndex + dummyTopLevelDomain.substr(randomIndex+1);\r",
																	"    randomAddress = dummySubdomain + \".\" + dummyDomainName + \".\" + faultyTopLevelDomain; \r",
																	"    return randomAddress;\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomString(length) {\r",
																	"    let randomString;\r",
																	"    randomString = \"\";\r",
																	"    try {\r",
																	"        let characters = \"abcdefghijklmnopqrstuvwxyz\";\r",
																	"        let charactersLength = characters.length;\r",
																	"        for (let i = 0; i < length; i++) {\r",
																	"            randomString += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
																	"        }\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Could not generate random string. \");\r",
																	"    }\r",
																	"    return randomString;\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomSeparator() {\r",
																	"    let separators = [\".\", \"-\"];\r",
																	"    let randomSeparator = separators[Math.floor(Math.random() * separators.length)];\r",
																	"    return randomSeparator;\r",
																	"}\r",
																	"\r",
																	"function RandomTcpPort() {\r",
																	"    let randomPort;\r",
																	"    randomPort = 2000 + Math.floor( Math.random() * 1000 );\r",
																	"    return randomPort;\r",
																	"}\r",
																	"\r",
																	"function GenerateDummyRemoteProtocol(currentProtocol) {\r",
																	"    let alternativeProtocolList;\r",
																	"    alternativeProtocolList = [  \"tcp-client-interface-1-0:PROTOCOL_TYPE_HTTP\",\r",
																	"                                    \"tcp-client-interface-1-0:PROTOCOL_TYPE_HTTPS\"\r",
																	"                                ];\r",
																	"    let indexOfCurrentProtocol;\r",
																	"    indexOfCurrentProtocol = alternativeProtocolList.indexOf(currentProtocol);\r",
																	"    if (indexOfCurrentProtocol > -1) {\r",
																	"        alternativeProtocolList.splice(indexOfCurrentProtocol, 1);\r",
																	"    }\r",
																	"\r",
																	"    let alternativeProtocol;\r",
																	"    let alternativeProtocolIndex;\r",
																	"    alternativeProtocolIndex = Math.floor(Math.random() * alternativeProtocolList.length);\r",
																	"    alternativeProtocol = alternativeProtocolList[alternativeProtocolIndex]; \r",
																	"\r",
																	"    return alternativeProtocol;\r",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var RESPONSE_CODE;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"\r",
																	"    RESPONSE_CODE = parseInt(response.code);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Response Code could not be extracted.\");\r",
																	"}    \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Testing\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.test(\"POST /v1/bequeath-your-data-and-die responds 400, because of numbers in Top-level-domain component of domain-name of new-application-address\", function () {\r",
																	"        pm.expect(RESPONSE_CODE).to.equal(400);\r",
																	"    });\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Testing could not be executed.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "400",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "new-application-address checked?",
											"item": [
												{
													"name": "reference /core-model-1-4:control-construct",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"console.log(\"\\n-----/v1/bequeath-your-data-and-die acceptance -- new-application-address attribute checked? -------------------------------\");\r",
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Environment variables could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/core-model-1-4:control-construct\";\r",
																	"\r",
																	"    let REQUEST_BODY;\r",
																	"    REQUEST_BODY = \"\";\r",
																	"\r",
																	"    let AUTHORIZATION;\r",
																	"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var ltpList;\r",
																	"var fcList;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"    \r",
																	"    let responseCode;\r",
																	"    responseCode = parseInt(response.code);\r",
																	"    \r",
																	"    if ( Math.floor(responseCode/100) === 2 ) {\r",
																	"        let responseObject;\r",
																	"        responseObject = JSON.parse(response.stream);\r",
																	"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																	"        fcList = responseObject[\"core-model-1-4:control-construct\"][\"forwarding-domain\"][0][\"forwarding-construct\"];\r",
																	"\r",
																	"    } else {\r",
																	"        ltpList = [];\r",
																	"        fcList = [];\r",
																	"    }\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! ltpList could not be extracted.\");\r",
																	"}\r",
																	"\r",
																	"var currentOperationServer;\r",
																	"var newReleaseHttpClientLtp;\r",
																	"var newReleaseTcpClientLtp;\r",
																	"try {\r",
																	"    currentOperationServer = FindOperationServer(\"/v1/bequeath-your-data-and-die\", ltpList);\r",
																	"\r",
																	"    //Bequeath Transfer Of List Of Applications\r",
																	"    let bequeathingDataCausesTransferOfListOfApplicationsOperationClientLtp = FindOperationClientUsingCallback(\"PromptForBequeathingDataCausesTransferOfListOfApplications\", fcList, ltpList)\r",
																	"\r",
																	"    newReleaseHttpClientLtp = FindServingLtp(bequeathingDataCausesTransferOfListOfApplicationsOperationClientLtp, ltpList);\r",
																	"    newReleaseTcpClientLtp = FindServingLtp(newReleaseHttpClientLtp, ltpList); \r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Reference objects could not be extracted.\");\r",
																	"} \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.collectionVariables.clear();\r",
																	"    \r",
																	"    pm.collectionVariables.set(\"currentOperationServer\", currentOperationServer);\r",
																	"    pm.collectionVariables.set(\"newReleaseHttpClientLtp\", newReleaseHttpClientLtp);\r",
																	"    pm.collectionVariables.set(\"newReleaseTcpClientLtp\", newReleaseTcpClientLtp);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Collection variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"function FindOperationServer(operationName, ltpList) {\r",
																	"    let operationServer;\r",
																	"    operationServer = \"\";\r",
																	"    try {\r",
																	"        let sampleUuid;\r",
																	"        for(let i=0; i<ltpList.length; i++) {\r",
																	"            sampleUuid = ltpList[i][\"uuid\"];\r",
																	"            if(sampleUuid.includes(\"op-s-\")) {\r",
																	"                let sampleOperationName;\r",
																	"                sampleOperationName = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
																	"                if(sampleOperationName == operationName) {\r",
																	"                    operationServer = ltpList[i];\r",
																	"                    return operationServer;\r",
																	"                }\r",
																	"            }\r",
																	"        }\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Exception in function : FindOperationServer. \");\r",
																	"    }\r",
																	"    return operationServer;\r",
																	"}\r",
																	"\r",
																	"function FindOutputFcPortList(forwardingName, fcList) {\r",
																	"    let outputFcPortList;\r",
																	"    outputFcPortList = [];\r",
																	"    try {\r",
																	"        for( let i=0; i<fcList.length; i++ ) {\r",
																	"            for(let j=0; j<fcList[i][\"name\"].length; j++) {               \r",
																	"                if(fcList[i][\"name\"][j][\"value\"] == forwardingName) {\r",
																	"                    fcPortList = fcList[i][\"fc-port\"];\r",
																	"                    for(let k=0;k<fcPortList.length;k++) {\r",
																	"                        if(fcPortList[k][\"port-direction\"] == \"core-model-1-4:PORT_DIRECTION_TYPE_OUTPUT\") {\r",
																	"                            outputFcPortList.push(fcPortList[k]);\r",
																	"                        }\r",
																	"                    }\r",
																	"                    return outputFcPortList;\r",
																	"                }\r",
																	"            }\r",
																	"        }\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Exception in function FindOutputFcPortList. \");\r",
																	"    }\r",
																	"    return outputFcPortList;\r",
																	"}\r",
																	"\r",
																	"function FindActualInstanceByUuid(expectedUuid, actualLtpList) {\r",
																	"    let actualInstance;\r",
																	"    actualInstance = {};\r",
																	"    try {\r",
																	"        for ( let i=0; i<actualLtpList.length; i++ ) {\r",
																	"            let sampleUuid;\r",
																	"            sampleUuid = actualLtpList[i][\"uuid\"];\r",
																	"            if( sampleUuid == expectedUuid ) {\r",
																	"                actualInstance = actualLtpList[i];\r",
																	"                return actualInstance;\r",
																	"            }\r",
																	"        }\r",
																	"\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
																	"    }\r",
																	"    return undefined;\r",
																	"}\r",
																	"\r",
																	"function FindServingLtp(clientLtp, ltpList) {\r",
																	"    let servingLtp;\r",
																	"    servingLtp = {};\r",
																	"    try{\r",
																	"        let serverLtpUuid;\r",
																	"        serverLtpUuid = clientLtp[\"server-ltp\"][0];\r",
																	"        for( let i=0; i<ltpList.length; i++ ) {\r",
																	"            let sampleUuid;\r",
																	"            sampleUuid = ltpList[i][\"uuid\"];\r",
																	"            if( sampleUuid == serverLtpUuid ) {\r",
																	"                servingLtp = ltpList[i];\r",
																	"                return servingLtp;\r",
																	"            }\r",
																	"        }\r",
																	"    } catch(error) {\r",
																	"        console.log(error);\r",
																	"        console.log(\"! Exception in function : FindServingLtp. \")\r",
																	"    }\r",
																	"    return servingLtp;\r",
																	"}\r",
																	"\r",
																	"function FindOperationClientUsingCallback(callback, fcList, ltpList) {\r",
																	"    let operationClientLtp\r",
																	"    try {\r",
																	"        let outputFcPortList = FindOutputFcPortList(callback, fcList);\r",
																	"        let randomOutputFcPort = outputFcPortList[Math.floor(Math.random() * outputFcPortList.length)];\r",
																	"        let outputLtpUuid = randomOutputFcPort[\"logical-termination-point\"];\r",
																	"        operationClientLtp = FindActualInstanceByUuid(outputLtpUuid, ltpList);\r",
																	"    } catch (error) {\r",
																	"        console.log(error);\r",
																	"        console.log(\"! Exception in function FindOperationClientUsingCallback. \");\r",
																	"    }\r",
																	"    return  operationClientLtp\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "GET",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "200",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Expected /v1/bequeath-your-data-and-die - a non-object new-application-address",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"console.log(\"\\n-----  a non-object new-application-address -------------------------------\");\r",
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"var OPERATION_KEY;\r",
																	"var newApplicationName;\r",
																	"var newApplicationRelease;\r",
																	"var dummyApplicationProtocol;\r",
																	"var dummyApplicationAddress;\r",
																	"var dummyApplicationPort;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"    let currentOperationServer;\r",
																	"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
																	"    \r",
																	"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																	"\r",
																	"    let newReleaseHttpClientLtp;\r",
																	"    newReleaseHttpClientLtp = pm.collectionVariables.get(\"newReleaseHttpClientLtp\");\r",
																	"\r",
																	"    newApplicationName = newReleaseHttpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
																	"\r",
																	"    newApplicationRelease = newReleaseHttpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"release-number\"];\r",
																	"\r",
																	"    let newReleaseTcpClientLtp;\r",
																	"    newReleaseTcpClientLtp = pm.collectionVariables.get(\"newReleaseTcpClientLtp\");\r",
																	"\r",
																	"    let protocol = newReleaseTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
																	"    dummyApplicationProtocol = GenerateDummyRemoteProtocol(protocol);\r",
																	"    dummyApplicationProtocol = dummyApplicationProtocol.substring(('tcp-client-interface-1-0:PROTOCOL_TYPE_').length);\r",
																	"\r",
																	"    dummyApplicationAddress = RandomIpAddress();\r",
																	"    dummyApplicationPort = RandomTcpPort();\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Input Data could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Dummy Parameters\r",
																	"****************************************************************************************/\r",
																	"var USER_NAME;\r",
																	"var ORIGINATOR;\r",
																	"var X_CORRELATOR;\r",
																	"var TRACE_INDICATOR;\r",
																	"var CUSTOMER_JOURNEY;\r",
																	"try {\r",
																	"    USER_NAME = APPLICATION.userName;\r",
																	"    ORIGINATOR = \"Postman\";\r",
																	"    X_CORRELATOR = CreateXCorrelator();\r",
																	"    TRACE_INDICATOR = \"1\";\r",
																	"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																	"    \r",
																	"} catch (error) {\r",
																	"    console.log(\"! Could not define dummy values for parameters. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Request Body\r",
																	"****************************************************************************************/\r",
																	"var REQUEST_BODY;\r",
																	"try {\r",
																	"    REQUEST_BODY = '{'\r",
																	"        + '\"new-application-name\" : ' + '\"' + newApplicationName + '\",'\r",
																	"        + '\"new-application-release\" : ' + '\"' + newApplicationRelease + '\",'\r",
																	"        + '\"new-application-protocol\" : ' + '\"' + dummyApplicationProtocol + '\",'\r",
																	"        + '\"new-application-address\" : ' + '\"' + dummyApplicationAddress + '\",'\r",
																	"        + '\"new-application-port\" : ' +  dummyApplicationPort\r",
																	"    +'}';\r",
																	"} catch (error) {\r",
																	"    console.log(\"!Could not define request body. \");\r",
																	"}\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/v1/bequeath-your-data-and-die\";\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																	"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																	"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																	"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																	"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"function CreateXCorrelator() {\r",
																	"    let xCorrelator;\r",
																	"    xCorrelator = \"\";\r",
																	"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(12);\r",
																	"    return xCorrelator;\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomHexString(length) {\r",
																	"    var randomRandomHexString = \"\";\r",
																	"    while (randomRandomHexString.length < length) {\r",
																	"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																	"    }\r",
																	"    return randomRandomHexString.substring(0,length);\r",
																	"}\r",
																	"\r",
																	"function RandomIpAddress() {\r",
																	"    let randomAddress\r",
																	"    let addressParts = [];\r",
																	"    for ( let i=0; i<4; i++ ) {\r",
																	"        addressParts[i] = String(Math.floor(Math.random() * 256));\r",
																	"    }\r",
																	"    randomAddress = addressParts[0] + \".\" + addressParts[1] + \".\" + addressParts[2] + \".\" + addressParts[3];\r",
																	"    return randomAddress;\r",
																	"}\r",
																	"\r",
																	"function RandomTcpPort() {\r",
																	"    let randomPort;\r",
																	"    randomPort = 2000 + Math.floor( Math.random() * 1000 );\r",
																	"    return randomPort;\r",
																	"}\r",
																	"\r",
																	"function GenerateDummyRemoteProtocol(currentProtocol) {\r",
																	"    let alternativeProtocolList;\r",
																	"    alternativeProtocolList = [  \"tcp-client-interface-1-0:PROTOCOL_TYPE_HTTP\",\r",
																	"                                    \"tcp-client-interface-1-0:PROTOCOL_TYPE_HTTPS\"\r",
																	"                                ];\r",
																	"    let indexOfCurrentProtocol;\r",
																	"    indexOfCurrentProtocol = alternativeProtocolList.indexOf(currentProtocol);\r",
																	"    if (indexOfCurrentProtocol > -1) {\r",
																	"        alternativeProtocolList.splice(indexOfCurrentProtocol, 1);\r",
																	"    }\r",
																	"\r",
																	"    let alternativeProtocol;\r",
																	"    let alternativeProtocolIndex;\r",
																	"    alternativeProtocolIndex = Math.floor(Math.random() * alternativeProtocolList.length);\r",
																	"    alternativeProtocol = alternativeProtocolList[alternativeProtocolIndex]; \r",
																	"\r",
																	"    return alternativeProtocol;\r",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var RESPONSE_CODE;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"\r",
																	"    RESPONSE_CODE = parseInt(response.code);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Response Code could not be extracted.\");\r",
																	"}    \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Testing\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.test(\"POST /v1/bequeath-your-data-and-die responds 400, because of a non-object new-application-address\", function () {\r",
																	"        pm.expect(RESPONSE_CODE).to.equal(400);\r",
																	"    });\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Testing could not be executed.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "400",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Expected /v1/bequeath-your-data-and-die - new-application-address containing both properties",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"console.log(\"\\n-----  new-application-address containing both properties -------------------------------\");\r",
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"var OPERATION_KEY;\r",
																	"var newApplicationName;\r",
																	"var newApplicationRelease;\r",
																	"var dummyApplicationProtocol;\r",
																	"var dummyApplicationAddress;\r",
																	"var dummyApplicationPort;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"    let currentOperationServer;\r",
																	"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
																	"    \r",
																	"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																	"\r",
																	"    let newReleaseHttpClientLtp;\r",
																	"    newReleaseHttpClientLtp = pm.collectionVariables.get(\"newReleaseHttpClientLtp\");\r",
																	"\r",
																	"    newApplicationName = newReleaseHttpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
																	"\r",
																	"    newApplicationRelease = newReleaseHttpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"release-number\"];\r",
																	"\r",
																	"    let newReleaseTcpClientLtp;\r",
																	"    newReleaseTcpClientLtp = pm.collectionVariables.get(\"newReleaseTcpClientLtp\");\r",
																	"\r",
																	"    let protocol = newReleaseTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
																	"    dummyApplicationProtocol = GenerateDummyRemoteProtocol(protocol);\r",
																	"    dummyApplicationProtocol = dummyApplicationProtocol.substring(('tcp-client-interface-1-0:PROTOCOL_TYPE_').length);\r",
																	"\r",
																	"    let dummyIpv4Address = RandomIpAddress();\r",
																	"    let dummyDomainName = RandomDomainName();\r",
																	"    dummyApplicationAddress = {\r",
																	"        \"ip-address\": {\r",
																	"            \"ipv-4-address\": dummyIpv4Address\r",
																	"        }, \r",
																	"        \"domain-name\": dummyDomainName\r",
																	"    };\r",
																	"\r",
																	"    dummyApplicationPort = RandomTcpPort();\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Input Data could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Dummy Parameters\r",
																	"****************************************************************************************/\r",
																	"var USER_NAME;\r",
																	"var ORIGINATOR;\r",
																	"var X_CORRELATOR;\r",
																	"var TRACE_INDICATOR;\r",
																	"var CUSTOMER_JOURNEY;\r",
																	"try {\r",
																	"    USER_NAME = APPLICATION.userName;\r",
																	"    ORIGINATOR = \"Postman\";\r",
																	"    X_CORRELATOR = CreateXCorrelator();\r",
																	"    TRACE_INDICATOR = \"1\";\r",
																	"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																	"    \r",
																	"} catch (error) {\r",
																	"    console.log(\"! Could not define dummy values for parameters. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Request Body\r",
																	"****************************************************************************************/\r",
																	"var REQUEST_BODY;\r",
																	"try {\r",
																	"    REQUEST_BODY = '{'\r",
																	"        + '\"new-application-name\" : ' + '\"' + newApplicationName + '\",'\r",
																	"        + '\"new-application-release\" : ' + '\"' + newApplicationRelease + '\",'\r",
																	"        + '\"new-application-protocol\" : ' + '\"' + dummyApplicationProtocol + '\",'\r",
																	"        + '\"new-application-address\" : ' + JSON.stringify(dummyApplicationAddress) + ','\r",
																	"        + '\"new-application-port\" : ' +  dummyApplicationPort\r",
																	"    +'}';\r",
																	"} catch (error) {\r",
																	"    console.log(\"!Could not define request body. \");\r",
																	"}\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/v1/bequeath-your-data-and-die\";\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																	"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																	"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																	"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																	"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"function CreateXCorrelator() {\r",
																	"    let xCorrelator;\r",
																	"    xCorrelator = \"\";\r",
																	"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(12);\r",
																	"    return xCorrelator;\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomHexString(length) {\r",
																	"    var randomRandomHexString = \"\";\r",
																	"    while (randomRandomHexString.length < length) {\r",
																	"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																	"    }\r",
																	"    return randomRandomHexString.substring(0,length);\r",
																	"}\r",
																	"\r",
																	"function RandomIpAddress() {\r",
																	"    let randomAddress\r",
																	"    let addressParts = [];\r",
																	"    for ( let i=0; i<4; i++ ) {\r",
																	"        addressParts[i] = String(Math.floor(Math.random() * 256));\r",
																	"    }\r",
																	"    randomAddress = addressParts[0] + \".\" + addressParts[1] + \".\" + addressParts[2] + \".\" + addressParts[3];\r",
																	"    return randomAddress;\r",
																	"}\r",
																	"\r",
																	"function RandomDomainName() {\r",
																	"    let randomAddress;\r",
																	"    let dummySubdomain = GenerateRandomString(Math.floor(1 + Math.random() * 10));\r",
																	"    let randomDomainPartLength = Math.floor(2 + Math.random() * 5);\r",
																	"    let dummyDomainName = \"\";\r",
																	"    for(let i=0; i<randomDomainPartLength; i += 2 ) {\r",
																	"        dummyDomainName = dummyDomainName + GenerateRandomString(Math.floor(1 + Math.random() * 4));\r",
																	"        dummyDomainName = dummyDomainName + GenerateRandomSeparator();\r",
																	"        dummyDomainName = dummyDomainName + GenerateRandomString(Math.floor(1 + Math.random() * 4));\r",
																	"    }\r",
																	"    let dummyTopLevelDomain = GenerateRandomString(Math.floor(2 + Math.random() * 5));\r",
																	"    randomAddress = dummySubdomain + \".\" + dummyDomainName + \".\" + dummyTopLevelDomain; \r",
																	"    return randomAddress;\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomString(length) {\r",
																	"    let randomString;\r",
																	"    randomString = \"\";\r",
																	"    try {\r",
																	"        let characters = \"abcdefghijklmnopqrstuvwxyz\";\r",
																	"        let charactersLength = characters.length;\r",
																	"        for (let i = 0; i < length; i++) {\r",
																	"            randomString += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
																	"        }\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Could not generate random string. \");\r",
																	"    }\r",
																	"    return randomString;\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomSeparator() {\r",
																	"    let separators = [\".\", \"-\"];\r",
																	"    let randomSeparator = separators[Math.floor(Math.random() * separators.length)];\r",
																	"    return randomSeparator;\r",
																	"}\r",
																	"\r",
																	"function RandomTcpPort() {\r",
																	"    let randomPort;\r",
																	"    randomPort = 2000 + Math.floor( Math.random() * 1000 );\r",
																	"    return randomPort;\r",
																	"}\r",
																	"\r",
																	"function GenerateDummyRemoteProtocol(currentProtocol) {\r",
																	"    let alternativeProtocolList;\r",
																	"    alternativeProtocolList = [  \"tcp-client-interface-1-0:PROTOCOL_TYPE_HTTP\",\r",
																	"                                    \"tcp-client-interface-1-0:PROTOCOL_TYPE_HTTPS\"\r",
																	"                                ];\r",
																	"    let indexOfCurrentProtocol;\r",
																	"    indexOfCurrentProtocol = alternativeProtocolList.indexOf(currentProtocol);\r",
																	"    if (indexOfCurrentProtocol > -1) {\r",
																	"        alternativeProtocolList.splice(indexOfCurrentProtocol, 1);\r",
																	"    }\r",
																	"\r",
																	"    let alternativeProtocol;\r",
																	"    let alternativeProtocolIndex;\r",
																	"    alternativeProtocolIndex = Math.floor(Math.random() * alternativeProtocolList.length);\r",
																	"    alternativeProtocol = alternativeProtocolList[alternativeProtocolIndex]; \r",
																	"\r",
																	"    return alternativeProtocol;\r",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var RESPONSE_CODE;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"\r",
																	"    RESPONSE_CODE = parseInt(response.code);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Response Code could not be extracted.\");\r",
																	"}    \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Testing\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.test(\"POST /v1/bequeath-your-data-and-die responds 400, because new-application-address containing both properties\", function () {\r",
																	"        pm.expect(RESPONSE_CODE).to.equal(400);\r",
																	"    });\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Testing could not be executed.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "400",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												}
											]
										}
									],
									"description": "## Get new-application-address checked for correctness?\n#### Preparation:\n- GETing CC (/core-model-1-4:control-construct)\n  - searching CC for op-s of /v1/bequeath-your-data-and-die, storing operation-key\n  - searcing CC for output port of PromptForBequeathingDataCausesTransferOfListOfApplications, find corresponding op-c, http-c and tcp-c, store them\n- POST /v1/bequeath-your-data-and-die with\n  - new-application-name and new-application-release according to chosen http-c\n  - new-application-protocol, new-application-port with random generated dummy values (assure sufficiently high probability that set does not exist!)\n  - new-application-address attribute with random dummy value differing from specified pattern in different non-matching ways.\n  - operation-key from above\n  - reasonable parameters\n\n#### Testing:\n- checking for ResponseCode==400\n\n#### Clearing:\n- not applicable"
								},
								{
									"name": "new-application-port checked?",
									"item": [
										{
											"name": "reference /core-model-1-4:control-construct",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n-----  /v1/bequeath-your-data-and-die acceptance -- new-application-port attribute checked? -------------------------------\");\r",
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"var APPLICATION;\r",
															"try {\r",
															"    APPLICATION = pm.environment.get(\"application\");\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Environment variables could not be loaded.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Setting Local Variables and Preparing the Request\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    let URI;\r",
															"    URI = APPLICATION.serverUrl + \"/core-model-1-4:control-construct\";\r",
															"\r",
															"    let REQUEST_BODY;\r",
															"    REQUEST_BODY = \"\";\r",
															"\r",
															"    let AUTHORIZATION;\r",
															"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
															"\r",
															"    let ACCEPT;\r",
															"    ACCEPT = \"application/json\";\r",
															"\r",
															"    let CONTENT_TYPE;\r",
															"    CONTENT_TYPE = \"application/json\";\r",
															"\r",
															"\r",
															"    pm.variables.clear();\r",
															"\r",
															"    pm.variables.set(\"uri\", URI);\r",
															"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
															"\r",
															"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
															"\r",
															"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
															"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Local variables could not be set.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Extracting Result\r",
															"****************************************************************************************/\r",
															"var ltpList;\r",
															"var fcList;\r",
															"try {\r",
															"    let response;\r",
															"    response = pm.response;\r",
															"    \r",
															"    let responseCode;\r",
															"    responseCode = parseInt(response.code);\r",
															"    \r",
															"    if ( Math.floor(responseCode/100) === 2 ) {\r",
															"        let responseObject;\r",
															"        responseObject = JSON.parse(response.stream);\r",
															"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
															"        fcList = responseObject[\"core-model-1-4:control-construct\"][\"forwarding-domain\"][0][\"forwarding-construct\"];\r",
															"\r",
															"    } else {\r",
															"        ltpList = [];\r",
															"        fcList = [];\r",
															"    }\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! ltpList could not be extracted.\");\r",
															"}\r",
															"\r",
															"var currentOperationServer;\r",
															"var newReleaseHttpClientLtp;\r",
															"var newReleaseTcpClientLtp;\r",
															"try {\r",
															"    currentOperationServer = FindOperationServer(\"/v1/bequeath-your-data-and-die\", ltpList);\r",
															"\r",
															"    //Bequeath Transfer Of List Of Applications\r",
															"    let bequeathingDataCausesTransferOfListOfApplicationsOperationClientLtp = FindOperationClientUsingCallback(\"PromptForBequeathingDataCausesTransferOfListOfApplications\", fcList, ltpList)\r",
															"\r",
															"    newReleaseHttpClientLtp = FindServingLtp(bequeathingDataCausesTransferOfListOfApplicationsOperationClientLtp, ltpList);\r",
															"    newReleaseTcpClientLtp = FindServingLtp(newReleaseHttpClientLtp, ltpList); \r",
															"} catch (error) {\r",
															"    console.log(error);\r",
															"    console.log(\"! Reference objects could not be extracted.\");\r",
															"} \r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Setting Collection Variables\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    pm.collectionVariables.clear();\r",
															"    \r",
															"    pm.collectionVariables.set(\"currentOperationServer\", currentOperationServer);\r",
															"    pm.collectionVariables.set(\"newReleaseHttpClientLtp\", newReleaseHttpClientLtp);\r",
															"    pm.collectionVariables.set(\"newReleaseTcpClientLtp\", newReleaseTcpClientLtp);\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Collection variables could not be set.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/\r",
															"\r",
															"function FindOperationServer(operationName, ltpList) {\r",
															"    let operationServer;\r",
															"    operationServer = \"\";\r",
															"    try {\r",
															"        let sampleUuid;\r",
															"        for(let i=0; i<ltpList.length; i++) {\r",
															"            sampleUuid = ltpList[i][\"uuid\"];\r",
															"            if(sampleUuid.includes(\"op-s-\")) {\r",
															"                let sampleOperationName;\r",
															"                sampleOperationName = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
															"                if(sampleOperationName == operationName) {\r",
															"                    operationServer = ltpList[i];\r",
															"                    return operationServer;\r",
															"                }\r",
															"            }\r",
															"        }\r",
															"    } catch (error) {\r",
															"        console.log(\"! Exception in function : FindOperationServer. \");\r",
															"    }\r",
															"    return operationServer;\r",
															"}\r",
															"\r",
															"function FindOutputFcPortList(forwardingName, fcList) {\r",
															"    let outputFcPortList;\r",
															"    outputFcPortList = [];\r",
															"    try {\r",
															"        for( let i=0; i<fcList.length; i++ ) {\r",
															"            for(let j=0; j<fcList[i][\"name\"].length; j++) {               \r",
															"                if(fcList[i][\"name\"][j][\"value\"] == forwardingName) {\r",
															"                    fcPortList = fcList[i][\"fc-port\"];\r",
															"                    for(let k=0;k<fcPortList.length;k++) {\r",
															"                        if(fcPortList[k][\"port-direction\"] == \"core-model-1-4:PORT_DIRECTION_TYPE_OUTPUT\") {\r",
															"                            outputFcPortList.push(fcPortList[k]);\r",
															"                        }\r",
															"                    }\r",
															"                    return outputFcPortList;\r",
															"                }\r",
															"            }\r",
															"        }\r",
															"    } catch (error) {\r",
															"        console.log(\"! Exception in function FindOutputFcPortList. \");\r",
															"    }\r",
															"    return outputFcPortList;\r",
															"}\r",
															"\r",
															"function FindActualInstanceByUuid(expectedUuid, actualLtpList) {\r",
															"    let actualInstance;\r",
															"    actualInstance = {};\r",
															"    try {\r",
															"        for ( let i=0; i<actualLtpList.length; i++ ) {\r",
															"            let sampleUuid;\r",
															"            sampleUuid = actualLtpList[i][\"uuid\"];\r",
															"            if( sampleUuid == expectedUuid ) {\r",
															"                actualInstance = actualLtpList[i];\r",
															"                return actualInstance;\r",
															"            }\r",
															"        }\r",
															"\r",
															"    } catch (error) {\r",
															"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
															"    }\r",
															"    return undefined;\r",
															"}\r",
															"\r",
															"function FindServingLtp(clientLtp, ltpList) {\r",
															"    let servingLtp;\r",
															"    servingLtp = {};\r",
															"    try{\r",
															"        let serverLtpUuid;\r",
															"        serverLtpUuid = clientLtp[\"server-ltp\"][0];\r",
															"        for( let i=0; i<ltpList.length; i++ ) {\r",
															"            let sampleUuid;\r",
															"            sampleUuid = ltpList[i][\"uuid\"];\r",
															"            if( sampleUuid == serverLtpUuid ) {\r",
															"                servingLtp = ltpList[i];\r",
															"                return servingLtp;\r",
															"            }\r",
															"        }\r",
															"    } catch(error) {\r",
															"        console.log(error);\r",
															"        console.log(\"! Exception in function : FindServingLtp. \")\r",
															"    }\r",
															"    return servingLtp;\r",
															"}\r",
															"\r",
															"function FindOperationClientUsingCallback(callback, fcList, ltpList) {\r",
															"    let operationClientLtp\r",
															"    try {\r",
															"        let outputFcPortList = FindOutputFcPortList(callback, fcList);\r",
															"        let randomOutputFcPort = outputFcPortList[Math.floor(Math.random() * outputFcPortList.length)];\r",
															"        let outputLtpUuid = randomOutputFcPort[\"logical-termination-point\"];\r",
															"        operationClientLtp = FindActualInstanceByUuid(outputLtpUuid, ltpList);\r",
															"    } catch (error) {\r",
															"        console.log(error);\r",
															"        console.log(\"! Exception in function FindOperationClientUsingCallback. \");\r",
															"    }\r",
															"    return  operationClientLtp\r",
															"}\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "x-mock-response-code",
														"value": "200",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Expected  /v1/bequeath-your-data-and-die - out-of-range new-application-port",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n-----  out of range new-application-port -------------------------------\");\r",
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"var APPLICATION;\r",
															"var OPERATION_KEY;\r",
															"var newApplicationName;\r",
															"var newApplicationRelease;\r",
															"var dummyApplicationProtocol;\r",
															"var dummyApplicationAddress;\r",
															"var faultyApplicationPort;\r",
															"try {\r",
															"    APPLICATION = pm.environment.get(\"application\");\r",
															"\r",
															"    let currentOperationServer;\r",
															"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
															"    \r",
															"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
															"\r",
															"    let newReleaseHttpClientLtp;\r",
															"    newReleaseHttpClientLtp = pm.collectionVariables.get(\"newReleaseHttpClientLtp\");\r",
															"\r",
															"    newApplicationName = newReleaseHttpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
															"\r",
															"    newApplicationRelease = newReleaseHttpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"release-number\"];\r",
															"\r",
															"    let newReleaseTcpClientLtp;\r",
															"    newReleaseTcpClientLtp = pm.collectionVariables.get(\"newReleaseTcpClientLtp\");\r",
															"\r",
															"    let protocol = newReleaseTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
															"    dummyApplicationProtocol = GenerateDummyRemoteProtocol(protocol);\r",
															"    dummyApplicationProtocol = dummyApplicationProtocol.substring(('tcp-client-interface-1-0:PROTOCOL_TYPE_').length);\r",
															"\r",
															"    let dummyIpv4Address = RandomIpAddress();\r",
															"    dummyApplicationAddress = {\r",
															"        \"ip-address\": {\r",
															"            \"ipv-4-address\": dummyIpv4Address\r",
															"        }\r",
															"    };\r",
															"\r",
															"    faultyApplicationPort = FaultyPort();\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(error);\r",
															"    console.log(\"! Input Data could not be loaded.\");\r",
															"}\r",
															"\r",
															"/****************************************************************************************\r",
															"* Defining Dummy Parameters\r",
															"****************************************************************************************/\r",
															"var USER_NAME;\r",
															"var ORIGINATOR;\r",
															"var X_CORRELATOR;\r",
															"var TRACE_INDICATOR;\r",
															"var CUSTOMER_JOURNEY;\r",
															"try {\r",
															"    USER_NAME = APPLICATION.userName;\r",
															"    ORIGINATOR = \"Postman\";\r",
															"    X_CORRELATOR = CreateXCorrelator();\r",
															"    TRACE_INDICATOR = \"1\";\r",
															"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
															"    \r",
															"} catch (error) {\r",
															"    console.log(\"! Could not define dummy values for parameters. \");\r",
															"}\r",
															"\r",
															"/****************************************************************************************\r",
															"* Defining Request Body\r",
															"****************************************************************************************/\r",
															"var REQUEST_BODY;\r",
															"try {\r",
															"    REQUEST_BODY = '{'\r",
															"        + '\"new-application-name\" : ' + '\"' + newApplicationName + '\",'\r",
															"        + '\"new-application-release\" : ' + '\"' + newApplicationRelease + '\",'\r",
															"        + '\"new-application-protocol\" : ' + '\"' + dummyApplicationProtocol + '\",'\r",
															"        + '\"new-application-address\" : ' + JSON.stringify(dummyApplicationAddress) + ','\r",
															"        + '\"new-application-port\" : ' +  faultyApplicationPort\r",
															"    +'}';\r",
															"} catch (error) {\r",
															"    console.log(\"!Could not define request body. \");\r",
															"}\r",
															"/****************************************************************************************\r",
															"* Setting Collection Variables\r",
															"****************************************************************************************/\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Setting Local Variables and Preparing the Request\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    let URI;\r",
															"    URI = APPLICATION.serverUrl + \"/v1/bequeath-your-data-and-die\";\r",
															"\r",
															"    let ACCEPT;\r",
															"    ACCEPT = \"application/json\";\r",
															"\r",
															"    let CONTENT_TYPE;\r",
															"    CONTENT_TYPE = \"application/json\";\r",
															"\r",
															"    pm.variables.clear();\r",
															"\r",
															"    pm.variables.set(\"uri\", URI);\r",
															"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
															"\r",
															"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
															"\r",
															"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
															"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
															"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
															"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
															"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
															"\r",
															"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
															"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(error);\r",
															"    console.log(\"! Local variables could not be set.\");\r",
															"}\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/\r",
															"\r",
															"function CreateXCorrelator() {\r",
															"    let xCorrelator;\r",
															"    xCorrelator = \"\";\r",
															"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
															"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
															"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
															"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
															"    xCorrelator += GenerateRandomHexString(12);\r",
															"    return xCorrelator;\r",
															"}\r",
															"\r",
															"function GenerateRandomHexString(length) {\r",
															"    var randomRandomHexString = \"\";\r",
															"    while (randomRandomHexString.length < length) {\r",
															"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
															"    }\r",
															"    return randomRandomHexString.substring(0,length);\r",
															"}\r",
															"\r",
															"function FaultyPort() {\r",
															"    let randomPort;\r",
															"    randomPort = 2000 + Math.floor( Math.random() * 1000 ) + 65535;\r",
															"    return randomPort;\r",
															"}\r",
															"\r",
															"function RandomIpAddress() {\r",
															"    let randomAddress\r",
															"    let addressParts = [];\r",
															"    for ( let i=0; i<4; i++ ) {\r",
															"        addressParts[i] = String(Math.floor(Math.random() * 256));\r",
															"    }\r",
															"    randomAddress = addressParts[0] + \".\" + addressParts[1] + \".\" + addressParts[2] + \".\" + addressParts[3];\r",
															"    return randomAddress;\r",
															"}\r",
															"\r",
															"function GenerateDummyRemoteProtocol(currentProtocol) {\r",
															"    let alternativeProtocolList;\r",
															"    alternativeProtocolList = [  \"tcp-client-interface-1-0:PROTOCOL_TYPE_HTTP\",\r",
															"                                    \"tcp-client-interface-1-0:PROTOCOL_TYPE_HTTPS\"\r",
															"                                ];\r",
															"    let indexOfCurrentProtocol;\r",
															"    indexOfCurrentProtocol = alternativeProtocolList.indexOf(currentProtocol);\r",
															"    if (indexOfCurrentProtocol > -1) {\r",
															"        alternativeProtocolList.splice(indexOfCurrentProtocol, 1);\r",
															"    }\r",
															"\r",
															"    let alternativeProtocol;\r",
															"    let alternativeProtocolIndex;\r",
															"    alternativeProtocolIndex = Math.floor(Math.random() * alternativeProtocolList.length);\r",
															"    alternativeProtocol = alternativeProtocolList[alternativeProtocolIndex]; \r",
															"\r",
															"    return alternativeProtocol;\r",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Extracting Result\r",
															"****************************************************************************************/\r",
															"var RESPONSE_CODE;\r",
															"try {\r",
															"    let response;\r",
															"    response = pm.response;\r",
															"\r",
															"    RESPONSE_CODE = parseInt(response.code);\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Response Code could not be extracted.\");\r",
															"}    \r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Testing\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    pm.test(\"POST /v1/bequeath-your-data-and-die responds 400, because of out-of-range new-application-port\", function () {\r",
															"        pm.expect(RESPONSE_CODE).to.equal(400);\r",
															"    });\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Testing could not be executed.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-mock-response-code",
														"value": "400",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Expected  /v1/bequeath-your-data-and-die- string value new-application-port",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n-----  string value new-application-port -------------------------------\");\r",
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"var APPLICATION;\r",
															"var OPERATION_KEY;\r",
															"var newApplicationName;\r",
															"var newApplicationRelease;\r",
															"var dummyApplicationProtocol;\r",
															"var dummyApplicationAddress;\r",
															"var faultyApplicationPort;\r",
															"try {\r",
															"    APPLICATION = pm.environment.get(\"application\");\r",
															"\r",
															"    let currentOperationServer;\r",
															"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
															"    \r",
															"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
															"\r",
															"    let newReleaseHttpClientLtp;\r",
															"    newReleaseHttpClientLtp = pm.collectionVariables.get(\"newReleaseHttpClientLtp\");\r",
															"\r",
															"    newApplicationName = newReleaseHttpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
															"\r",
															"    newApplicationRelease = newReleaseHttpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"release-number\"];\r",
															"\r",
															"    let newReleaseTcpClientLtp;\r",
															"    newReleaseTcpClientLtp = pm.collectionVariables.get(\"newReleaseTcpClientLtp\");\r",
															"\r",
															"    let protocol = newReleaseTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
															"    dummyApplicationProtocol = GenerateDummyRemoteProtocol(protocol);\r",
															"    dummyApplicationProtocol = dummyApplicationProtocol.substring(('tcp-client-interface-1-0:PROTOCOL_TYPE_').length);\r",
															"\r",
															"    let dummyIpv4Address = RandomIpAddress();\r",
															"    dummyApplicationAddress = {\r",
															"        \"ip-address\": {\r",
															"            \"ipv-4-address\": dummyIpv4Address\r",
															"        }\r",
															"    };\r",
															"\r",
															"    faultyApplicationPort = RandomTcpPort();\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(error);\r",
															"    console.log(\"! Input Data could not be loaded.\");\r",
															"}\r",
															"\r",
															"/****************************************************************************************\r",
															"* Defining Dummy Parameters\r",
															"****************************************************************************************/\r",
															"var USER_NAME;\r",
															"var ORIGINATOR;\r",
															"var X_CORRELATOR;\r",
															"var TRACE_INDICATOR;\r",
															"var CUSTOMER_JOURNEY;\r",
															"try {\r",
															"    USER_NAME = APPLICATION.userName;\r",
															"    ORIGINATOR = \"Postman\";\r",
															"    X_CORRELATOR = CreateXCorrelator();\r",
															"    TRACE_INDICATOR = \"1\";\r",
															"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
															"    \r",
															"} catch (error) {\r",
															"    console.log(\"! Could not define dummy values for parameters. \");\r",
															"}\r",
															"\r",
															"/****************************************************************************************\r",
															"* Defining Request Body\r",
															"****************************************************************************************/\r",
															"var REQUEST_BODY;\r",
															"try {\r",
															"    REQUEST_BODY = '{'\r",
															"        + '\"new-application-name\" : ' + '\"' + newApplicationName + '\",'\r",
															"        + '\"new-application-release\" : ' + '\"' + newApplicationRelease + '\",'\r",
															"        + '\"new-application-protocol\" : ' + '\"' + dummyApplicationProtocol + '\",'\r",
															"        + '\"new-application-address\" : ' + JSON.stringify(dummyApplicationAddress) + ','\r",
															"        + '\"new-application-port\" : ' + '\"' + faultyApplicationPort + '\"'\r",
															"    +'}';\r",
															"} catch (error) {\r",
															"    console.log(\"!Could not define request body. \");\r",
															"}\r",
															"/****************************************************************************************\r",
															"* Setting Collection Variables\r",
															"****************************************************************************************/\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Setting Local Variables and Preparing the Request\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    let URI;\r",
															"    URI = APPLICATION.serverUrl + \"/v1/bequeath-your-data-and-die\";\r",
															"\r",
															"    let ACCEPT;\r",
															"    ACCEPT = \"application/json\";\r",
															"\r",
															"    let CONTENT_TYPE;\r",
															"    CONTENT_TYPE = \"application/json\";\r",
															"\r",
															"    pm.variables.clear();\r",
															"\r",
															"    pm.variables.set(\"uri\", URI);\r",
															"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
															"\r",
															"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
															"\r",
															"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
															"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
															"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
															"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
															"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
															"\r",
															"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
															"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(error);\r",
															"    console.log(\"! Local variables could not be set.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/\r",
															"\r",
															"function CreateXCorrelator() {\r",
															"    let xCorrelator;\r",
															"    xCorrelator = \"\";\r",
															"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
															"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
															"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
															"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
															"    xCorrelator += GenerateRandomHexString(12);\r",
															"    return xCorrelator;\r",
															"}\r",
															"\r",
															"function GenerateRandomHexString(length) {\r",
															"    var randomRandomHexString = \"\";\r",
															"    while (randomRandomHexString.length < length) {\r",
															"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
															"    }\r",
															"    return randomRandomHexString.substring(0,length);\r",
															"}\r",
															"\r",
															"function RandomTcpPort() {\r",
															"    let randomPort;\r",
															"    randomPort = 2000 + Math.floor( Math.random() * 1000 );\r",
															"    return randomPort;\r",
															"}\r",
															"\r",
															"function RandomIpAddress() {\r",
															"    let randomAddress\r",
															"    let addressParts = [];\r",
															"    for ( let i=0; i<4; i++ ) {\r",
															"        addressParts[i] = String(Math.floor(Math.random() * 256));\r",
															"    }\r",
															"    randomAddress = addressParts[0] + \".\" + addressParts[1] + \".\" + addressParts[2] + \".\" + addressParts[3];\r",
															"    return randomAddress;\r",
															"}\r",
															"\r",
															"function GenerateDummyRemoteProtocol(currentProtocol) {\r",
															"    let alternativeProtocolList;\r",
															"    alternativeProtocolList = [  \"tcp-client-interface-1-0:PROTOCOL_TYPE_HTTP\",\r",
															"                                    \"tcp-client-interface-1-0:PROTOCOL_TYPE_HTTPS\"\r",
															"                                ];\r",
															"    let indexOfCurrentProtocol;\r",
															"    indexOfCurrentProtocol = alternativeProtocolList.indexOf(currentProtocol);\r",
															"    if (indexOfCurrentProtocol > -1) {\r",
															"        alternativeProtocolList.splice(indexOfCurrentProtocol, 1);\r",
															"    }\r",
															"\r",
															"    let alternativeProtocol;\r",
															"    let alternativeProtocolIndex;\r",
															"    alternativeProtocolIndex = Math.floor(Math.random() * alternativeProtocolList.length);\r",
															"    alternativeProtocol = alternativeProtocolList[alternativeProtocolIndex]; \r",
															"\r",
															"    return alternativeProtocol;\r",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Extracting Result\r",
															"****************************************************************************************/\r",
															"var RESPONSE_CODE;\r",
															"try {\r",
															"    let response;\r",
															"    response = pm.response;\r",
															"\r",
															"    RESPONSE_CODE = parseInt(response.code);\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Response Code could not be extracted.\");\r",
															"}    \r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Testing\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    pm.test(\"POST /v1/bequeath-your-data-and-die responds 400, because of non-integer new-application-port\", function () {\r",
															"        pm.expect(RESPONSE_CODE).to.equal(400);\r",
															"    });\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Testing could not be executed.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-mock-response-code",
														"value": "400",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"description": "## Get new-application-port checked for correctness?\n#### Preparation:\n- GETing CC (/core-model-1-4:control-construct)\n  - searching CC for op-s of /v1/bequeath-your-data-and-die, storing operation-key\n  - searcing CC for output port of PromptForBequeathingDataCausesTransferOfListOfApplications, find corresponding op-c, http-c and tcp-c, store them.\n- POST /v1/bequeath-your-data-and-die with\n  - new-application-name and new-application-reasease according to chosen http-c\n  - new-application-protocol, new-application-address with random generated dummy values (assure sufficiently high probability that set does not exist!)\n  - new-application-port attribute with random dummy value differing from specified range.\n  - operation-key from above\n  - reasonable parameters\n\n#### Testing:\n- checking for ResponseCode==400\n\n#### Clearing:\n- not applicable"
								}
							]
						},
						{
							"name": "Attribute configured?",
							"item": [
								{
									"name": "new-application-name updated?",
									"item": [
										{
											"name": "reference /core-model-1-4:control-construct",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n----- /v1/bequeath-your-data-and-die acceptance -- new-application-name attribute updated? -------------------------------\");\r",
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"var APPLICATION;\r",
															"try {\r",
															"    APPLICATION = pm.environment.get(\"application\");\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Environment variables could not be loaded.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Setting Local Variables and Preparing the Request\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    let URI;\r",
															"    URI = APPLICATION.serverUrl + \"/core-model-1-4:control-construct\";\r",
															"\r",
															"    let REQUEST_BODY;\r",
															"    REQUEST_BODY = \"\";\r",
															"\r",
															"    let AUTHORIZATION;\r",
															"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
															"\r",
															"    let ACCEPT;\r",
															"    ACCEPT = \"application/json\";\r",
															"\r",
															"    let CONTENT_TYPE;\r",
															"    CONTENT_TYPE = \"application/json\";\r",
															"\r",
															"\r",
															"    pm.variables.clear();\r",
															"\r",
															"    pm.variables.set(\"uri\", URI);\r",
															"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
															"\r",
															"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
															"\r",
															"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
															"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Local variables could not be set.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Extracting Result\r",
															"****************************************************************************************/\r",
															"var ltpList;\r",
															"var fcList;\r",
															"try {\r",
															"    let response;\r",
															"    response = pm.response;\r",
															"    \r",
															"    let responseCode;\r",
															"    responseCode = parseInt(response.code);\r",
															"    \r",
															"    if ( Math.floor(responseCode/100) === 2 ) {\r",
															"        let responseObject;\r",
															"        responseObject = JSON.parse(response.stream);\r",
															"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
															"        fcList = responseObject[\"core-model-1-4:control-construct\"][\"forwarding-domain\"][0][\"forwarding-construct\"];\r",
															"\r",
															"    } else {\r",
															"        ltpList = [];\r",
															"        fcList = [];\r",
															"    }\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! ltpList could not be extracted.\");\r",
															"}\r",
															"\r",
															"var currentOperationServer;\r",
															"var newReleaseHttpClientLtp;\r",
															"var newReleaseTcpClientLtp;\r",
															"try {\r",
															"    currentOperationServer = FindOperationServer(\"/v1/bequeath-your-data-and-die\", ltpList);\r",
															"\r",
															"    //Bequeath Transfer Of List Of Applications\r",
															"    let bequeathingDataCausesTransferOfListOfApplicationsOperationClientLtp = FindOperationClientUsingCallback(\"PromptForBequeathingDataCausesTransferOfListOfApplications\", fcList, ltpList)\r",
															"\r",
															"    newReleaseHttpClientLtp = FindServingLtp(bequeathingDataCausesTransferOfListOfApplicationsOperationClientLtp, ltpList);\r",
															"    newReleaseTcpClientLtp = FindServingLtp(newReleaseHttpClientLtp, ltpList); \r",
															"} catch (error) {\r",
															"    console.log(error);\r",
															"    console.log(\"! Reference objects could not be extracted.\");\r",
															"}\r",
															"\r",
															"/****************************************************************************************\r",
															"* Setting Collection Variables\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    pm.collectionVariables.clear();\r",
															"    \r",
															"    pm.collectionVariables.set(\"currentOperationServer\", currentOperationServer);\r",
															"    pm.collectionVariables.set(\"newReleaseHttpClientLtp\", newReleaseHttpClientLtp);\r",
															"    pm.collectionVariables.set(\"newReleaseTcpClientLtp\", newReleaseTcpClientLtp);\r",
															"    pm.collectionVariables.set(\"ltpList\", ltpList);\r",
															"    pm.collectionVariables.set(\"fcList\", fcList);\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Collection variables could not be set.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/\r",
															"\r",
															"function FindOperationServer(operationName, ltpList) {\r",
															"    let operationServer;\r",
															"    operationServer = \"\";\r",
															"    try {\r",
															"        let sampleUuid;\r",
															"        for(let i=0; i<ltpList.length; i++) {\r",
															"            sampleUuid = ltpList[i][\"uuid\"];\r",
															"            if(sampleUuid.includes(\"op-s-\")) {\r",
															"                let sampleOperationName;\r",
															"                sampleOperationName = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
															"                if(sampleOperationName == operationName) {\r",
															"                    operationServer = ltpList[i];\r",
															"                    return operationServer;\r",
															"                }\r",
															"            }\r",
															"        }\r",
															"    } catch (error) {\r",
															"        console.log(\"! Exception in function : FindOperationServer. \");\r",
															"    }\r",
															"    return operationServer;\r",
															"}\r",
															"\r",
															"function FindOutputFcPortList(forwardingName, fcList) {\r",
															"    let outputFcPortList;\r",
															"    outputFcPortList = [];\r",
															"    try {\r",
															"        for( let i=0; i<fcList.length; i++ ) {\r",
															"            for(let j=0; j<fcList[i][\"name\"].length; j++) {               \r",
															"                if(fcList[i][\"name\"][j][\"value\"] == forwardingName) {\r",
															"                    fcPortList = fcList[i][\"fc-port\"];\r",
															"                    for(let k=0;k<fcPortList.length;k++) {\r",
															"                        if(fcPortList[k][\"port-direction\"] == \"core-model-1-4:PORT_DIRECTION_TYPE_OUTPUT\") {\r",
															"                            outputFcPortList.push(fcPortList[k]);\r",
															"                        }\r",
															"                    }\r",
															"                    return outputFcPortList;\r",
															"                }\r",
															"            }\r",
															"        }\r",
															"    } catch (error) {\r",
															"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
															"    }\r",
															"    return outputFcPortList;\r",
															"}\r",
															"\r",
															"function FindActualInstanceByUuid(expectedUuid, actualLtpList) {\r",
															"    let actualInstance;\r",
															"    actualInstance = {};\r",
															"    try {\r",
															"        for ( let i=0; i<actualLtpList.length; i++ ) {\r",
															"            let sampleUuid;\r",
															"            sampleUuid = actualLtpList[i][\"uuid\"];\r",
															"            if( sampleUuid == expectedUuid ) {\r",
															"                actualInstance = actualLtpList[i];\r",
															"                return actualInstance;\r",
															"            }\r",
															"        }\r",
															"\r",
															"    } catch (error) {\r",
															"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
															"    }\r",
															"    return undefined;\r",
															"}\r",
															"\r",
															"function FindServingLtp(clientLtp, ltpList) {\r",
															"    let servingLtp;\r",
															"    servingLtp = {};\r",
															"    try{\r",
															"        let serverLtpUuid;\r",
															"        serverLtpUuid = clientLtp[\"server-ltp\"][0];\r",
															"        for( let i=0; i<ltpList.length; i++ ) {\r",
															"            let sampleUuid;\r",
															"            sampleUuid = ltpList[i][\"uuid\"];\r",
															"            if( sampleUuid == serverLtpUuid ) {\r",
															"                servingLtp = ltpList[i];\r",
															"                return servingLtp;\r",
															"            }\r",
															"        }\r",
															"    } catch(error) {\r",
															"        console.log(error);\r",
															"        console.log(\"! Exception in function : FindServingLtp. \")\r",
															"    }\r",
															"    return servingLtp;\r",
															"}\r",
															"\r",
															"function FindOperationClientUsingCallback(callback, fcList, ltpList) {\r",
															"    let operationClientLtp\r",
															"    try {\r",
															"        let outputFcPortList = FindOutputFcPortList(callback, fcList);\r",
															"        let randomOutputFcPort = outputFcPortList[Math.floor(Math.random() * outputFcPortList.length)];\r",
															"        let outputLtpUuid = randomOutputFcPort[\"logical-termination-point\"];\r",
															"        operationClientLtp = FindActualInstanceByUuid(outputLtpUuid, ltpList);\r",
															"    } catch (error) {\r",
															"        console.log(error);\r",
															"        console.log(\"! Exception in function FindOperationClientUsingCallback. \");\r",
															"    }\r",
															"    return  operationClientLtp\r",
															"}\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "x-mock-response-code",
														"value": "200",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Dummy /v1/bequeath-your-data-and-die",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"var APPLICATION;\r",
															"var OPERATION_KEY;\r",
															"var dummyNewApplicationName;\r",
															"var newApplicationRelease;\r",
															"var dummyApplicationProtocol;\r",
															"var dummyApplicationAddress;\r",
															"var dummyApplicationPort\r",
															"try {\r",
															"    APPLICATION = pm.environment.get(\"application\");\r",
															"\r",
															"    let currentOperationServer;\r",
															"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
															"    \r",
															"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
															"\r",
															"    dummyNewApplicationName = GenerateRandomString(12);\r",
															"\r",
															"    let newReleaseHttpClientLtp;\r",
															"    newReleaseHttpClientLtp = pm.collectionVariables.get(\"newReleaseHttpClientLtp\");\r",
															"    newApplicationRelease = newReleaseHttpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"release-number\"];\r",
															"\r",
															"    let newReleaseTcpClientLtp;\r",
															"    newReleaseTcpClientLtp = pm.collectionVariables.get(\"newReleaseTcpClientLtp\");\r",
															"\r",
															"    let protocol = newReleaseTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
															"    dummyApplicationProtocol = GenerateDummyRemoteProtocol(protocol);\r",
															"    dummyApplicationProtocol = dummyApplicationProtocol.substring(('tcp-client-interface-1-0:PROTOCOL_TYPE_').length);\r",
															"\r",
															"    let dummyIpv4Address = RandomIpAddress();\r",
															"    dummyApplicationAddress = {\r",
															"        \"ip-address\": {\r",
															"            \"ipv-4-address\": dummyIpv4Address\r",
															"        }\r",
															"    };\r",
															"    dummyApplicationPort = RandomTcpPort();\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(error);\r",
															"    console.log(\"! Input Data could not be loaded.\");\r",
															"}\r",
															"\r",
															"/****************************************************************************************\r",
															"* Defining Dummy Parameters\r",
															"****************************************************************************************/\r",
															"var USER_NAME;\r",
															"var ORIGINATOR;\r",
															"var X_CORRELATOR;\r",
															"var TRACE_INDICATOR;\r",
															"var CUSTOMER_JOURNEY;\r",
															"try {\r",
															"    USER_NAME = APPLICATION.userName;\r",
															"    ORIGINATOR = \"Postman\";\r",
															"    X_CORRELATOR = CreateXCorrelator();\r",
															"    TRACE_INDICATOR = \"1\";\r",
															"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
															"    \r",
															"} catch (error) {\r",
															"    console.log(\"! Could not define dummy values for parameters. \");\r",
															"}\r",
															"\r",
															"/****************************************************************************************\r",
															"* Defining Request Body\r",
															"****************************************************************************************/\r",
															"var REQUEST_BODY;\r",
															"try {\r",
															"    REQUEST_BODY = '{'\r",
															"        + '\"new-application-name\" : ' + '\"' + dummyNewApplicationName + '\",'\r",
															"        + '\"new-application-release\" : ' + '\"' + newApplicationRelease + '\",'\r",
															"        + '\"new-application-protocol\" : ' + '\"' + dummyApplicationProtocol + '\",'\r",
															"        + '\"new-application-address\" : ' + JSON.stringify(dummyApplicationAddress) + ','\r",
															"        + '\"new-application-port\" : ' +  dummyApplicationPort\r",
															"    +'}';\r",
															"} catch (error) {\r",
															"    console.log(\"!Could not define request body. \");\r",
															"}\r",
															"/****************************************************************************************\r",
															"* Setting Collection Variables\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    pm.collectionVariables.set(\"dummyNewApplicationName\", dummyNewApplicationName);\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Collection variables could not be set.\");\r",
															"}\r",
															"\r",
															"/****************************************************************************************\r",
															"* Setting Local Variables and Preparing the Request\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    let URI;\r",
															"    URI = APPLICATION.serverUrl + \"/v1/bequeath-your-data-and-die\";\r",
															"\r",
															"    let ACCEPT;\r",
															"    ACCEPT = \"application/json\";\r",
															"\r",
															"    let CONTENT_TYPE;\r",
															"    CONTENT_TYPE = \"application/json\";\r",
															"\r",
															"    pm.variables.clear();\r",
															"\r",
															"    pm.variables.set(\"uri\", URI);\r",
															"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
															"\r",
															"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
															"\r",
															"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
															"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
															"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
															"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
															"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
															"\r",
															"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
															"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(error);\r",
															"    console.log(\"! Local variables could not be set.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/\r",
															"\r",
															"function CreateXCorrelator() {\r",
															"    let xCorrelator;\r",
															"    xCorrelator = \"\";\r",
															"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
															"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
															"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
															"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
															"    xCorrelator += GenerateRandomHexString(12);\r",
															"    return xCorrelator;\r",
															"}\r",
															"\r",
															"function GenerateRandomHexString(length) {\r",
															"    var randomRandomHexString = \"\";\r",
															"    while (randomRandomHexString.length < length) {\r",
															"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
															"    }\r",
															"    return randomRandomHexString.substring(0,length);\r",
															"}\r",
															"\r",
															"function RandomReleaseNumber() {\r",
															"    let releaseNumber;\r",
															"    let releaseNumberParts = [];\r",
															"    for  (let i=0; i<3 ; i++) {\r",
															"        releaseNumberParts[i] = Math.floor(Math.random() * 10);\r",
															"    }\r",
															"    releaseNumber = releaseNumberParts[0] + \".\" + releaseNumberParts[1] + \".\" + releaseNumberParts[2];\r",
															"    return releaseNumber;\r",
															"}\r",
															"\r",
															"function RandomIpAddress() {\r",
															"    let randomAddress\r",
															"    let addressParts = [];\r",
															"    for ( let i=0; i<4; i++ ) {\r",
															"        addressParts[i] = String(Math.floor(Math.random() * 256));\r",
															"    }\r",
															"    randomAddress = addressParts[0] + \".\" + addressParts[1] + \".\" + addressParts[2] + \".\" + addressParts[3];\r",
															"    return randomAddress;\r",
															"}\r",
															"\r",
															"function RandomTcpPort() {\r",
															"    let randomPort;\r",
															"    randomPort = 2000 + Math.floor( Math.random() * 1000 );\r",
															"    return randomPort;\r",
															"}\r",
															"\r",
															"function GenerateDummyRemoteProtocol(currentProtocol) {\r",
															"    let alternativeProtocolList;\r",
															"    alternativeProtocolList = [  \"tcp-client-interface-1-0:PROTOCOL_TYPE_HTTP\",\r",
															"                                    \"tcp-client-interface-1-0:PROTOCOL_TYPE_HTTPS\"\r",
															"                                ];\r",
															"    let indexOfCurrentProtocol;\r",
															"    indexOfCurrentProtocol = alternativeProtocolList.indexOf(currentProtocol);\r",
															"    if (indexOfCurrentProtocol > -1) {\r",
															"        alternativeProtocolList.splice(indexOfCurrentProtocol, 1);\r",
															"    }\r",
															"\r",
															"    let alternativeProtocol;\r",
															"    let alternativeProtocolIndex;\r",
															"    alternativeProtocolIndex = Math.floor(Math.random() * alternativeProtocolList.length);\r",
															"    alternativeProtocol = alternativeProtocolList[alternativeProtocolIndex]; \r",
															"\r",
															"    return alternativeProtocol;\r",
															"}\r",
															"\r",
															"function GenerateRandomString(length) {\r",
															"    let randomString;\r",
															"    randomString = \"\";\r",
															"    try {\r",
															"        let characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\r",
															"        let charactersLength = characters.length;\r",
															"        for (let i = 0; i < length; i++) {\r",
															"            randomString += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
															"        }\r",
															"    } catch (error) {\r",
															"        console.log(\"! Could not generate random string. \");\r",
															"    }\r",
															"    return randomString;\r",
															"}\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Extracting Result\r",
															"****************************************************************************************/\r",
															"var RESPONSE_CODE;\r",
															"try {\r",
															"    let response;\r",
															"    response = pm.response;\r",
															"\r",
															"    RESPONSE_CODE = parseInt(response.code);\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Response Code could not be extracted.\");\r",
															"}    \r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Testing\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    pm.test(\"POST /v1/bequeath-your-data-and-die responds 204\", function () {\r",
															"        pm.expect(RESPONSE_CODE).to.equal(204);\r",
															"    });\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Testing could not be executed.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-mock-response-code",
														"value": "204",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Expected /core-model-1-4:control-construct",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"var APPLICATION;\r",
															"try {\r",
															"    APPLICATION = pm.environment.get(\"application\");\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Environment variables could not be loaded.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Setting Local Variables and Preparing the Request\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    let URI;\r",
															"    URI = APPLICATION.serverUrl + \"/core-model-1-4:control-construct\";\r",
															"\r",
															"    let REQUEST_BODY;\r",
															"    REQUEST_BODY = \"\";\r",
															"\r",
															"    let AUTHORIZATION;\r",
															"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
															"\r",
															"    let ACCEPT;\r",
															"    ACCEPT = \"application/json\";\r",
															"\r",
															"    let CONTENT_TYPE;\r",
															"    CONTENT_TYPE = \"application/json\";\r",
															"\r",
															"\r",
															"    pm.variables.clear();\r",
															"\r",
															"    pm.variables.set(\"uri\", URI);\r",
															"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
															"\r",
															"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
															"\r",
															"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
															"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Local variables could not be set.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"var expectedApplicationName;\r",
															"var initialNewReleaseHttpClientLtp;\r",
															"try {\r",
															"    expectedApplicationName = pm.collectionVariables.get(\"dummyNewApplicationName\");\r",
															"    initialNewReleaseHttpClientLtp = pm.collectionVariables.get(\"newReleaseHttpClientLtp\");\r",
															"   \r",
															"} catch(error) {\r",
															"    console.log(\"! Could not load input data. \");\r",
															"}\r",
															"\r",
															"/****************************************************************************************\r",
															"* Extracting Result\r",
															"****************************************************************************************/\r",
															"var ltpList;\r",
															"try {\r",
															"    let response;\r",
															"    response = pm.response;\r",
															"    \r",
															"    let responseCode;\r",
															"    responseCode = parseInt(response.code);\r",
															"    \r",
															"    if ( Math.floor(responseCode/100) === 2 ) {\r",
															"        let responseObject;\r",
															"        responseObject = JSON.parse(response.stream);\r",
															"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
															"\r",
															"    } else {\r",
															"        ltpList = [];\r",
															"    }\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! ltpList could not be extracted.\");\r",
															"}\r",
															"\r",
															"var actualApplicationName;\r",
															"try {\r",
															"    let newReleaseHttpClientLtpUuid;\r",
															"    newReleaseHttpClientLtpUuid = initialNewReleaseHttpClientLtp[\"uuid\"];\r",
															"\r",
															"    let actualHttpClientLtp;\r",
															"    actualHttpClientLtp = FindActualInstanceByUuid(newReleaseHttpClientLtpUuid, ltpList);\r",
															"\r",
															"    actualApplicationName = actualHttpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(error);\r",
															"    console.log(\"! Reference objects could not be extracted.\");\r",
															"} \r",
															"\r",
															"/****************************************************************************************\r",
															"* Testing\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    pm.test(\"Provides expected new-application-name: \" + expectedApplicationName, function () {\r",
															"        pm.expect(actualApplicationName).to.equal(expectedApplicationName);\r",
															"    });\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Testing could not be executed.\");\r",
															"}\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/\r",
															"function FindActualInstanceByUuid(expectedUuid, actualLtpList) {\r",
															"    let actualInstance;\r",
															"    actualInstance = {};\r",
															"    try {\r",
															"        for ( let i=0; i<actualLtpList.length; i++ ) {\r",
															"            let sampleUuid;\r",
															"            sampleUuid = actualLtpList[i][\"uuid\"];\r",
															"            if( sampleUuid == expectedUuid ) {\r",
															"                actualInstance = actualLtpList[i];\r",
															"                return actualInstance;\r",
															"            }\r",
															"        }\r",
															"\r",
															"    } catch (error) {\r",
															"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
															"    }\r",
															"    return undefined;\r",
															"}\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "x-mock-response-code",
														"value": "200",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "initial http-c/application-name",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"var APPLICATION;\r",
															"var newReleaseHttpClientLtpUuid;\r",
															"var initialApplicationName;\r",
															"try {\r",
															"    APPLICATION = pm.environment.get(\"application\");\r",
															"    \r",
															"    let newReleaseHttpClientLtp;\r",
															"    newReleaseHttpClientLtp = pm.collectionVariables.get(\"newReleaseHttpClientLtp\");\r",
															"\r",
															"    newReleaseHttpClientLtpUuid = newReleaseHttpClientLtp[\"uuid\"];\r",
															"\r",
															"    initialApplicationName = newReleaseHttpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Variables could not be loaded.\");\r",
															"}\r",
															"\r",
															"/****************************************************************************************\r",
															"* Setting Collection Variables\r",
															"****************************************************************************************/\r",
															"\r",
															"/****************************************************************************************\r",
															"* Setting Local Variables and Preparing the Request\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    let URI;\r",
															"    URI = APPLICATION.serverUrl \r",
															"            + \"/core-model-1-4:control-construct/logical-termination-point=\"\r",
															"            + newReleaseHttpClientLtpUuid\r",
															"            + \"/layer-protocol=0/http-client-interface-1-0:http-client-interface-pac/http-client-interface-configuration/application-name\";\r",
															"\r",
															"    let REQUEST_BODY;\r",
															"    REQUEST_BODY = '{ '\r",
															"                    +   '\"http-client-interface-1-0:application-name\": \"' + initialApplicationName + '\"'\r",
															"                    + ' }';\r",
															"\r",
															"    let AUTHORIZATION;\r",
															"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
															"\r",
															"    let ACCEPT;\r",
															"    ACCEPT = \"application/json\";\r",
															"\r",
															"    let CONTENT_TYPE;\r",
															"    CONTENT_TYPE = \"application/json\";\r",
															"\r",
															"\r",
															"    pm.variables.clear();\r",
															"\r",
															"    pm.variables.set(\"uri\", URI);\r",
															"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
															"\r",
															"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
															"\r",
															"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
															"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(error)\r",
															"    console.log(\"! Local variables could not be set.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-mock-response-code",
														"value": "204",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "initial newRelease/remote-protocol",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"var APPLICATION;\r",
															"var newReleaseTcpClientUuid;\r",
															"var initialReleaseRemoteProtocol;\r",
															"try {\r",
															"    APPLICATION = pm.environment.get(\"application\");\r",
															"    \r",
															"    let newReleaseTcpClientLtp;\r",
															"    newReleaseTcpClientLtp = pm.collectionVariables.get(\"newReleaseTcpClientLtp\");\r",
															"\r",
															"    newReleaseTcpClientUuid = newReleaseTcpClientLtp[\"uuid\"];\r",
															"\r",
															"    initialReleaseRemoteProtocol = newReleaseTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Variables could not be loaded.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Setting Local Variables and Preparing the Request\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    let URI;\r",
															"    URI = APPLICATION.serverUrl \r",
															"            + \"/core-model-1-4:control-construct/logical-termination-point=\" \r",
															"            + newReleaseTcpClientUuid\r",
															"            + \"/layer-protocol=0/tcp-client-interface-1-0:tcp-client-interface-pac/tcp-client-interface-configuration/remote-protocol\";\r",
															"\r",
															"    let REQUEST_BODY;\r",
															"    REQUEST_BODY = '{ '\r",
															"                    +   '\"tcp-client-interface-1-0:remote-protocol\": \"' + initialReleaseRemoteProtocol + '\"'\r",
															"                    + ' }';\r",
															"\r",
															"    let AUTHORIZATION;\r",
															"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
															"\r",
															"    let ACCEPT;\r",
															"    ACCEPT = \"application/json\";\r",
															"\r",
															"    let CONTENT_TYPE;\r",
															"    CONTENT_TYPE = \"application/json\";\r",
															"\r",
															"\r",
															"    pm.variables.clear();\r",
															"\r",
															"    pm.variables.set(\"uri\", URI);\r",
															"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
															"\r",
															"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
															"\r",
															"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
															"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(error)\r",
															"    console.log(\"! Local variables could not be set.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-mock-response-code",
														"value": "204",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "initial newRelease/remote-address",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"var APPLICATION;\r",
															"var newReleaseTcpClientUuid;\r",
															"var initialReleaseRemoteAddress;\r",
															"try {\r",
															"    APPLICATION = pm.environment.get(\"application\");\r",
															"    \r",
															"    let newReleaseTcpClientLtp;\r",
															"    newReleaseTcpClientLtp = pm.collectionVariables.get(\"newReleaseTcpClientLtp\");\r",
															"\r",
															"    newReleaseTcpClientUuid = newReleaseTcpClientLtp[\"uuid\"];\r",
															"\r",
															"    initialReleaseRemoteAddress = newReleaseTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-address\"];\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Variables could not be loaded.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Setting Local Variables and Preparing the Request\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    let URI;\r",
															"    URI = APPLICATION.serverUrl \r",
															"            + \"/core-model-1-4:control-construct/logical-termination-point=\"\r",
															"            + newReleaseTcpClientUuid\r",
															"            + \"/layer-protocol=0/tcp-client-interface-1-0:tcp-client-interface-pac/tcp-client-interface-configuration/remote-address\";\r",
															"\r",
															"    let REQUEST_BODY;\r",
															"    REQUEST_BODY = '{ '\r",
															"                    +   '\"tcp-client-interface-1-0:remote-address\": ' + JSON.stringify(initialReleaseRemoteAddress)\r",
															"                    + ' }';\r",
															"\r",
															"    let AUTHORIZATION;\r",
															"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
															"\r",
															"    let ACCEPT;\r",
															"    ACCEPT = \"application/json\";\r",
															"\r",
															"    let CONTENT_TYPE;\r",
															"    CONTENT_TYPE = \"application/json\";\r",
															"\r",
															"    pm.variables.clear();\r",
															"\r",
															"    pm.variables.set(\"uri\", URI);\r",
															"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
															"\r",
															"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
															"\r",
															"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
															"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(error)\r",
															"    console.log(\"! Local variables could not be set.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-mock-response-code",
														"value": "204",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "initial newRelease/remote-port",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"var APPLICATION;\r",
															"var newReleaseTcpClientUuid;\r",
															"var initialReleaseRemotePort;\r",
															"try {\r",
															"    APPLICATION = pm.environment.get(\"application\");\r",
															"    \r",
															"    let newReleaseTcpClientLtp;\r",
															"    newReleaseTcpClientLtp = pm.collectionVariables.get(\"newReleaseTcpClientLtp\");\r",
															"\r",
															"    newReleaseTcpClientUuid = newReleaseTcpClientLtp[\"uuid\"];\r",
															"\r",
															"    initialReleaseRemotePort = newReleaseTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-port\"];\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Variables could not be loaded.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Setting Local Variables and Preparing the Request\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    let URI;\r",
															"    URI = APPLICATION.serverUrl \r",
															"            + \"/core-model-1-4:control-construct/logical-termination-point=\" \r",
															"            + newReleaseTcpClientUuid\r",
															"            + \"/layer-protocol=0/tcp-client-interface-1-0:tcp-client-interface-pac/tcp-client-interface-configuration/remote-port\";\r",
															"\r",
															"    let REQUEST_BODY;\r",
															"    REQUEST_BODY = '{ '\r",
															"                    +   '\"tcp-client-interface-1-0:remote-port\": ' + initialReleaseRemotePort\r",
															"                    + ' }';\r",
															"\r",
															"    let AUTHORIZATION;\r",
															"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
															"\r",
															"    let ACCEPT;\r",
															"    ACCEPT = \"application/json\";\r",
															"\r",
															"    let CONTENT_TYPE;\r",
															"    CONTENT_TYPE = \"application/json\";\r",
															"\r",
															"\r",
															"    pm.variables.clear();\r",
															"\r",
															"    pm.variables.set(\"uri\", URI);\r",
															"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
															"\r",
															"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
															"\r",
															"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
															"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(error)\r",
															"    console.log(\"! Local variables could not be set.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-mock-response-code",
														"value": "204",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Check /core-model-1-4:control-construct",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"var APPLICATION;\r",
															"var AUTHORIZATION;\r",
															"try {\r",
															"    APPLICATION = pm.environment.get(\"application\");\r",
															"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
															"\r",
															"    oamPath = \"/core-model-1-4:control-construct\";\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Environment variables could not be loaded.\");\r",
															"}\r",
															"\r",
															"/****************************************************************************************\r",
															"* Defining Request Body\r",
															"****************************************************************************************/\r",
															"var REQUEST_BODY;\r",
															"try {\r",
															"    REQUEST_BODY = \"\";\r",
															"} catch (error) {\r",
															"    console.log(\"!Could not define request body. \");\r",
															"}\r",
															"\r",
															"/****************************************************************************************\r",
															"* Setting Local Variables and Preparing the Request\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    let URI;\r",
															"    URI = APPLICATION.serverUrl + oamPath;\r",
															"\r",
															"    let ACCEPT;\r",
															"    ACCEPT = \"application/json\";\r",
															"\r",
															"    let CONTENT_TYPE;\r",
															"    CONTENT_TYPE = \"application/json\";\r",
															"\r",
															"    pm.variables.clear();\r",
															"\r",
															"    pm.variables.set(\"uri\", URI);\r",
															"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
															"\r",
															"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
															"\r",
															"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
															"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Local variables could not be set.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"var expectedLogicalTerminationPoint;\r",
															"var expectedForwardingConstruct;\r",
															"try {\r",
															"    expectedLogicalTerminationPoint = pm.collectionVariables.get(\"ltpList\");\r",
															"    expectedForwardingConstruct = pm.collectionVariables.get(\"fcList\");\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Collection variables could not be loaded.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Extracting Result\r",
															"****************************************************************************************/\r",
															"var RESPONSE_CODE;\r",
															"var RESPONSE;\r",
															"try {\r",
															"    let response;\r",
															"    response = pm.response;\r",
															"\r",
															"    RESPONSE_CODE = parseInt(response.code);\r",
															"\r",
															"    if (Math.floor(RESPONSE_CODE / 100) === 2) {\r",
															"        RESPONSE = JSON.parse(response.stream);\r",
															"    } else {\r",
															"        RESPONSE = [];\r",
															"    }\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Result value lists could not be extracted.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Testing\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    pm.test(\"GET /core-model-1-4:control-construct responds 200\", function () {\r",
															"        pm.expect(RESPONSE_CODE).to.equal(200);\r",
															"    });\r",
															"\r",
															"    let actualLtpList;\r",
															"    actualLtpList = RESPONSE[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
															"\r",
															"    pm.test(\"Received logical-termination-point is same as intial instance \", function () {\r",
															"        pm.expect(actualLtpList).to.deep.equal(expectedLogicalTerminationPoint);\r",
															"    });\r",
															"\r",
															"    let actualFcList;\r",
															"    actualFcList = RESPONSE[\"core-model-1-4:control-construct\"][\"forwarding-domain\"][0][\"forwarding-construct\"];\r",
															"\r",
															"    pm.test(\"Received forwarding-construct is same as intial instance \", function () {\r",
															"        pm.expect(actualFcList).to.deep.equal(expectedForwardingConstruct);\r",
															"    });\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Testing could not be executed.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-mock-response-code",
														"value": "200",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"description": "## Get new-application-name updated?\n#### Preparation:\n- GETing CC (/core-model-1-4:control-construct)\n  - searching CC for op-s of /v1/bequeath-your-data-and-die, storing operation-key\n  - searcing CC for output port of PromptForBequeathingDataCausesTransferOfListOfApplications, find corresponding op-c, http-c and tcp-c, store them\n- POST /v1/bequeath-your-data-and-die with\n  - new-application-release according to chosen http-c\n  - new-application-protocol, new-application-address and new-application-port with random generated dummy values (assure sufficiently high probability that set does not exist!), BUT new-application-name attribute with random dummy value as per the spec.\n  - operation-key from above\n  - reasonable parameters\n\n#### Testing:\n- checking for ResponseCode==204\n- GETing CC (/core-model-1-4:control-construct)\n- verify that CC/NewRelease http-c application-name is updated with dummyValue.\n\n#### Clearing:\n- PUT NewRelease/application-name with original value\n- PUT NewRelease/remote-protocol with original value\n- PUT NewRelease/remote-address with original value\n- PUT NewRelease/remote-port with original value\n\n#### Clearance check:\n- Check if the logical-termination-point instance is the same as initial configuration\n- Check if the forwarding-construct instance is the same as initial configuration"
								},
								{
									"name": "new-application-release updated?",
									"item": [
										{
											"name": "reference /core-model-1-4:control-construct",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n----- /v1/bequeath-your-data-and-die acceptance -- new-application-release attribute updated? -------------------------------\");\r",
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"var APPLICATION;\r",
															"try {\r",
															"    APPLICATION = pm.environment.get(\"application\");\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Environment variables could not be loaded.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Setting Local Variables and Preparing the Request\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    let URI;\r",
															"    URI = APPLICATION.serverUrl + \"/core-model-1-4:control-construct\";\r",
															"\r",
															"    let REQUEST_BODY;\r",
															"    REQUEST_BODY = \"\";\r",
															"\r",
															"    let AUTHORIZATION;\r",
															"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
															"\r",
															"    let ACCEPT;\r",
															"    ACCEPT = \"application/json\";\r",
															"\r",
															"    let CONTENT_TYPE;\r",
															"    CONTENT_TYPE = \"application/json\";\r",
															"\r",
															"\r",
															"    pm.variables.clear();\r",
															"\r",
															"    pm.variables.set(\"uri\", URI);\r",
															"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
															"\r",
															"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
															"\r",
															"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
															"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Local variables could not be set.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Extracting Result\r",
															"****************************************************************************************/\r",
															"var ltpList;\r",
															"var fcList;\r",
															"try {\r",
															"    let response;\r",
															"    response = pm.response;\r",
															"    \r",
															"    let responseCode;\r",
															"    responseCode = parseInt(response.code);\r",
															"    \r",
															"    if ( Math.floor(responseCode/100) === 2 ) {\r",
															"        let responseObject;\r",
															"        responseObject = JSON.parse(response.stream);\r",
															"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
															"        fcList = responseObject[\"core-model-1-4:control-construct\"][\"forwarding-domain\"][0][\"forwarding-construct\"];\r",
															"\r",
															"    } else {\r",
															"        ltpList = [];\r",
															"        fcList = [];\r",
															"    }\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! ltpList could not be extracted.\");\r",
															"}\r",
															"\r",
															"var currentOperationServer;\r",
															"var newReleaseHttpClientLtp;\r",
															"var newReleaseTcpClientLtp;\r",
															"try {\r",
															"    currentOperationServer = FindOperationServer(\"/v1/bequeath-your-data-and-die\", ltpList);\r",
															"\r",
															"    //Bequeath Transfer Of List Of Applications\r",
															"    let bequeathingDataCausesTransferOfListOfApplicationsOperationClientLtp = FindOperationClientUsingCallback(\"PromptForBequeathingDataCausesTransferOfListOfApplications\", fcList, ltpList)\r",
															"\r",
															"    newReleaseHttpClientLtp = FindServingLtp(bequeathingDataCausesTransferOfListOfApplicationsOperationClientLtp, ltpList);\r",
															"    newReleaseTcpClientLtp = FindServingLtp(newReleaseHttpClientLtp, ltpList); \r",
															"} catch (error) {\r",
															"    console.log(error);\r",
															"    console.log(\"! Reference objects could not be extracted.\");\r",
															"}\r",
															"\r",
															"/****************************************************************************************\r",
															"* Setting Collection Variables\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    pm.collectionVariables.clear();\r",
															"    \r",
															"    pm.collectionVariables.set(\"currentOperationServer\", currentOperationServer);\r",
															"    pm.collectionVariables.set(\"newReleaseHttpClientLtp\", newReleaseHttpClientLtp);\r",
															"    pm.collectionVariables.set(\"newReleaseTcpClientLtp\", newReleaseTcpClientLtp);\r",
															"    pm.collectionVariables.set(\"ltpList\", ltpList);\r",
															"    pm.collectionVariables.set(\"fcList\", fcList);\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Collection variables could not be set.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/\r",
															"\r",
															"function FindOperationServer(operationName, ltpList) {\r",
															"    let operationServer;\r",
															"    operationServer = \"\";\r",
															"    try {\r",
															"        let sampleUuid;\r",
															"        for(let i=0; i<ltpList.length; i++) {\r",
															"            sampleUuid = ltpList[i][\"uuid\"];\r",
															"            if(sampleUuid.includes(\"op-s-\")) {\r",
															"                let sampleOperationName;\r",
															"                sampleOperationName = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
															"                if(sampleOperationName == operationName) {\r",
															"                    operationServer = ltpList[i];\r",
															"                    return operationServer;\r",
															"                }\r",
															"            }\r",
															"        }\r",
															"    } catch (error) {\r",
															"        console.log(\"! Exception in function : FindOperationServer. \");\r",
															"    }\r",
															"    return operationServer;\r",
															"}\r",
															"\r",
															"function FindOutputFcPortList(forwardingName, fcList) {\r",
															"    let outputFcPortList;\r",
															"    outputFcPortList = [];\r",
															"    try {\r",
															"        for( let i=0; i<fcList.length; i++ ) {\r",
															"            for(let j=0; j<fcList[i][\"name\"].length; j++) {               \r",
															"                if(fcList[i][\"name\"][j][\"value\"] == forwardingName) {\r",
															"                    fcPortList = fcList[i][\"fc-port\"];\r",
															"                    for(let k=0;k<fcPortList.length;k++) {\r",
															"                        if(fcPortList[k][\"port-direction\"] == \"core-model-1-4:PORT_DIRECTION_TYPE_OUTPUT\") {\r",
															"                            outputFcPortList.push(fcPortList[k]);\r",
															"                        }\r",
															"                    }\r",
															"                    return outputFcPortList;\r",
															"                }\r",
															"            }\r",
															"        }\r",
															"    } catch (error) {\r",
															"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
															"    }\r",
															"    return outputFcPortList;\r",
															"}\r",
															"\r",
															"function FindActualInstanceByUuid(expectedUuid, actualLtpList) {\r",
															"    let actualInstance;\r",
															"    actualInstance = {};\r",
															"    try {\r",
															"        for ( let i=0; i<actualLtpList.length; i++ ) {\r",
															"            let sampleUuid;\r",
															"            sampleUuid = actualLtpList[i][\"uuid\"];\r",
															"            if( sampleUuid == expectedUuid ) {\r",
															"                actualInstance = actualLtpList[i];\r",
															"                return actualInstance;\r",
															"            }\r",
															"        }\r",
															"\r",
															"    } catch (error) {\r",
															"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
															"    }\r",
															"    return undefined;\r",
															"}\r",
															"\r",
															"function FindServingLtp(clientLtp, ltpList) {\r",
															"    let servingLtp;\r",
															"    servingLtp = {};\r",
															"    try{\r",
															"        let serverLtpUuid;\r",
															"        serverLtpUuid = clientLtp[\"server-ltp\"][0];\r",
															"        for( let i=0; i<ltpList.length; i++ ) {\r",
															"            let sampleUuid;\r",
															"            sampleUuid = ltpList[i][\"uuid\"];\r",
															"            if( sampleUuid == serverLtpUuid ) {\r",
															"                servingLtp = ltpList[i];\r",
															"                return servingLtp;\r",
															"            }\r",
															"        }\r",
															"    } catch(error) {\r",
															"        console.log(error);\r",
															"        console.log(\"! Exception in function : FindServingLtp. \")\r",
															"    }\r",
															"    return servingLtp;\r",
															"}\r",
															"\r",
															"function FindOperationClientUsingCallback(callback, fcList, ltpList) {\r",
															"    let operationClientLtp\r",
															"    try {\r",
															"        let outputFcPortList = FindOutputFcPortList(callback, fcList);\r",
															"        let randomOutputFcPort = outputFcPortList[Math.floor(Math.random() * outputFcPortList.length)];\r",
															"        let outputLtpUuid = randomOutputFcPort[\"logical-termination-point\"];\r",
															"        operationClientLtp = FindActualInstanceByUuid(outputLtpUuid, ltpList);\r",
															"    } catch (error) {\r",
															"        console.log(error);\r",
															"        console.log(\"! Exception in function FindOperationClientUsingCallback. \");\r",
															"    }\r",
															"    return  operationClientLtp\r",
															"}\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "x-mock-response-code",
														"value": "200",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Dummy /v1/bequeath-your-data-and-die",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"var APPLICATION;\r",
															"var OPERATION_KEY;\r",
															"var newApplicationName;\r",
															"var dummyNewApplicationRelease;\r",
															"var dummyApplicationProtocol;\r",
															"var dummyApplicationAddress;\r",
															"var dummyApplicationPort\r",
															"try {\r",
															"    APPLICATION = pm.environment.get(\"application\");\r",
															"\r",
															"    let currentOperationServer;\r",
															"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
															"    \r",
															"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
															"\r",
															"    let newReleaseHttpClientLtp;\r",
															"    newReleaseHttpClientLtp = pm.collectionVariables.get(\"newReleaseHttpClientLtp\");\r",
															"\r",
															"    newApplicationName = newReleaseHttpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
															"\r",
															"    dummyNewApplicationRelease = RandomReleaseNumber();\r",
															"\r",
															"    let newReleaseTcpClientLtp;\r",
															"    newReleaseTcpClientLtp = pm.collectionVariables.get(\"newReleaseTcpClientLtp\");\r",
															"\r",
															"    let protocol = newReleaseTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
															"    dummyApplicationProtocol = GenerateDummyRemoteProtocol(protocol);\r",
															"    dummyApplicationProtocol = dummyApplicationProtocol.substring(('tcp-client-interface-1-0:PROTOCOL_TYPE_').length);\r",
															"\r",
															"    let dummyIpv4Address = RandomIpAddress();\r",
															"    dummyApplicationAddress = {\r",
															"        \"ip-address\": {\r",
															"            \"ipv-4-address\": dummyIpv4Address\r",
															"        }\r",
															"    };\r",
															"    dummyApplicationPort = RandomTcpPort();\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(error);\r",
															"    console.log(\"! Input Data could not be loaded.\");\r",
															"}\r",
															"\r",
															"/****************************************************************************************\r",
															"* Defining Dummy Parameters\r",
															"****************************************************************************************/\r",
															"var USER_NAME;\r",
															"var ORIGINATOR;\r",
															"var X_CORRELATOR;\r",
															"var TRACE_INDICATOR;\r",
															"var CUSTOMER_JOURNEY;\r",
															"try {\r",
															"    USER_NAME = APPLICATION.userName;\r",
															"    ORIGINATOR = \"Postman\";\r",
															"    X_CORRELATOR = CreateXCorrelator();\r",
															"    TRACE_INDICATOR = \"1\";\r",
															"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
															"    \r",
															"} catch (error) {\r",
															"    console.log(\"! Could not define dummy values for parameters. \");\r",
															"}\r",
															"\r",
															"/****************************************************************************************\r",
															"* Defining Request Body\r",
															"****************************************************************************************/\r",
															"var REQUEST_BODY;\r",
															"try {\r",
															"    REQUEST_BODY = '{'\r",
															"        + '\"new-application-name\" : ' + '\"' + newApplicationName + '\",'\r",
															"        + '\"new-application-release\" : ' + '\"' + dummyNewApplicationRelease + '\",'\r",
															"        + '\"new-application-protocol\" : ' + '\"' + dummyApplicationProtocol + '\",'\r",
															"        + '\"new-application-address\" : ' + JSON.stringify(dummyApplicationAddress) + ','\r",
															"        + '\"new-application-port\" : ' +  dummyApplicationPort\r",
															"    +'}';\r",
															"} catch (error) {\r",
															"    console.log(\"!Could not define request body. \");\r",
															"}\r",
															"/****************************************************************************************\r",
															"* Setting Collection Variables\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    pm.collectionVariables.set(\"dummyReleaseNumber\", dummyNewApplicationRelease);\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Collection variables could not be set.\");\r",
															"}\r",
															"\r",
															"/****************************************************************************************\r",
															"* Setting Local Variables and Preparing the Request\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    let URI;\r",
															"    URI = APPLICATION.serverUrl + \"/v1/bequeath-your-data-and-die\";\r",
															"\r",
															"    let ACCEPT;\r",
															"    ACCEPT = \"application/json\";\r",
															"\r",
															"    let CONTENT_TYPE;\r",
															"    CONTENT_TYPE = \"application/json\";\r",
															"\r",
															"    pm.variables.clear();\r",
															"\r",
															"    pm.variables.set(\"uri\", URI);\r",
															"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
															"\r",
															"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
															"\r",
															"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
															"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
															"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
															"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
															"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
															"\r",
															"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
															"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(error);\r",
															"    console.log(\"! Local variables could not be set.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/\r",
															"\r",
															"function CreateXCorrelator() {\r",
															"    let xCorrelator;\r",
															"    xCorrelator = \"\";\r",
															"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
															"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
															"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
															"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
															"    xCorrelator += GenerateRandomHexString(12);\r",
															"    return xCorrelator;\r",
															"}\r",
															"\r",
															"function GenerateRandomHexString(length) {\r",
															"    var randomRandomHexString = \"\";\r",
															"    while (randomRandomHexString.length < length) {\r",
															"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
															"    }\r",
															"    return randomRandomHexString.substring(0,length);\r",
															"}\r",
															"\r",
															"function RandomReleaseNumber() {\r",
															"    let releaseNumber;\r",
															"    let releaseNumberParts = [];\r",
															"    for  (let i=0; i<3 ; i++) {\r",
															"        releaseNumberParts[i] = Math.floor(Math.random() * 10);\r",
															"    }\r",
															"    releaseNumber = releaseNumberParts[0] + \".\" + releaseNumberParts[1] + \".\" + releaseNumberParts[2];\r",
															"    return releaseNumber;\r",
															"}\r",
															"\r",
															"function RandomIpAddress() {\r",
															"    let randomAddress\r",
															"    let addressParts = [];\r",
															"    for ( let i=0; i<4; i++ ) {\r",
															"        addressParts[i] = String(Math.floor(Math.random() * 256));\r",
															"    }\r",
															"    randomAddress = addressParts[0] + \".\" + addressParts[1] + \".\" + addressParts[2] + \".\" + addressParts[3];\r",
															"    return randomAddress;\r",
															"}\r",
															"\r",
															"function RandomTcpPort() {\r",
															"    let randomPort;\r",
															"    randomPort = 2000 + Math.floor( Math.random() * 1000 );\r",
															"    return randomPort;\r",
															"}\r",
															"\r",
															"function GenerateDummyRemoteProtocol(currentProtocol) {\r",
															"    let alternativeProtocolList;\r",
															"    alternativeProtocolList = [  \"tcp-client-interface-1-0:PROTOCOL_TYPE_HTTP\",\r",
															"                                    \"tcp-client-interface-1-0:PROTOCOL_TYPE_HTTPS\"\r",
															"                                ];\r",
															"    let indexOfCurrentProtocol;\r",
															"    indexOfCurrentProtocol = alternativeProtocolList.indexOf(currentProtocol);\r",
															"    if (indexOfCurrentProtocol > -1) {\r",
															"        alternativeProtocolList.splice(indexOfCurrentProtocol, 1);\r",
															"    }\r",
															"\r",
															"    let alternativeProtocol;\r",
															"    let alternativeProtocolIndex;\r",
															"    alternativeProtocolIndex = Math.floor(Math.random() * alternativeProtocolList.length);\r",
															"    alternativeProtocol = alternativeProtocolList[alternativeProtocolIndex]; \r",
															"\r",
															"    return alternativeProtocol;\r",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Extracting Result\r",
															"****************************************************************************************/\r",
															"var RESPONSE_CODE;\r",
															"try {\r",
															"    let response;\r",
															"    response = pm.response;\r",
															"\r",
															"    RESPONSE_CODE = parseInt(response.code);\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Response Code could not be extracted.\");\r",
															"}    \r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Testing\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    pm.test(\"POST /v1/bequeath-your-data-and-die responds 204\", function () {\r",
															"        pm.expect(RESPONSE_CODE).to.equal(204);\r",
															"    });\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Testing could not be executed.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-mock-response-code",
														"value": "204",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Expected /core-model-1-4:control-construct",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"var APPLICATION;\r",
															"try {\r",
															"    APPLICATION = pm.environment.get(\"application\");\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Environment variables could not be loaded.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Setting Local Variables and Preparing the Request\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    let URI;\r",
															"    URI = APPLICATION.serverUrl + \"/core-model-1-4:control-construct\";\r",
															"\r",
															"    let REQUEST_BODY;\r",
															"    REQUEST_BODY = \"\";\r",
															"\r",
															"    let AUTHORIZATION;\r",
															"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
															"\r",
															"    let ACCEPT;\r",
															"    ACCEPT = \"application/json\";\r",
															"\r",
															"    let CONTENT_TYPE;\r",
															"    CONTENT_TYPE = \"application/json\";\r",
															"\r",
															"\r",
															"    pm.variables.clear();\r",
															"\r",
															"    pm.variables.set(\"uri\", URI);\r",
															"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
															"\r",
															"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
															"\r",
															"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
															"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Local variables could not be set.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"var expectedReleaseNumber;\r",
															"var initialNewReleaseHttpClientLtp;\r",
															"try {\r",
															"    expectedReleaseNumber = pm.collectionVariables.get(\"dummyReleaseNumber\");\r",
															"    initialNewReleaseHttpClientLtp = pm.collectionVariables.get(\"newReleaseHttpClientLtp\");\r",
															"   \r",
															"} catch(error) {\r",
															"    console.log(\"! Could not load input data. \");\r",
															"}\r",
															"\r",
															"/****************************************************************************************\r",
															"* Extracting Result\r",
															"****************************************************************************************/\r",
															"var ltpList;\r",
															"try {\r",
															"    let response;\r",
															"    response = pm.response;\r",
															"    \r",
															"    let responseCode;\r",
															"    responseCode = parseInt(response.code);\r",
															"    \r",
															"    if ( Math.floor(responseCode/100) === 2 ) {\r",
															"        let responseObject;\r",
															"        responseObject = JSON.parse(response.stream);\r",
															"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
															"\r",
															"    } else {\r",
															"        ltpList = [];\r",
															"    }\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! ltpList could not be extracted.\");\r",
															"}\r",
															"\r",
															"var actualReleaseNumber;\r",
															"try {\r",
															"    let newReleaseHttpClientLtpUuid;\r",
															"    newReleaseHttpClientLtpUuid = initialNewReleaseHttpClientLtp[\"uuid\"];\r",
															"\r",
															"    let actualHttpClientLtp;\r",
															"    actualHttpClientLtp = FindActualInstanceByUuid(newReleaseHttpClientLtpUuid, ltpList);\r",
															"\r",
															"    actualReleaseNumber = actualHttpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"release-number\"];\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(error);\r",
															"    console.log(\"! Reference objects could not be extracted.\");\r",
															"} \r",
															"\r",
															"/****************************************************************************************\r",
															"* Testing\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    pm.test(\"Provides expected new-application-release: \" + expectedReleaseNumber, function () {\r",
															"        pm.expect(actualReleaseNumber).to.equal(expectedReleaseNumber);\r",
															"    });\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Testing could not be executed.\");\r",
															"}\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/\r",
															"function FindActualInstanceByUuid(expectedUuid, actualLtpList) {\r",
															"    let actualInstance;\r",
															"    actualInstance = {};\r",
															"    try {\r",
															"        for ( let i=0; i<actualLtpList.length; i++ ) {\r",
															"            let sampleUuid;\r",
															"            sampleUuid = actualLtpList[i][\"uuid\"];\r",
															"            if( sampleUuid == expectedUuid ) {\r",
															"                actualInstance = actualLtpList[i];\r",
															"                return actualInstance;\r",
															"            }\r",
															"        }\r",
															"\r",
															"    } catch (error) {\r",
															"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
															"    }\r",
															"    return undefined;\r",
															"}\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "x-mock-response-code",
														"value": "200",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "initial http-c/release-number",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"var APPLICATION;\r",
															"var newReleaseHttpClientLtpUuid;\r",
															"var initialReleaseNumber;\r",
															"try {\r",
															"    APPLICATION = pm.environment.get(\"application\");\r",
															"    \r",
															"    let newReleaseHttpClientLtp;\r",
															"    newReleaseHttpClientLtp = pm.collectionVariables.get(\"newReleaseHttpClientLtp\");\r",
															"\r",
															"    newReleaseHttpClientLtpUuid = newReleaseHttpClientLtp[\"uuid\"];\r",
															"\r",
															"    initialReleaseNumber = newReleaseHttpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"release-number\"];\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Variables could not be loaded.\");\r",
															"}\r",
															"\r",
															"/****************************************************************************************\r",
															"* Setting Collection Variables\r",
															"****************************************************************************************/\r",
															"\r",
															"/****************************************************************************************\r",
															"* Setting Local Variables and Preparing the Request\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    let URI;\r",
															"    URI = APPLICATION.serverUrl \r",
															"            + \"/core-model-1-4:control-construct/logical-termination-point=\"\r",
															"            + newReleaseHttpClientLtpUuid\r",
															"            + \"/layer-protocol=0/http-client-interface-1-0:http-client-interface-pac/http-client-interface-configuration/release-number\";\r",
															"\r",
															"    let REQUEST_BODY;\r",
															"    REQUEST_BODY = '{ '\r",
															"                    +   '\"http-client-interface-1-0:release-number\": \"' + initialReleaseNumber + '\"'\r",
															"                    + ' }';\r",
															"\r",
															"    let AUTHORIZATION;\r",
															"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
															"\r",
															"    let ACCEPT;\r",
															"    ACCEPT = \"application/json\";\r",
															"\r",
															"    let CONTENT_TYPE;\r",
															"    CONTENT_TYPE = \"application/json\";\r",
															"\r",
															"\r",
															"    pm.variables.clear();\r",
															"\r",
															"    pm.variables.set(\"uri\", URI);\r",
															"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
															"\r",
															"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
															"\r",
															"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
															"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(error)\r",
															"    console.log(\"! Local variables could not be set.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-mock-response-code",
														"value": "204",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "initial newRelease/remote-protocol",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"var APPLICATION;\r",
															"var newReleaseTcpClientUuid;\r",
															"var initialReleaseRemoteProtocol;\r",
															"try {\r",
															"    APPLICATION = pm.environment.get(\"application\");\r",
															"    \r",
															"    let newReleaseTcpClientLtp;\r",
															"    newReleaseTcpClientLtp = pm.collectionVariables.get(\"newReleaseTcpClientLtp\");\r",
															"\r",
															"    newReleaseTcpClientUuid = newReleaseTcpClientLtp[\"uuid\"];\r",
															"\r",
															"    initialReleaseRemoteProtocol = newReleaseTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Variables could not be loaded.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Setting Local Variables and Preparing the Request\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    let URI;\r",
															"    URI = APPLICATION.serverUrl \r",
															"            + \"/core-model-1-4:control-construct/logical-termination-point=\" \r",
															"            + newReleaseTcpClientUuid\r",
															"            + \"/layer-protocol=0/tcp-client-interface-1-0:tcp-client-interface-pac/tcp-client-interface-configuration/remote-protocol\";\r",
															"\r",
															"    let REQUEST_BODY;\r",
															"    REQUEST_BODY = '{ '\r",
															"                    +   '\"tcp-client-interface-1-0:remote-protocol\": \"' + initialReleaseRemoteProtocol + '\"'\r",
															"                    + ' }';\r",
															"\r",
															"    let AUTHORIZATION;\r",
															"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
															"\r",
															"    let ACCEPT;\r",
															"    ACCEPT = \"application/json\";\r",
															"\r",
															"    let CONTENT_TYPE;\r",
															"    CONTENT_TYPE = \"application/json\";\r",
															"\r",
															"\r",
															"    pm.variables.clear();\r",
															"\r",
															"    pm.variables.set(\"uri\", URI);\r",
															"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
															"\r",
															"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
															"\r",
															"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
															"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(error)\r",
															"    console.log(\"! Local variables could not be set.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-mock-response-code",
														"value": "204",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "initial newRelease/remote-address",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"var APPLICATION;\r",
															"var newReleaseTcpClientUuid;\r",
															"var initialReleaseRemoteAddress;\r",
															"try {\r",
															"    APPLICATION = pm.environment.get(\"application\");\r",
															"    \r",
															"    let newReleaseTcpClientLtp;\r",
															"    newReleaseTcpClientLtp = pm.collectionVariables.get(\"newReleaseTcpClientLtp\");\r",
															"\r",
															"    newReleaseTcpClientUuid = newReleaseTcpClientLtp[\"uuid\"];\r",
															"\r",
															"    initialReleaseRemoteAddress = newReleaseTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-address\"];\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Variables could not be loaded.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Setting Local Variables and Preparing the Request\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    let URI;\r",
															"    URI = APPLICATION.serverUrl \r",
															"            + \"/core-model-1-4:control-construct/logical-termination-point=\"\r",
															"            + newReleaseTcpClientUuid\r",
															"            + \"/layer-protocol=0/tcp-client-interface-1-0:tcp-client-interface-pac/tcp-client-interface-configuration/remote-address\";\r",
															"\r",
															"    let REQUEST_BODY;\r",
															"    REQUEST_BODY = '{ '\r",
															"                    +   '\"tcp-client-interface-1-0:remote-address\": ' + JSON.stringify(initialReleaseRemoteAddress)\r",
															"                    + ' }';\r",
															"\r",
															"    let AUTHORIZATION;\r",
															"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
															"\r",
															"    let ACCEPT;\r",
															"    ACCEPT = \"application/json\";\r",
															"\r",
															"    let CONTENT_TYPE;\r",
															"    CONTENT_TYPE = \"application/json\";\r",
															"\r",
															"    pm.variables.clear();\r",
															"\r",
															"    pm.variables.set(\"uri\", URI);\r",
															"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
															"\r",
															"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
															"\r",
															"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
															"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(error)\r",
															"    console.log(\"! Local variables could not be set.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-mock-response-code",
														"value": "204",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "initial newRelease/remote-port",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"var APPLICATION;\r",
															"var newReleaseTcpClientUuid;\r",
															"var initialReleaseRemotePort;\r",
															"try {\r",
															"    APPLICATION = pm.environment.get(\"application\");\r",
															"    \r",
															"    let newReleaseTcpClientLtp;\r",
															"    newReleaseTcpClientLtp = pm.collectionVariables.get(\"newReleaseTcpClientLtp\");\r",
															"\r",
															"    newReleaseTcpClientUuid = newReleaseTcpClientLtp[\"uuid\"];\r",
															"\r",
															"    initialReleaseRemotePort = newReleaseTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-port\"];\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Variables could not be loaded.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Setting Local Variables and Preparing the Request\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    let URI;\r",
															"    URI = APPLICATION.serverUrl \r",
															"            + \"/core-model-1-4:control-construct/logical-termination-point=\" \r",
															"            + newReleaseTcpClientUuid\r",
															"            + \"/layer-protocol=0/tcp-client-interface-1-0:tcp-client-interface-pac/tcp-client-interface-configuration/remote-port\";\r",
															"\r",
															"    let REQUEST_BODY;\r",
															"    REQUEST_BODY = '{ '\r",
															"                    +   '\"tcp-client-interface-1-0:remote-port\": ' + initialReleaseRemotePort\r",
															"                    + ' }';\r",
															"\r",
															"    let AUTHORIZATION;\r",
															"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
															"\r",
															"    let ACCEPT;\r",
															"    ACCEPT = \"application/json\";\r",
															"\r",
															"    let CONTENT_TYPE;\r",
															"    CONTENT_TYPE = \"application/json\";\r",
															"\r",
															"\r",
															"    pm.variables.clear();\r",
															"\r",
															"    pm.variables.set(\"uri\", URI);\r",
															"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
															"\r",
															"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
															"\r",
															"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
															"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(error)\r",
															"    console.log(\"! Local variables could not be set.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-mock-response-code",
														"value": "204",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Check /core-model-1-4:control-construct",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"var APPLICATION;\r",
															"var AUTHORIZATION;\r",
															"try {\r",
															"    APPLICATION = pm.environment.get(\"application\");\r",
															"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
															"\r",
															"    oamPath = \"/core-model-1-4:control-construct\";\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Environment variables could not be loaded.\");\r",
															"}\r",
															"\r",
															"/****************************************************************************************\r",
															"* Defining Request Body\r",
															"****************************************************************************************/\r",
															"var REQUEST_BODY;\r",
															"try {\r",
															"    REQUEST_BODY = \"\";\r",
															"} catch (error) {\r",
															"    console.log(\"!Could not define request body. \");\r",
															"}\r",
															"\r",
															"/****************************************************************************************\r",
															"* Setting Local Variables and Preparing the Request\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    let URI;\r",
															"    URI = APPLICATION.serverUrl + oamPath;\r",
															"\r",
															"    let ACCEPT;\r",
															"    ACCEPT = \"application/json\";\r",
															"\r",
															"    let CONTENT_TYPE;\r",
															"    CONTENT_TYPE = \"application/json\";\r",
															"\r",
															"    pm.variables.clear();\r",
															"\r",
															"    pm.variables.set(\"uri\", URI);\r",
															"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
															"\r",
															"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
															"\r",
															"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
															"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Local variables could not be set.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"var expectedLogicalTerminationPoint;\r",
															"var expectedForwardingConstruct;\r",
															"try {\r",
															"    expectedLogicalTerminationPoint = pm.collectionVariables.get(\"ltpList\");\r",
															"    expectedForwardingConstruct = pm.collectionVariables.get(\"fcList\");\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Collection variables could not be loaded.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Extracting Result\r",
															"****************************************************************************************/\r",
															"var RESPONSE_CODE;\r",
															"var RESPONSE;\r",
															"try {\r",
															"    let response;\r",
															"    response = pm.response;\r",
															"\r",
															"    RESPONSE_CODE = parseInt(response.code);\r",
															"\r",
															"    if (Math.floor(RESPONSE_CODE / 100) === 2) {\r",
															"        RESPONSE = JSON.parse(response.stream);\r",
															"    } else {\r",
															"        RESPONSE = [];\r",
															"    }\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Result value lists could not be extracted.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Testing\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    pm.test(\"GET /core-model-1-4:control-construct responds 200\", function () {\r",
															"        pm.expect(RESPONSE_CODE).to.equal(200);\r",
															"    });\r",
															"\r",
															"    let actualLtpList;\r",
															"    actualLtpList = RESPONSE[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
															"\r",
															"    pm.test(\"Received logical-termination-point is same as intial instance \", function () {\r",
															"        pm.expect(actualLtpList).to.deep.equal(expectedLogicalTerminationPoint);\r",
															"    });\r",
															"\r",
															"    let actualFcList;\r",
															"    actualFcList = RESPONSE[\"core-model-1-4:control-construct\"][\"forwarding-domain\"][0][\"forwarding-construct\"];\r",
															"\r",
															"    pm.test(\"Received forwarding-construct is same as intial instance \", function () {\r",
															"        pm.expect(actualFcList).to.deep.equal(expectedForwardingConstruct);\r",
															"    });\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Testing could not be executed.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-mock-response-code",
														"value": "200",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"description": "## Get new-application-release updated?\n#### Preparation:\n- GETing CC (/core-model-1-4:control-construct)\n  - searching CC for op-s of /v1/bequeath-your-data-and-die, storing operation-key\n  - searcing CC for output port of PromptForBequeathingDataCausesTransferOfListOfApplications, find corresponding op-c, http-c and tcp-c, store them\n- POST /v1/bequeath-your-data-and-die with\n  - new-application-name according to chosen http-c\n  - new-application-protocol, new-application-address and new-application-port with random generated dummy values (assure sufficiently high probability that set does not exist!), BUT new-application-release attribute with random dummy value that matches the specified pattern.\n  - operation-key from above\n  - reasonable parameters\n\n#### Testing:\n- checking for ResponseCode==204\n- GETing CC (/core-model-1-4:control-construct)\n- verify that CC/NewRelease http-c release-number is updated with dummyValue.\n\n#### Clearing:\n- PUT NewRelease/release-number with original value\n- PUT NewRelease/remote-protocol with original value\n- PUT NewRelease/remote-address with original value\n- PUT NewRelease/remote-port with original value\n\n#### Clearance check:\n- Check if the logical-termination-point instance is the same as initial configuration\n- Check if the forwarding-construct instance is the same as initial configuration"
								},
								{
									"name": "new-application-protocol updated?",
									"item": [
										{
											"name": "reference /core-model-1-4:control-construct",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n-----  /v1/bequeath-your-data-and-die acceptance -- new-application-protocol attribute checked? -------------------------------\");\r",
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"var APPLICATION;\r",
															"try {\r",
															"    APPLICATION = pm.environment.get(\"application\");\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Environment variables could not be loaded.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Setting Local Variables and Preparing the Request\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    let URI;\r",
															"    URI = APPLICATION.serverUrl + \"/core-model-1-4:control-construct\";\r",
															"\r",
															"    let REQUEST_BODY;\r",
															"    REQUEST_BODY = \"\";\r",
															"\r",
															"    let AUTHORIZATION;\r",
															"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
															"\r",
															"    let ACCEPT;\r",
															"    ACCEPT = \"application/json\";\r",
															"\r",
															"    let CONTENT_TYPE;\r",
															"    CONTENT_TYPE = \"application/json\";\r",
															"\r",
															"\r",
															"    pm.variables.clear();\r",
															"\r",
															"    pm.variables.set(\"uri\", URI);\r",
															"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
															"\r",
															"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
															"\r",
															"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
															"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Local variables could not be set.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Extracting Result\r",
															"****************************************************************************************/\r",
															"var ltpList;\r",
															"var fcList;\r",
															"try {\r",
															"    let response;\r",
															"    response = pm.response;\r",
															"    \r",
															"    let responseCode;\r",
															"    responseCode = parseInt(response.code);\r",
															"    \r",
															"    if ( Math.floor(responseCode/100) === 2 ) {\r",
															"        let responseObject;\r",
															"        responseObject = JSON.parse(response.stream);\r",
															"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
															"        fcList = responseObject[\"core-model-1-4:control-construct\"][\"forwarding-domain\"][0][\"forwarding-construct\"];\r",
															"\r",
															"    } else {\r",
															"        ltpList = [];\r",
															"        fcList = [];\r",
															"    }\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! ltpList could not be extracted.\");\r",
															"}\r",
															"\r",
															"var currentOperationServer;\r",
															"var newReleaseHttpClientLtp;\r",
															"var newReleaseTcpClientLtp;\r",
															"try {\r",
															"    currentOperationServer = FindOperationServer(\"/v1/bequeath-your-data-and-die\", ltpList);\r",
															"\r",
															"    //Bequeath Transfer Of List Of Applications\r",
															"    let bequeathingDataCausesTransferOfListOfApplicationsOperationClientLtp = FindOperationClientUsingCallback(\"PromptForBequeathingDataCausesTransferOfListOfApplications\", fcList, ltpList)\r",
															"\r",
															"    newReleaseHttpClientLtp = FindServingLtp(bequeathingDataCausesTransferOfListOfApplicationsOperationClientLtp, ltpList);\r",
															"    newReleaseTcpClientLtp = FindServingLtp(newReleaseHttpClientLtp, ltpList); \r",
															"} catch (error) {\r",
															"    console.log(error);\r",
															"    console.log(\"! Reference objects could not be extracted.\");\r",
															"}\r",
															"\r",
															"/****************************************************************************************\r",
															"* Setting Collection Variables\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    pm.collectionVariables.clear();\r",
															"    \r",
															"    pm.collectionVariables.set(\"currentOperationServer\", currentOperationServer);\r",
															"    pm.collectionVariables.set(\"newReleaseHttpClientLtp\", newReleaseHttpClientLtp);\r",
															"    pm.collectionVariables.set(\"newReleaseTcpClientLtp\", newReleaseTcpClientLtp);\r",
															"    pm.collectionVariables.set(\"ltpList\", ltpList);\r",
															"    pm.collectionVariables.set(\"fcList\", fcList);\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Collection variables could not be set.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/\r",
															"\r",
															"function FindOperationServer(operationName, ltpList) {\r",
															"    let operationServer;\r",
															"    operationServer = \"\";\r",
															"    try {\r",
															"        let sampleUuid;\r",
															"        for(let i=0; i<ltpList.length; i++) {\r",
															"            sampleUuid = ltpList[i][\"uuid\"];\r",
															"            if(sampleUuid.includes(\"op-s-\")) {\r",
															"                let sampleOperationName;\r",
															"                sampleOperationName = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
															"                if(sampleOperationName == operationName) {\r",
															"                    operationServer = ltpList[i];\r",
															"                    return operationServer;\r",
															"                }\r",
															"            }\r",
															"        }\r",
															"    } catch (error) {\r",
															"        console.log(\"! Exception in function : FindOperationServer. \");\r",
															"    }\r",
															"    return operationServer;\r",
															"}\r",
															"\r",
															"function FindOutputFcPortList(forwardingName, fcList) {\r",
															"    let outputFcPortList;\r",
															"    outputFcPortList = [];\r",
															"    try {\r",
															"        for( let i=0; i<fcList.length; i++ ) {\r",
															"            for(let j=0; j<fcList[i][\"name\"].length; j++) {               \r",
															"                if(fcList[i][\"name\"][j][\"value\"] == forwardingName) {\r",
															"                    fcPortList = fcList[i][\"fc-port\"];\r",
															"                    for(let k=0;k<fcPortList.length;k++) {\r",
															"                        if(fcPortList[k][\"port-direction\"] == \"core-model-1-4:PORT_DIRECTION_TYPE_OUTPUT\") {\r",
															"                            outputFcPortList.push(fcPortList[k]);\r",
															"                        }\r",
															"                    }\r",
															"                    return outputFcPortList;\r",
															"                }\r",
															"            }\r",
															"        }\r",
															"    } catch (error) {\r",
															"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
															"    }\r",
															"    return outputFcPortList;\r",
															"}\r",
															"\r",
															"function FindActualInstanceByUuid(expectedUuid, actualLtpList) {\r",
															"    let actualInstance;\r",
															"    actualInstance = {};\r",
															"    try {\r",
															"        for ( let i=0; i<actualLtpList.length; i++ ) {\r",
															"            let sampleUuid;\r",
															"            sampleUuid = actualLtpList[i][\"uuid\"];\r",
															"            if( sampleUuid == expectedUuid ) {\r",
															"                actualInstance = actualLtpList[i];\r",
															"                return actualInstance;\r",
															"            }\r",
															"        }\r",
															"\r",
															"    } catch (error) {\r",
															"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
															"    }\r",
															"    return undefined;\r",
															"}\r",
															"\r",
															"function FindServingLtp(clientLtp, ltpList) {\r",
															"    let servingLtp;\r",
															"    servingLtp = {};\r",
															"    try{\r",
															"        let serverLtpUuid;\r",
															"        serverLtpUuid = clientLtp[\"server-ltp\"][0];\r",
															"        for( let i=0; i<ltpList.length; i++ ) {\r",
															"            let sampleUuid;\r",
															"            sampleUuid = ltpList[i][\"uuid\"];\r",
															"            if( sampleUuid == serverLtpUuid ) {\r",
															"                servingLtp = ltpList[i];\r",
															"                return servingLtp;\r",
															"            }\r",
															"        }\r",
															"    } catch(error) {\r",
															"        console.log(error);\r",
															"        console.log(\"! Exception in function : FindServingLtp. \")\r",
															"    }\r",
															"    return servingLtp;\r",
															"}\r",
															"\r",
															"function FindOperationClientUsingCallback(callback, fcList, ltpList) {\r",
															"    let operationClientLtp\r",
															"    try {\r",
															"        let outputFcPortList = FindOutputFcPortList(callback, fcList);\r",
															"        let randomOutputFcPort = outputFcPortList[Math.floor(Math.random() * outputFcPortList.length)];\r",
															"        let outputLtpUuid = randomOutputFcPort[\"logical-termination-point\"];\r",
															"        operationClientLtp = FindActualInstanceByUuid(outputLtpUuid, ltpList);\r",
															"    } catch (error) {\r",
															"        console.log(error);\r",
															"        console.log(\"! Exception in function FindOperationClientUsingCallback. \");\r",
															"    }\r",
															"    return  operationClientLtp\r",
															"}\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "x-mock-response-code",
														"value": "200",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Dummy /v1/bequeath-your-data-and-die",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"var APPLICATION;\r",
															"var OPERATION_KEY;\r",
															"var newApplicationName;\r",
															"var newApplicationRelease;\r",
															"var dummyApplicationProtocol;\r",
															"var newApplicationAddress;\r",
															"var newApplicationPort;\r",
															"try {\r",
															"    APPLICATION = pm.environment.get(\"application\");\r",
															"\r",
															"    let currentOperationServer;\r",
															"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
															"    \r",
															"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
															"\r",
															"    let newReleaseHttpClientLtp;\r",
															"    newReleaseHttpClientLtp = pm.collectionVariables.get(\"newReleaseHttpClientLtp\");\r",
															"\r",
															"    newApplicationName = newReleaseHttpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
															"\r",
															"    newApplicationRelease = newReleaseHttpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"release-number\"];\r",
															"\r",
															"    let newReleaseTcpClientLtp;\r",
															"    newReleaseTcpClientLtp = pm.collectionVariables.get(\"newReleaseTcpClientLtp\");\r",
															"\r",
															"    let protocol = newReleaseTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
															"    dummyApplicationProtocol = GenerateDummyRemoteProtocol(protocol);\r",
															"    dummyApplicationProtocol = dummyApplicationProtocol.substring(('tcp-client-interface-1-0:PROTOCOL_TYPE_').length);\r",
															"    \r",
															"    newApplicationAddress = newReleaseTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-address\"];\r",
															"    \r",
															"    newApplicationPort = newReleaseTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-port\"];\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(error);\r",
															"    console.log(\"! Input Data could not be loaded.\");\r",
															"}\r",
															"\r",
															"/****************************************************************************************\r",
															"* Defining Dummy Parameters\r",
															"****************************************************************************************/\r",
															"var USER_NAME;\r",
															"var ORIGINATOR;\r",
															"var X_CORRELATOR;\r",
															"var TRACE_INDICATOR;\r",
															"var CUSTOMER_JOURNEY;\r",
															"try {\r",
															"    USER_NAME = APPLICATION.userName;\r",
															"    ORIGINATOR = \"Postman\";\r",
															"    X_CORRELATOR = CreateXCorrelator();\r",
															"    TRACE_INDICATOR = \"1\";\r",
															"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
															"    \r",
															"} catch (error) {\r",
															"    console.log(\"! Could not define dummy values for parameters. \");\r",
															"}\r",
															"\r",
															"/****************************************************************************************\r",
															"* Defining Request Body\r",
															"****************************************************************************************/\r",
															"var REQUEST_BODY;\r",
															"try {\r",
															"    REQUEST_BODY = '{'\r",
															"        + '\"new-application-name\" : ' + '\"' + newApplicationName + '\",'\r",
															"        + '\"new-application-release\" : ' + '\"' + newApplicationRelease + '\",'\r",
															"        + '\"new-application-protocol\" : ' + '\"' + dummyApplicationProtocol + '\",'\r",
															"        + '\"new-application-address\" : ' + JSON.stringify(newApplicationAddress) + ','\r",
															"        + '\"new-application-port\" : ' +  newApplicationPort\r",
															"    +'}';\r",
															"} catch (error) {\r",
															"    console.log(\"!Could not define request body. \");\r",
															"}\r",
															"/****************************************************************************************\r",
															"* Setting Collection Variables\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    pm.collectionVariables.set(\"dummyApplicationProtocol\", dummyApplicationProtocol);\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Collection variables could not be set.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Setting Local Variables and Preparing the Request\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    let URI;\r",
															"    URI = APPLICATION.serverUrl + \"/v1/bequeath-your-data-and-die\";\r",
															"\r",
															"    let ACCEPT;\r",
															"    ACCEPT = \"application/json\";\r",
															"\r",
															"    let CONTENT_TYPE;\r",
															"    CONTENT_TYPE = \"application/json\";\r",
															"\r",
															"    pm.variables.clear();\r",
															"\r",
															"    pm.variables.set(\"uri\", URI);\r",
															"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
															"\r",
															"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
															"\r",
															"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
															"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
															"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
															"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
															"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
															"\r",
															"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
															"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(error);\r",
															"    console.log(\"! Local variables could not be set.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/\r",
															"\r",
															"function CreateXCorrelator() {\r",
															"    let xCorrelator;\r",
															"    xCorrelator = \"\";\r",
															"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
															"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
															"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
															"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
															"    xCorrelator += GenerateRandomHexString(12);\r",
															"    return xCorrelator;\r",
															"}\r",
															"\r",
															"function GenerateRandomHexString(length) {\r",
															"    var randomRandomHexString = \"\";\r",
															"    while (randomRandomHexString.length < length) {\r",
															"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
															"    }\r",
															"    return randomRandomHexString.substring(0,length);\r",
															"}\r",
															"\r",
															"function GenerateDummyRemoteProtocol(currentProtocol) {\r",
															"    let alternativeProtocolList;\r",
															"    alternativeProtocolList = [  \"tcp-client-interface-1-0:PROTOCOL_TYPE_HTTP\",\r",
															"                                    \"tcp-client-interface-1-0:PROTOCOL_TYPE_HTTPS\"\r",
															"                                ];\r",
															"    let indexOfCurrentProtocol;\r",
															"    indexOfCurrentProtocol = alternativeProtocolList.indexOf(currentProtocol);\r",
															"    if (indexOfCurrentProtocol > -1) {\r",
															"        alternativeProtocolList.splice(indexOfCurrentProtocol, 1);\r",
															"    }\r",
															"\r",
															"    let alternativeProtocol;\r",
															"    let alternativeProtocolIndex;\r",
															"    alternativeProtocolIndex = Math.floor(Math.random() * alternativeProtocolList.length);\r",
															"    alternativeProtocol = alternativeProtocolList[alternativeProtocolIndex]; \r",
															"\r",
															"    return alternativeProtocol;\r",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Extracting Result\r",
															"****************************************************************************************/\r",
															"var RESPONSE_CODE;\r",
															"try {\r",
															"    let response;\r",
															"    response = pm.response;\r",
															"\r",
															"    RESPONSE_CODE = parseInt(response.code);\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Response Code could not be extracted.\");\r",
															"}    \r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Testing\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    pm.test(\"POST /v1/bequeath-your-data-and-die responds 204\", function () {\r",
															"        pm.expect(RESPONSE_CODE).to.equal(204);\r",
															"    });\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Testing could not be executed.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-mock-response-code",
														"value": "400",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Expected /core-model-1-4:control-construct",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"var APPLICATION;\r",
															"try {\r",
															"    APPLICATION = pm.environment.get(\"application\");\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Environment variables could not be loaded.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Setting Local Variables and Preparing the Request\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    let URI;\r",
															"    URI = APPLICATION.serverUrl + \"/core-model-1-4:control-construct\";\r",
															"\r",
															"    let REQUEST_BODY;\r",
															"    REQUEST_BODY = \"\";\r",
															"\r",
															"    let AUTHORIZATION;\r",
															"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
															"\r",
															"    let ACCEPT;\r",
															"    ACCEPT = \"application/json\";\r",
															"\r",
															"    let CONTENT_TYPE;\r",
															"    CONTENT_TYPE = \"application/json\";\r",
															"\r",
															"\r",
															"    pm.variables.clear();\r",
															"\r",
															"    pm.variables.set(\"uri\", URI);\r",
															"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
															"\r",
															"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
															"\r",
															"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
															"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Local variables could not be set.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"var expectedRemoteProtocol;\r",
															"var initialNewReleaseTcpClientLtp;\r",
															"try {\r",
															"    expectedRemoteProtocol = pm.collectionVariables.get(\"dummyApplicationProtocol\");\r",
															"    initialNewReleaseTcpClientLtp = pm.collectionVariables.get(\"newReleaseTcpClientLtp\");\r",
															"   \r",
															"} catch(error) {\r",
															"    console.log(\"! Could not load input data. \");\r",
															"}\r",
															"\r",
															"/****************************************************************************************\r",
															"* Extracting Result\r",
															"****************************************************************************************/\r",
															"var ltpList;\r",
															"try {\r",
															"    let response;\r",
															"    response = pm.response;\r",
															"    \r",
															"    let responseCode;\r",
															"    responseCode = parseInt(response.code);\r",
															"    \r",
															"    if ( Math.floor(responseCode/100) === 2 ) {\r",
															"        let responseObject;\r",
															"        responseObject = JSON.parse(response.stream);\r",
															"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
															"\r",
															"    } else {\r",
															"        ltpList = [];\r",
															"    }\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! ltpList could not be extracted.\");\r",
															"}\r",
															"\r",
															"var actualRemoteProtocol;\r",
															"try {\r",
															"    let newReleaseTcpClientUuid;\r",
															"    newReleaseTcpClientUuid = initialNewReleaseTcpClientLtp[\"uuid\"];\r",
															"\r",
															"    let actualTcpClientLtp;\r",
															"    actualTcpClientLtp = FindActualInstanceByUuid(newReleaseTcpClientUuid, ltpList);\r",
															"\r",
															"    actualRemoteProtocol = actualTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
															"    actualRemoteProtocol = actualRemoteProtocol.substring(('tcp-client-interface-1-0:PROTOCOL_TYPE_').length);\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(error);\r",
															"    console.log(\"! Reference objects could not be extracted.\");\r",
															"} \r",
															"\r",
															"/****************************************************************************************\r",
															"* Testing\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    pm.test(\"Provides expected new-application-protocol: \" + expectedRemoteProtocol, function () {\r",
															"        pm.expect(actualRemoteProtocol).to.equal(expectedRemoteProtocol);\r",
															"    });\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Testing could not be executed.\");\r",
															"}\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/\r",
															"function FindActualInstanceByUuid(expectedUuid, actualLtpList) {\r",
															"    let actualInstance;\r",
															"    actualInstance = {};\r",
															"    try {\r",
															"        for ( let i=0; i<actualLtpList.length; i++ ) {\r",
															"            let sampleUuid;\r",
															"            sampleUuid = actualLtpList[i][\"uuid\"];\r",
															"            if( sampleUuid == expectedUuid ) {\r",
															"                actualInstance = actualLtpList[i];\r",
															"                return actualInstance;\r",
															"            }\r",
															"        }\r",
															"\r",
															"    } catch (error) {\r",
															"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
															"    }\r",
															"    return undefined;\r",
															"}\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "x-mock-response-code",
														"value": "200",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "initial newRelease/remote-protocol",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"var APPLICATION;\r",
															"var newReleaseTcpClientUuid;\r",
															"var initialReleaseRemoteProtocol;\r",
															"try {\r",
															"    APPLICATION = pm.environment.get(\"application\");\r",
															"    \r",
															"    let newReleaseTcpClientLtp;\r",
															"    newReleaseTcpClientLtp = pm.collectionVariables.get(\"newReleaseTcpClientLtp\");\r",
															"\r",
															"    newReleaseTcpClientUuid = newReleaseTcpClientLtp[\"uuid\"];\r",
															"\r",
															"    initialReleaseRemoteProtocol = newReleaseTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Variables could not be loaded.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Setting Local Variables and Preparing the Request\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    let URI;\r",
															"    URI = APPLICATION.serverUrl \r",
															"            + \"/core-model-1-4:control-construct/logical-termination-point=\" \r",
															"            + newReleaseTcpClientUuid\r",
															"            + \"/layer-protocol=0/tcp-client-interface-1-0:tcp-client-interface-pac/tcp-client-interface-configuration/remote-protocol\";\r",
															"\r",
															"    let REQUEST_BODY;\r",
															"    REQUEST_BODY = '{ '\r",
															"                    +   '\"tcp-client-interface-1-0:remote-protocol\": \"' + initialReleaseRemoteProtocol + '\"'\r",
															"                    + ' }';\r",
															"\r",
															"    let AUTHORIZATION;\r",
															"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
															"\r",
															"    let ACCEPT;\r",
															"    ACCEPT = \"application/json\";\r",
															"\r",
															"    let CONTENT_TYPE;\r",
															"    CONTENT_TYPE = \"application/json\";\r",
															"\r",
															"\r",
															"    pm.variables.clear();\r",
															"\r",
															"    pm.variables.set(\"uri\", URI);\r",
															"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
															"\r",
															"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
															"\r",
															"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
															"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(error)\r",
															"    console.log(\"! Local variables could not be set.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-mock-response-code",
														"value": "204",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Check /core-model-1-4:control-construct",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"var APPLICATION;\r",
															"var AUTHORIZATION;\r",
															"try {\r",
															"    APPLICATION = pm.environment.get(\"application\");\r",
															"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
															"\r",
															"    oamPath = \"/core-model-1-4:control-construct\";\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Environment variables could not be loaded.\");\r",
															"}\r",
															"\r",
															"/****************************************************************************************\r",
															"* Defining Request Body\r",
															"****************************************************************************************/\r",
															"var REQUEST_BODY;\r",
															"try {\r",
															"    REQUEST_BODY = \"\";\r",
															"} catch (error) {\r",
															"    console.log(\"!Could not define request body. \");\r",
															"}\r",
															"\r",
															"/****************************************************************************************\r",
															"* Setting Local Variables and Preparing the Request\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    let URI;\r",
															"    URI = APPLICATION.serverUrl + oamPath;\r",
															"\r",
															"    let ACCEPT;\r",
															"    ACCEPT = \"application/json\";\r",
															"\r",
															"    let CONTENT_TYPE;\r",
															"    CONTENT_TYPE = \"application/json\";\r",
															"\r",
															"    pm.variables.clear();\r",
															"\r",
															"    pm.variables.set(\"uri\", URI);\r",
															"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
															"\r",
															"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
															"\r",
															"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
															"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Local variables could not be set.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"var expectedLogicalTerminationPoint;\r",
															"var expectedForwardingConstruct;\r",
															"try {\r",
															"    expectedLogicalTerminationPoint = pm.collectionVariables.get(\"ltpList\");\r",
															"    expectedForwardingConstruct = pm.collectionVariables.get(\"fcList\");\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Collection variables could not be loaded.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Extracting Result\r",
															"****************************************************************************************/\r",
															"var RESPONSE_CODE;\r",
															"var RESPONSE;\r",
															"try {\r",
															"    let response;\r",
															"    response = pm.response;\r",
															"\r",
															"    RESPONSE_CODE = parseInt(response.code);\r",
															"\r",
															"    if (Math.floor(RESPONSE_CODE / 100) === 2) {\r",
															"        RESPONSE = JSON.parse(response.stream);\r",
															"    } else {\r",
															"        RESPONSE = [];\r",
															"    }\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Result value lists could not be extracted.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Testing\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    pm.test(\"GET /core-model-1-4:control-construct responds 200\", function () {\r",
															"        pm.expect(RESPONSE_CODE).to.equal(200);\r",
															"    });\r",
															"\r",
															"    let actualLtpList;\r",
															"    actualLtpList = RESPONSE[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
															"\r",
															"    pm.test(\"Received logical-termination-point is same as intial instance \", function () {\r",
															"        pm.expect(actualLtpList).to.deep.equal(expectedLogicalTerminationPoint);\r",
															"    });\r",
															"\r",
															"    let actualFcList;\r",
															"    actualFcList = RESPONSE[\"core-model-1-4:control-construct\"][\"forwarding-domain\"][0][\"forwarding-construct\"];\r",
															"\r",
															"    pm.test(\"Received forwarding-construct is same as intial instance \", function () {\r",
															"        pm.expect(actualFcList).to.deep.equal(expectedForwardingConstruct);\r",
															"    });\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Testing could not be executed.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-mock-response-code",
														"value": "200",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"description": "## Get new-application-protocol updated?\n#### Preparation:\n- GETing CC (/core-model-1-4:control-construct)\n  - searching CC for op-s of /v1/bequeath-your-data-and-die, storing operation-key\n  - searcing CC for output port of PromptForBequeathingDataCausesTransferOfListOfApplications, find corresponding op-c, http-c and tcp-c, store them.\n- POST /v1/bequeath-your-data-and-die with\n  - new-application-name and new-application-release attribute according to chosen http-c\n  - new-application-address and new-application-port according to chosen tcp-c.\n  - new-application-protocol with random generated dummy value.\n  - operation-key from above\n  - reasonable parameters\n\n#### Testing:\n- checking for ResponseCode==204\n- GETing CC (/core-model-1-4:control-construct)\n- searching CC for tcp-c of NewRelease and check if the remote-protocol is updated with dummyValue.\n\n#### Clearing:\n- PUT NewRelease/remote-protocol with original value\n\n#### Clearance check:\n- Check if the logical-termination-point instance is the same as initial configuration\n- Check if the forwarding-construct instance is the same as initial configuration"
								},
								{
									"name": "new-application-address updated?",
									"item": [
										{
											"name": "ipv-4-address updated?",
											"item": [
												{
													"name": "reference /core-model-1-4:control-construct",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"console.log(\"\\n-----/v1/bequeath-your-data-and-die acceptance -- new-application-address/ipv-4-address attribute updated? -------------------------------\");\r",
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Environment variables could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/core-model-1-4:control-construct\";\r",
																	"\r",
																	"    let REQUEST_BODY;\r",
																	"    REQUEST_BODY = \"\";\r",
																	"\r",
																	"    let AUTHORIZATION;\r",
																	"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var ltpList;\r",
																	"var fcList;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"    \r",
																	"    let responseCode;\r",
																	"    responseCode = parseInt(response.code);\r",
																	"    \r",
																	"    if ( Math.floor(responseCode/100) === 2 ) {\r",
																	"        let responseObject;\r",
																	"        responseObject = JSON.parse(response.stream);\r",
																	"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																	"        fcList = responseObject[\"core-model-1-4:control-construct\"][\"forwarding-domain\"][0][\"forwarding-construct\"];\r",
																	"\r",
																	"    } else {\r",
																	"        ltpList = [];\r",
																	"        fcList = [];\r",
																	"    }\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! ltpList could not be extracted.\");\r",
																	"}\r",
																	"\r",
																	"var currentOperationServer;\r",
																	"var newReleaseHttpClientLtp;\r",
																	"var newReleaseTcpClientLtp;\r",
																	"try {\r",
																	"    currentOperationServer = FindOperationServer(\"/v1/bequeath-your-data-and-die\", ltpList);\r",
																	"\r",
																	"    //Bequeath Transfer Of List Of Applications\r",
																	"    let bequeathingDataCausesTransferOfListOfApplicationsOperationClientLtp = FindOperationClientUsingCallback(\"PromptForBequeathingDataCausesTransferOfListOfApplications\", fcList, ltpList)\r",
																	"\r",
																	"    newReleaseHttpClientLtp = FindServingLtp(bequeathingDataCausesTransferOfListOfApplicationsOperationClientLtp, ltpList);\r",
																	"    newReleaseTcpClientLtp = FindServingLtp(newReleaseHttpClientLtp, ltpList); \r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Reference objects could not be extracted.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.collectionVariables.clear();\r",
																	"    \r",
																	"    pm.collectionVariables.set(\"currentOperationServer\", currentOperationServer);\r",
																	"    pm.collectionVariables.set(\"newReleaseHttpClientLtp\", newReleaseHttpClientLtp);\r",
																	"    pm.collectionVariables.set(\"newReleaseTcpClientLtp\", newReleaseTcpClientLtp);\r",
																	"    pm.collectionVariables.set(\"ltpList\", ltpList);\r",
																	"    pm.collectionVariables.set(\"fcList\", fcList);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Collection variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"function FindOperationServer(operationName, ltpList) {\r",
																	"    let operationServer;\r",
																	"    operationServer = \"\";\r",
																	"    try {\r",
																	"        let sampleUuid;\r",
																	"        for(let i=0; i<ltpList.length; i++) {\r",
																	"            sampleUuid = ltpList[i][\"uuid\"];\r",
																	"            if(sampleUuid.includes(\"op-s-\")) {\r",
																	"                let sampleOperationName;\r",
																	"                sampleOperationName = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
																	"                if(sampleOperationName == operationName) {\r",
																	"                    operationServer = ltpList[i];\r",
																	"                    return operationServer;\r",
																	"                }\r",
																	"            }\r",
																	"        }\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Exception in function : FindOperationServer. \");\r",
																	"    }\r",
																	"    return operationServer;\r",
																	"}\r",
																	"\r",
																	"function FindOutputFcPortList(forwardingName, fcList) {\r",
																	"    let outputFcPortList;\r",
																	"    outputFcPortList = [];\r",
																	"    try {\r",
																	"        for( let i=0; i<fcList.length; i++ ) {\r",
																	"            for(let j=0; j<fcList[i][\"name\"].length; j++) {               \r",
																	"                if(fcList[i][\"name\"][j][\"value\"] == forwardingName) {\r",
																	"                    fcPortList = fcList[i][\"fc-port\"];\r",
																	"                    for(let k=0;k<fcPortList.length;k++) {\r",
																	"                        if(fcPortList[k][\"port-direction\"] == \"core-model-1-4:PORT_DIRECTION_TYPE_OUTPUT\") {\r",
																	"                            outputFcPortList.push(fcPortList[k]);\r",
																	"                        }\r",
																	"                    }\r",
																	"                    return outputFcPortList;\r",
																	"                }\r",
																	"            }\r",
																	"        }\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
																	"    }\r",
																	"    return outputFcPortList;\r",
																	"}\r",
																	"\r",
																	"function FindActualInstanceByUuid(expectedUuid, actualLtpList) {\r",
																	"    let actualInstance;\r",
																	"    actualInstance = {};\r",
																	"    try {\r",
																	"        for ( let i=0; i<actualLtpList.length; i++ ) {\r",
																	"            let sampleUuid;\r",
																	"            sampleUuid = actualLtpList[i][\"uuid\"];\r",
																	"            if( sampleUuid == expectedUuid ) {\r",
																	"                actualInstance = actualLtpList[i];\r",
																	"                return actualInstance;\r",
																	"            }\r",
																	"        }\r",
																	"\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
																	"    }\r",
																	"    return undefined;\r",
																	"}\r",
																	"\r",
																	"function FindServingLtp(clientLtp, ltpList) {\r",
																	"    let servingLtp;\r",
																	"    servingLtp = {};\r",
																	"    try{\r",
																	"        let serverLtpUuid;\r",
																	"        serverLtpUuid = clientLtp[\"server-ltp\"][0];\r",
																	"        for( let i=0; i<ltpList.length; i++ ) {\r",
																	"            let sampleUuid;\r",
																	"            sampleUuid = ltpList[i][\"uuid\"];\r",
																	"            if( sampleUuid == serverLtpUuid ) {\r",
																	"                servingLtp = ltpList[i];\r",
																	"                return servingLtp;\r",
																	"            }\r",
																	"        }\r",
																	"    } catch(error) {\r",
																	"        console.log(error);\r",
																	"        console.log(\"! Exception in function : FindServingLtp. \")\r",
																	"    }\r",
																	"    return servingLtp;\r",
																	"}\r",
																	"\r",
																	"function FindOperationClientUsingCallback(callback, fcList, ltpList) {\r",
																	"    let operationClientLtp\r",
																	"    try {\r",
																	"        let outputFcPortList = FindOutputFcPortList(callback, fcList);\r",
																	"        let randomOutputFcPort = outputFcPortList[Math.floor(Math.random() * outputFcPortList.length)];\r",
																	"        let outputLtpUuid = randomOutputFcPort[\"logical-termination-point\"];\r",
																	"        operationClientLtp = FindActualInstanceByUuid(outputLtpUuid, ltpList);\r",
																	"    } catch (error) {\r",
																	"        console.log(error);\r",
																	"        console.log(\"! Exception in function FindOperationClientUsingCallback. \");\r",
																	"    }\r",
																	"    return  operationClientLtp\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "GET",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "200",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Dummy /v1/bequeath-your-data-and-die",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"var OPERATION_KEY;\r",
																	"var newApplicationName;\r",
																	"var newApplicationRelease;\r",
																	"var newApplicationProtocol;\r",
																	"var dummyApplicationAddress;\r",
																	"var newApplicationPort;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"    let currentOperationServer;\r",
																	"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
																	"    \r",
																	"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																	"\r",
																	"    let newReleaseHttpClientLtp;\r",
																	"    newReleaseHttpClientLtp = pm.collectionVariables.get(\"newReleaseHttpClientLtp\");\r",
																	"\r",
																	"    newApplicationName = newReleaseHttpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
																	"\r",
																	"    newApplicationRelease = newReleaseHttpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"release-number\"];\r",
																	"    \r",
																	"    let newReleaseTcpClientLtp;\r",
																	"    newReleaseTcpClientLtp = pm.collectionVariables.get(\"newReleaseTcpClientLtp\");\r",
																	" \r",
																	"    newApplicationProtocol = newReleaseTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
																	"    newApplicationProtocol = newApplicationProtocol.substring(('tcp-client-interface-1-0:PROTOCOL_TYPE_').length);\r",
																	" \r",
																	"    let dummyIpv4Address = RandomIpAddress();\r",
																	"    dummyApplicationAddress = {\r",
																	"        \"ip-address\": {\r",
																	"            \"ipv-4-address\": dummyIpv4Address\r",
																	"        }\r",
																	"    };\r",
																	"\r",
																	"    newApplicationPort = newReleaseTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-port\"];\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Input Data could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Dummy Parameters\r",
																	"****************************************************************************************/\r",
																	"var USER_NAME;\r",
																	"var ORIGINATOR;\r",
																	"var X_CORRELATOR;\r",
																	"var TRACE_INDICATOR;\r",
																	"var CUSTOMER_JOURNEY;\r",
																	"try {\r",
																	"    USER_NAME = APPLICATION.userName;\r",
																	"    ORIGINATOR = \"Postman\";\r",
																	"    X_CORRELATOR = CreateXCorrelator();\r",
																	"    TRACE_INDICATOR = \"1\";\r",
																	"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																	"    \r",
																	"} catch (error) {\r",
																	"    console.log(\"! Could not define dummy values for parameters. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Request Body\r",
																	"****************************************************************************************/\r",
																	"var REQUEST_BODY;\r",
																	"try {\r",
																	"    REQUEST_BODY = '{'\r",
																	"        + '\"new-application-name\" : ' + '\"' + newApplicationName + '\",'\r",
																	"        + '\"new-application-release\" : ' + '\"' + newApplicationRelease + '\",'\r",
																	"        + '\"new-application-protocol\" : ' + '\"' + newApplicationProtocol + '\",'\r",
																	"        + '\"new-application-address\" : ' + JSON.stringify(dummyApplicationAddress) + ','\r",
																	"        + '\"new-application-port\" : ' +  newApplicationPort\r",
																	"    +'}';\r",
																	"} catch (error) {\r",
																	"    console.log(\"!Could not define request body. \");\r",
																	"}\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.collectionVariables.set(\"dummyApplicationAddress\", dummyApplicationAddress);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Collection variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/v1/bequeath-your-data-and-die\";\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																	"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																	"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																	"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																	"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"function CreateXCorrelator() {\r",
																	"    let xCorrelator;\r",
																	"    xCorrelator = \"\";\r",
																	"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(12);\r",
																	"    return xCorrelator;\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomHexString(length) {\r",
																	"    var randomRandomHexString = \"\";\r",
																	"    while (randomRandomHexString.length < length) {\r",
																	"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																	"    }\r",
																	"    return randomRandomHexString.substring(0,length);\r",
																	"}\r",
																	"\r",
																	"function RandomIpAddress() {\r",
																	"    let randomAddress\r",
																	"    let addressParts = [];\r",
																	"    for ( let i=0; i<4; i++ ) {\r",
																	"        addressParts[i] = String(Math.floor(Math.random() * 256));\r",
																	"    }\r",
																	"    randomAddress = addressParts[0] + \".\" + addressParts[1] + \".\" + addressParts[2] + \".\" + addressParts[3];\r",
																	"    return randomAddress;\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var RESPONSE_CODE;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"\r",
																	"    RESPONSE_CODE = parseInt(response.code);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Response Code could not be extracted.\");\r",
																	"}    \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Testing\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.test(\"POST /v1/bequeath-your-data-and-die responds 204\", function () {\r",
																	"        pm.expect(RESPONSE_CODE).to.equal(204);\r",
																	"    });\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Testing could not be executed.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "204",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Expected /core-model-1-4:control-construct",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Environment variables could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/core-model-1-4:control-construct\";\r",
																	"\r",
																	"    let REQUEST_BODY;\r",
																	"    REQUEST_BODY = \"\";\r",
																	"\r",
																	"    let AUTHORIZATION;\r",
																	"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var expectedRemoteAddress;\r",
																	"var initialNewReleaseTcpClientLtp;\r",
																	"try {\r",
																	"    expectedRemoteAddress = pm.collectionVariables.get(\"dummyApplicationAddress\");\r",
																	"    initialNewReleaseTcpClientLtp = pm.collectionVariables.get(\"newReleaseTcpClientLtp\");\r",
																	"   \r",
																	"} catch(error) {\r",
																	"    console.log(\"! Could not load input data. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var ltpList;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"    \r",
																	"    let responseCode;\r",
																	"    responseCode = parseInt(response.code);\r",
																	"    \r",
																	"    if ( Math.floor(responseCode/100) === 2 ) {\r",
																	"        let responseObject;\r",
																	"        responseObject = JSON.parse(response.stream);\r",
																	"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																	"\r",
																	"    } else {\r",
																	"        ltpList = [];\r",
																	"    }\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! ltpList could not be extracted.\");\r",
																	"}\r",
																	"\r",
																	"var actualRemoteAddress;\r",
																	"try {\r",
																	"    let newReleaseTcpClientUuid;\r",
																	"    newReleaseTcpClientUuid = initialNewReleaseTcpClientLtp[\"uuid\"];\r",
																	"\r",
																	"    let actualTcpClientLtp;\r",
																	"    actualTcpClientLtp = FindActualInstanceByUuid(newReleaseTcpClientUuid, ltpList);\r",
																	"\r",
																	"    actualRemoteAddress = actualTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-address\"];\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Reference objects could not be extracted.\");\r",
																	"} \r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Testing\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.test(\"Provides expected new-application-address: \" + JSON.stringify(expectedRemoteAddress), function () {\r",
																	"        pm.expect(JSON.stringify(actualRemoteAddress)).to.equal(JSON.stringify(expectedRemoteAddress));\r",
																	"    });\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Testing could not be executed.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"function FindActualInstanceByUuid(expectedUuid, actualLtpList) {\r",
																	"    let actualInstance;\r",
																	"    actualInstance = {};\r",
																	"    try {\r",
																	"        for ( let i=0; i<actualLtpList.length; i++ ) {\r",
																	"            let sampleUuid;\r",
																	"            sampleUuid = actualLtpList[i][\"uuid\"];\r",
																	"            if( sampleUuid == expectedUuid ) {\r",
																	"                actualInstance = actualLtpList[i];\r",
																	"                return actualInstance;\r",
																	"            }\r",
																	"        }\r",
																	"\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
																	"    }\r",
																	"    return undefined;\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "GET",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "200",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "initial newRelease/remote-address",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"var newReleaseTcpClientUuid;\r",
																	"var initialRemoteAddress;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"    \r",
																	"    let newReleaseTcpClientLtp;\r",
																	"    newReleaseTcpClientLtp = pm.collectionVariables.get(\"newReleaseTcpClientLtp\");\r",
																	"\r",
																	"    newReleaseTcpClientUuid = newReleaseTcpClientLtp[\"uuid\"];\r",
																	"\r",
																	"    initialRemoteAddress = newReleaseTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-address\"];\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Variables could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl \r",
																	"            + \"/core-model-1-4:control-construct/logical-termination-point=\" \r",
																	"            + newReleaseTcpClientUuid\r",
																	"            + \"/layer-protocol=0/tcp-client-interface-1-0:tcp-client-interface-pac/tcp-client-interface-configuration/remote-address\";\r",
																	"\r",
																	"    let REQUEST_BODY;\r",
																	"    REQUEST_BODY = '{ '\r",
																	"                    +   '\"tcp-client-interface-1-0:remote-address\": ' + JSON.stringify(initialRemoteAddress)\r",
																	"                    + ' }';\r",
																	"\r",
																	"    let AUTHORIZATION;\r",
																	"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error)\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "204",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Check /core-model-1-4:control-construct",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"var AUTHORIZATION;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																	"\r",
																	"    oamPath = \"/core-model-1-4:control-construct\";\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Environment variables could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Request Body\r",
																	"****************************************************************************************/\r",
																	"var REQUEST_BODY;\r",
																	"try {\r",
																	"    REQUEST_BODY = \"\";\r",
																	"} catch (error) {\r",
																	"    console.log(\"!Could not define request body. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + oamPath;\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var expectedLogicalTerminationPoint;\r",
																	"var expectedForwardingConstruct;\r",
																	"try {\r",
																	"    expectedLogicalTerminationPoint = pm.collectionVariables.get(\"ltpList\");\r",
																	"    expectedForwardingConstruct = pm.collectionVariables.get(\"fcList\");\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Collection variables could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var RESPONSE_CODE;\r",
																	"var RESPONSE;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"\r",
																	"    RESPONSE_CODE = parseInt(response.code);\r",
																	"\r",
																	"    if (Math.floor(RESPONSE_CODE / 100) === 2) {\r",
																	"        RESPONSE = JSON.parse(response.stream);\r",
																	"    } else {\r",
																	"        RESPONSE = [];\r",
																	"    }\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Result value lists could not be extracted.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Testing\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.test(\"GET /core-model-1-4:control-construct responds 200\", function () {\r",
																	"        pm.expect(RESPONSE_CODE).to.equal(200);\r",
																	"    });\r",
																	"\r",
																	"    let actualLtpList;\r",
																	"    actualLtpList = RESPONSE[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																	"\r",
																	"    pm.test(\"Received logical-termination-point is same as intial instance \", function () {\r",
																	"        pm.expect(actualLtpList).to.deep.equal(expectedLogicalTerminationPoint);\r",
																	"    });\r",
																	"\r",
																	"    let actualFcList;\r",
																	"    actualFcList = RESPONSE[\"core-model-1-4:control-construct\"][\"forwarding-domain\"][0][\"forwarding-construct\"];\r",
																	"\r",
																	"    pm.test(\"Received forwarding-construct is same as intial instance \", function () {\r",
																	"        pm.expect(actualFcList).to.deep.equal(expectedForwardingConstruct);\r",
																	"    });\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Testing could not be executed.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "200",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "domain-name updated?",
											"item": [
												{
													"name": "reference /core-model-1-4:control-construct",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"console.log(\"\\n-----/v1/bequeath-your-data-and-die acceptance -- new-application-address/domain-name attribute updated? -------------------------------\");\r",
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Environment variables could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/core-model-1-4:control-construct\";\r",
																	"\r",
																	"    let REQUEST_BODY;\r",
																	"    REQUEST_BODY = \"\";\r",
																	"\r",
																	"    let AUTHORIZATION;\r",
																	"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var ltpList;\r",
																	"var fcList;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"    \r",
																	"    let responseCode;\r",
																	"    responseCode = parseInt(response.code);\r",
																	"    \r",
																	"    if ( Math.floor(responseCode/100) === 2 ) {\r",
																	"        let responseObject;\r",
																	"        responseObject = JSON.parse(response.stream);\r",
																	"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																	"        fcList = responseObject[\"core-model-1-4:control-construct\"][\"forwarding-domain\"][0][\"forwarding-construct\"];\r",
																	"\r",
																	"    } else {\r",
																	"        ltpList = [];\r",
																	"        fcList = [];\r",
																	"    }\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! ltpList could not be extracted.\");\r",
																	"}\r",
																	"\r",
																	"var currentOperationServer;\r",
																	"var newReleaseHttpClientLtp;\r",
																	"var newReleaseTcpClientLtp;\r",
																	"try {\r",
																	"    currentOperationServer = FindOperationServer(\"/v1/bequeath-your-data-and-die\", ltpList);\r",
																	"\r",
																	"    //Bequeath Transfer Of List Of Applications\r",
																	"    let bequeathingDataCausesTransferOfListOfApplicationsOperationClientLtp = FindOperationClientUsingCallback(\"PromptForBequeathingDataCausesTransferOfListOfApplications\", fcList, ltpList)\r",
																	"\r",
																	"    newReleaseHttpClientLtp = FindServingLtp(bequeathingDataCausesTransferOfListOfApplicationsOperationClientLtp, ltpList);\r",
																	"    newReleaseTcpClientLtp = FindServingLtp(newReleaseHttpClientLtp, ltpList); \r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Reference objects could not be extracted.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.collectionVariables.clear();\r",
																	"    \r",
																	"    pm.collectionVariables.set(\"currentOperationServer\", currentOperationServer);\r",
																	"    pm.collectionVariables.set(\"newReleaseHttpClientLtp\", newReleaseHttpClientLtp);\r",
																	"    pm.collectionVariables.set(\"newReleaseTcpClientLtp\", newReleaseTcpClientLtp);\r",
																	"    pm.collectionVariables.set(\"ltpList\", ltpList);\r",
																	"    pm.collectionVariables.set(\"fcList\", fcList);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Collection variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"function FindOperationServer(operationName, ltpList) {\r",
																	"    let operationServer;\r",
																	"    operationServer = \"\";\r",
																	"    try {\r",
																	"        let sampleUuid;\r",
																	"        for(let i=0; i<ltpList.length; i++) {\r",
																	"            sampleUuid = ltpList[i][\"uuid\"];\r",
																	"            if(sampleUuid.includes(\"op-s-\")) {\r",
																	"                let sampleOperationName;\r",
																	"                sampleOperationName = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
																	"                if(sampleOperationName == operationName) {\r",
																	"                    operationServer = ltpList[i];\r",
																	"                    return operationServer;\r",
																	"                }\r",
																	"            }\r",
																	"        }\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Exception in function : FindOperationServer. \");\r",
																	"    }\r",
																	"    return operationServer;\r",
																	"}\r",
																	"\r",
																	"function FindOutputFcPortList(forwardingName, fcList) {\r",
																	"    let outputFcPortList;\r",
																	"    outputFcPortList = [];\r",
																	"    try {\r",
																	"        for( let i=0; i<fcList.length; i++ ) {\r",
																	"            for(let j=0; j<fcList[i][\"name\"].length; j++) {               \r",
																	"                if(fcList[i][\"name\"][j][\"value\"] == forwardingName) {\r",
																	"                    fcPortList = fcList[i][\"fc-port\"];\r",
																	"                    for(let k=0;k<fcPortList.length;k++) {\r",
																	"                        if(fcPortList[k][\"port-direction\"] == \"core-model-1-4:PORT_DIRECTION_TYPE_OUTPUT\") {\r",
																	"                            outputFcPortList.push(fcPortList[k]);\r",
																	"                        }\r",
																	"                    }\r",
																	"                    return outputFcPortList;\r",
																	"                }\r",
																	"            }\r",
																	"        }\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
																	"    }\r",
																	"    return outputFcPortList;\r",
																	"}\r",
																	"\r",
																	"function FindActualInstanceByUuid(expectedUuid, actualLtpList) {\r",
																	"    let actualInstance;\r",
																	"    actualInstance = {};\r",
																	"    try {\r",
																	"        for ( let i=0; i<actualLtpList.length; i++ ) {\r",
																	"            let sampleUuid;\r",
																	"            sampleUuid = actualLtpList[i][\"uuid\"];\r",
																	"            if( sampleUuid == expectedUuid ) {\r",
																	"                actualInstance = actualLtpList[i];\r",
																	"                return actualInstance;\r",
																	"            }\r",
																	"        }\r",
																	"\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
																	"    }\r",
																	"    return undefined;\r",
																	"}\r",
																	"\r",
																	"function FindServingLtp(clientLtp, ltpList) {\r",
																	"    let servingLtp;\r",
																	"    servingLtp = {};\r",
																	"    try{\r",
																	"        let serverLtpUuid;\r",
																	"        serverLtpUuid = clientLtp[\"server-ltp\"][0];\r",
																	"        for( let i=0; i<ltpList.length; i++ ) {\r",
																	"            let sampleUuid;\r",
																	"            sampleUuid = ltpList[i][\"uuid\"];\r",
																	"            if( sampleUuid == serverLtpUuid ) {\r",
																	"                servingLtp = ltpList[i];\r",
																	"                return servingLtp;\r",
																	"            }\r",
																	"        }\r",
																	"    } catch(error) {\r",
																	"        console.log(error);\r",
																	"        console.log(\"! Exception in function : FindServingLtp. \")\r",
																	"    }\r",
																	"    return servingLtp;\r",
																	"}\r",
																	"\r",
																	"function FindOperationClientUsingCallback(callback, fcList, ltpList) {\r",
																	"    let operationClientLtp\r",
																	"    try {\r",
																	"        let outputFcPortList = FindOutputFcPortList(callback, fcList);\r",
																	"        let randomOutputFcPort = outputFcPortList[Math.floor(Math.random() * outputFcPortList.length)];\r",
																	"        let outputLtpUuid = randomOutputFcPort[\"logical-termination-point\"];\r",
																	"        operationClientLtp = FindActualInstanceByUuid(outputLtpUuid, ltpList);\r",
																	"    } catch (error) {\r",
																	"        console.log(error);\r",
																	"        console.log(\"! Exception in function FindOperationClientUsingCallback. \");\r",
																	"    }\r",
																	"    return  operationClientLtp\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "GET",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "200",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Dummy /v1/bequeath-your-data-and-die",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"var OPERATION_KEY;\r",
																	"var newApplicationName;\r",
																	"var newApplicationRelease;\r",
																	"var newApplicationProtocol;\r",
																	"var dummyApplicationAddress;\r",
																	"var newApplicationPort;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"    let currentOperationServer;\r",
																	"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
																	"    \r",
																	"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																	"\r",
																	"    let newReleaseHttpClientLtp;\r",
																	"    newReleaseHttpClientLtp = pm.collectionVariables.get(\"newReleaseHttpClientLtp\");\r",
																	"\r",
																	"    newApplicationName = newReleaseHttpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
																	"\r",
																	"    newApplicationRelease = newReleaseHttpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"release-number\"];\r",
																	"    \r",
																	"    let newReleaseTcpClientLtp;\r",
																	"    newReleaseTcpClientLtp = pm.collectionVariables.get(\"newReleaseTcpClientLtp\");\r",
																	" \r",
																	"    newApplicationProtocol = newReleaseTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
																	"    newApplicationProtocol = newApplicationProtocol.substring(('tcp-client-interface-1-0:PROTOCOL_TYPE_').length);\r",
																	"\r",
																	"    let dummyDomainName = RandomDomainName();\r",
																	"    dummyApplicationAddress = {\r",
																	"        \"domain-name\": dummyDomainName\r",
																	"    };\r",
																	"\r",
																	"    newApplicationPort = newReleaseTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-port\"];\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Input Data could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Dummy Parameters\r",
																	"****************************************************************************************/\r",
																	"var USER_NAME;\r",
																	"var ORIGINATOR;\r",
																	"var X_CORRELATOR;\r",
																	"var TRACE_INDICATOR;\r",
																	"var CUSTOMER_JOURNEY;\r",
																	"try {\r",
																	"    USER_NAME = APPLICATION.userName;\r",
																	"    ORIGINATOR = \"Postman\";\r",
																	"    X_CORRELATOR = CreateXCorrelator();\r",
																	"    TRACE_INDICATOR = \"1\";\r",
																	"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																	"    \r",
																	"} catch (error) {\r",
																	"    console.log(\"! Could not define dummy values for parameters. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Request Body\r",
																	"****************************************************************************************/\r",
																	"var REQUEST_BODY;\r",
																	"try {\r",
																	"    REQUEST_BODY = '{'\r",
																	"        + '\"new-application-name\" : ' + '\"' + newApplicationName + '\",'\r",
																	"        + '\"new-application-release\" : ' + '\"' + newApplicationRelease + '\",'\r",
																	"        + '\"new-application-protocol\" : ' + '\"' + newApplicationProtocol + '\",'\r",
																	"        + '\"new-application-address\" : ' + JSON.stringify(dummyApplicationAddress) + ','\r",
																	"        + '\"new-application-port\" : ' +  newApplicationPort\r",
																	"    +'}';\r",
																	"} catch (error) {\r",
																	"    console.log(\"!Could not define request body. \");\r",
																	"}\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.collectionVariables.set(\"dummyApplicationAddress\", dummyApplicationAddress);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Collection variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/v1/bequeath-your-data-and-die\";\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																	"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																	"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																	"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																	"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"function CreateXCorrelator() {\r",
																	"    let xCorrelator;\r",
																	"    xCorrelator = \"\";\r",
																	"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(12);\r",
																	"    return xCorrelator;\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomHexString(length) {\r",
																	"    var randomRandomHexString = \"\";\r",
																	"    while (randomRandomHexString.length < length) {\r",
																	"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																	"    }\r",
																	"    return randomRandomHexString.substring(0,length);\r",
																	"}\r",
																	"\r",
																	"function RandomDomainName() {\r",
																	"    let randomAddress;\r",
																	"    let dummySubdomain = GenerateRandomString(Math.floor(1 + Math.random() * 10));\r",
																	"    let randomDomainPartLength = Math.floor(2 + Math.random() * 5);\r",
																	"    let dummyDomainName = \"\";\r",
																	"    for(let i=0; i<randomDomainPartLength; i += 2 ) {\r",
																	"        dummyDomainName = dummyDomainName + GenerateRandomString(Math.floor(1 + Math.random() * 4));\r",
																	"        dummyDomainName = dummyDomainName + GenerateRandomSeparator();\r",
																	"        dummyDomainName = dummyDomainName + GenerateRandomString(Math.floor(1 + Math.random() * 4));\r",
																	"    }\r",
																	"    let dummyTopLevelDomain = GenerateRandomString(Math.floor(2 + Math.random() * 5));\r",
																	"    randomAddress = dummySubdomain + \".\" + dummyDomainName + \".\" + dummyTopLevelDomain; \r",
																	"    return randomAddress;\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomString(length) {\r",
																	"    let randomString;\r",
																	"    randomString = \"\";\r",
																	"    try {\r",
																	"        let characters = \"abcdefghijklmnopqrstuvwxyz\";\r",
																	"        let charactersLength = characters.length;\r",
																	"        for (let i = 0; i < length; i++) {\r",
																	"            randomString += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
																	"        }\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Could not generate random string. \");\r",
																	"    }\r",
																	"    return randomString;\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomSeparator() {\r",
																	"    let separators = [\".\", \"-\"];\r",
																	"    let randomSeparator = separators[Math.floor(Math.random() * separators.length)];\r",
																	"    return randomSeparator;\r",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var RESPONSE_CODE;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"\r",
																	"    RESPONSE_CODE = parseInt(response.code);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Response Code could not be extracted.\");\r",
																	"}    \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Testing\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.test(\"POST /v1/bequeath-your-data-and-die responds 204\", function () {\r",
																	"        pm.expect(RESPONSE_CODE).to.equal(204);\r",
																	"    });\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Testing could not be executed.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "204",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Expected /core-model-1-4:control-construct",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Environment variables could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/core-model-1-4:control-construct\";\r",
																	"\r",
																	"    let REQUEST_BODY;\r",
																	"    REQUEST_BODY = \"\";\r",
																	"\r",
																	"    let AUTHORIZATION;\r",
																	"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var expectedRemoteAddress;\r",
																	"var initialNewReleaseTcpClientLtp;\r",
																	"try {\r",
																	"    expectedRemoteAddress = pm.collectionVariables.get(\"dummyApplicationAddress\");\r",
																	"    initialNewReleaseTcpClientLtp = pm.collectionVariables.get(\"newReleaseTcpClientLtp\");\r",
																	"   \r",
																	"} catch(error) {\r",
																	"    console.log(\"! Could not load input data. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var ltpList;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"    \r",
																	"    let responseCode;\r",
																	"    responseCode = parseInt(response.code);\r",
																	"    \r",
																	"    if ( Math.floor(responseCode/100) === 2 ) {\r",
																	"        let responseObject;\r",
																	"        responseObject = JSON.parse(response.stream);\r",
																	"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																	"\r",
																	"    } else {\r",
																	"        ltpList = [];\r",
																	"    }\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! ltpList could not be extracted.\");\r",
																	"}\r",
																	"\r",
																	"var actualRemoteAddress;\r",
																	"try {\r",
																	"    let newReleaseTcpClientUuid;\r",
																	"    newReleaseTcpClientUuid = initialNewReleaseTcpClientLtp[\"uuid\"];\r",
																	"\r",
																	"    let actualTcpClientLtp;\r",
																	"    actualTcpClientLtp = FindActualInstanceByUuid(newReleaseTcpClientUuid, ltpList);\r",
																	"\r",
																	"    actualRemoteAddress = actualTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-address\"];\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Reference objects could not be extracted.\");\r",
																	"} \r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Testing\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.test(\"Provides expected new-application-address: \" + JSON.stringify(expectedRemoteAddress), function () {\r",
																	"        pm.expect(JSON.stringify(actualRemoteAddress)).to.equal(JSON.stringify(expectedRemoteAddress));\r",
																	"    });\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Testing could not be executed.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"function FindActualInstanceByUuid(expectedUuid, actualLtpList) {\r",
																	"    let actualInstance;\r",
																	"    actualInstance = {};\r",
																	"    try {\r",
																	"        for ( let i=0; i<actualLtpList.length; i++ ) {\r",
																	"            let sampleUuid;\r",
																	"            sampleUuid = actualLtpList[i][\"uuid\"];\r",
																	"            if( sampleUuid == expectedUuid ) {\r",
																	"                actualInstance = actualLtpList[i];\r",
																	"                return actualInstance;\r",
																	"            }\r",
																	"        }\r",
																	"\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
																	"    }\r",
																	"    return undefined;\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "GET",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "200",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "initial newRelease/remote-address",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"var newReleaseTcpClientUuid;\r",
																	"var initialRemoteAddress;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"    \r",
																	"    let newReleaseTcpClientLtp;\r",
																	"    newReleaseTcpClientLtp = pm.collectionVariables.get(\"newReleaseTcpClientLtp\");\r",
																	"\r",
																	"    newReleaseTcpClientUuid = newReleaseTcpClientLtp[\"uuid\"];\r",
																	"\r",
																	"    initialRemoteAddress = newReleaseTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-address\"];\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Variables could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl \r",
																	"            + \"/core-model-1-4:control-construct/logical-termination-point=\" \r",
																	"            + newReleaseTcpClientUuid\r",
																	"            + \"/layer-protocol=0/tcp-client-interface-1-0:tcp-client-interface-pac/tcp-client-interface-configuration/remote-address\";\r",
																	"\r",
																	"    let REQUEST_BODY;\r",
																	"    REQUEST_BODY = '{ '\r",
																	"                    +   '\"tcp-client-interface-1-0:remote-address\": ' + JSON.stringify(initialRemoteAddress)\r",
																	"                    + ' }';\r",
																	"\r",
																	"    let AUTHORIZATION;\r",
																	"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error)\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "204",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Check /core-model-1-4:control-construct",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"var AUTHORIZATION;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																	"\r",
																	"    oamPath = \"/core-model-1-4:control-construct\";\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Environment variables could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Request Body\r",
																	"****************************************************************************************/\r",
																	"var REQUEST_BODY;\r",
																	"try {\r",
																	"    REQUEST_BODY = \"\";\r",
																	"} catch (error) {\r",
																	"    console.log(\"!Could not define request body. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + oamPath;\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var expectedLogicalTerminationPoint;\r",
																	"var expectedForwardingConstruct;\r",
																	"try {\r",
																	"    expectedLogicalTerminationPoint = pm.collectionVariables.get(\"ltpList\");\r",
																	"    expectedForwardingConstruct = pm.collectionVariables.get(\"fcList\");\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Collection variables could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var RESPONSE_CODE;\r",
																	"var RESPONSE;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"\r",
																	"    RESPONSE_CODE = parseInt(response.code);\r",
																	"\r",
																	"    if (Math.floor(RESPONSE_CODE / 100) === 2) {\r",
																	"        RESPONSE = JSON.parse(response.stream);\r",
																	"    } else {\r",
																	"        RESPONSE = [];\r",
																	"    }\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Result value lists could not be extracted.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Testing\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.test(\"GET /core-model-1-4:control-construct responds 200\", function () {\r",
																	"        pm.expect(RESPONSE_CODE).to.equal(200);\r",
																	"    });\r",
																	"\r",
																	"    let actualLtpList;\r",
																	"    actualLtpList = RESPONSE[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																	"\r",
																	"    pm.test(\"Received logical-termination-point is same as intial instance \", function () {\r",
																	"        pm.expect(actualLtpList).to.deep.equal(expectedLogicalTerminationPoint);\r",
																	"    });\r",
																	"\r",
																	"    let actualFcList;\r",
																	"    actualFcList = RESPONSE[\"core-model-1-4:control-construct\"][\"forwarding-domain\"][0][\"forwarding-construct\"];\r",
																	"\r",
																	"    pm.test(\"Received forwarding-construct is same as intial instance \", function () {\r",
																	"        pm.expect(actualFcList).to.deep.equal(expectedForwardingConstruct);\r",
																	"    });\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Testing could not be executed.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "200",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												}
											]
										}
									],
									"description": "## Get new-application-address updated?\n#### Preparation:\n- GETing CC (/core-model-1-4:control-construct)\n  - searching CC for op-s of /v1/bequeath-your-data-and-die, storing operation-key\n  - searcing CC for output port of PromptForBequeathingDataCausesTransferOfListOfApplications, find corresponding op-c, http-c and tcp-c, store them.\n- POST /v1/bequeath-your-data-and-die with\n  - new-application-name and new-application-release attribute according to chosen http-c\n  - new-application-address with random generated dummy values (assure sufficiently high probability that set does not exist!)\n  - new-application-protocol and new-application-port according to chosen tcp-c.\n  - operation-key from above\n  - reasonable parameters\n\n#### Testing:\n- checking for ResponseCode==204\n- GETing CC (/core-model-1-4:control-construct)\n- searching CC for tcp-c of NewRelease and check if the remote-address is updated with dummyValue.\n\n#### Clearing:\n- PUT NewRelease/remote-address with original value\n\n#### Clearance check:\n- Check if the logical-termination-point instance is the same as initial configuration\n- Check if the forwarding-construct instance is the same as initial configuration"
								},
								{
									"name": "new-application-port updated?",
									"item": [
										{
											"name": "reference /core-model-1-4:control-construct",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n-----/v1/bequeath-your-data-and-die acceptance -- new-application-port attribute updated? -------------------------------\");\r",
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"var APPLICATION;\r",
															"try {\r",
															"    APPLICATION = pm.environment.get(\"application\");\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Environment variables could not be loaded.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Setting Local Variables and Preparing the Request\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    let URI;\r",
															"    URI = APPLICATION.serverUrl + \"/core-model-1-4:control-construct\";\r",
															"\r",
															"    let REQUEST_BODY;\r",
															"    REQUEST_BODY = \"\";\r",
															"\r",
															"    let AUTHORIZATION;\r",
															"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
															"\r",
															"    let ACCEPT;\r",
															"    ACCEPT = \"application/json\";\r",
															"\r",
															"    let CONTENT_TYPE;\r",
															"    CONTENT_TYPE = \"application/json\";\r",
															"\r",
															"\r",
															"    pm.variables.clear();\r",
															"\r",
															"    pm.variables.set(\"uri\", URI);\r",
															"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
															"\r",
															"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
															"\r",
															"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
															"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Local variables could not be set.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Extracting Result\r",
															"****************************************************************************************/\r",
															"var ltpList;\r",
															"var fcList;\r",
															"try {\r",
															"    let response;\r",
															"    response = pm.response;\r",
															"    \r",
															"    let responseCode;\r",
															"    responseCode = parseInt(response.code);\r",
															"    \r",
															"    if ( Math.floor(responseCode/100) === 2 ) {\r",
															"        let responseObject;\r",
															"        responseObject = JSON.parse(response.stream);\r",
															"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
															"        fcList = responseObject[\"core-model-1-4:control-construct\"][\"forwarding-domain\"][0][\"forwarding-construct\"];\r",
															"\r",
															"    } else {\r",
															"        ltpList = [];\r",
															"        fcList = [];\r",
															"    }\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! ltpList could not be extracted.\");\r",
															"}\r",
															"\r",
															"var currentOperationServer;\r",
															"var newReleaseHttpClientLtp;\r",
															"var newReleaseTcpClientLtp;\r",
															"try {\r",
															"    currentOperationServer = FindOperationServer(\"/v1/bequeath-your-data-and-die\", ltpList);\r",
															"\r",
															"    //Bequeath Transfer Of List Of Applications\r",
															"    let bequeathingDataCausesTransferOfListOfApplicationsOperationClientLtp = FindOperationClientUsingCallback(\"PromptForBequeathingDataCausesTransferOfListOfApplications\", fcList, ltpList)\r",
															"\r",
															"    newReleaseHttpClientLtp = FindServingLtp(bequeathingDataCausesTransferOfListOfApplicationsOperationClientLtp, ltpList);\r",
															"    newReleaseTcpClientLtp = FindServingLtp(newReleaseHttpClientLtp, ltpList); \r",
															"} catch (error) {\r",
															"    console.log(error);\r",
															"    console.log(\"! Reference objects could not be extracted.\");\r",
															"}\r",
															"\r",
															"/****************************************************************************************\r",
															"* Setting Collection Variables\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    pm.collectionVariables.clear();\r",
															"    \r",
															"    pm.collectionVariables.set(\"currentOperationServer\", currentOperationServer);\r",
															"    pm.collectionVariables.set(\"newReleaseHttpClientLtp\", newReleaseHttpClientLtp);\r",
															"    pm.collectionVariables.set(\"newReleaseTcpClientLtp\", newReleaseTcpClientLtp);\r",
															"    pm.collectionVariables.set(\"ltpList\", ltpList);\r",
															"    pm.collectionVariables.set(\"fcList\", fcList);\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Collection variables could not be set.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/\r",
															"\r",
															"function FindOperationServer(operationName, ltpList) {\r",
															"    let operationServer;\r",
															"    operationServer = \"\";\r",
															"    try {\r",
															"        let sampleUuid;\r",
															"        for(let i=0; i<ltpList.length; i++) {\r",
															"            sampleUuid = ltpList[i][\"uuid\"];\r",
															"            if(sampleUuid.includes(\"op-s-\")) {\r",
															"                let sampleOperationName;\r",
															"                sampleOperationName = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
															"                if(sampleOperationName == operationName) {\r",
															"                    operationServer = ltpList[i];\r",
															"                    return operationServer;\r",
															"                }\r",
															"            }\r",
															"        }\r",
															"    } catch (error) {\r",
															"        console.log(\"! Exception in function : FindOperationServer. \");\r",
															"    }\r",
															"    return operationServer;\r",
															"}\r",
															"\r",
															"function FindOutputFcPortList(forwardingName, fcList) {\r",
															"    let outputFcPortList;\r",
															"    outputFcPortList = [];\r",
															"    try {\r",
															"        for( let i=0; i<fcList.length; i++ ) {\r",
															"            for(let j=0; j<fcList[i][\"name\"].length; j++) {               \r",
															"                if(fcList[i][\"name\"][j][\"value\"] == forwardingName) {\r",
															"                    fcPortList = fcList[i][\"fc-port\"];\r",
															"                    for(let k=0;k<fcPortList.length;k++) {\r",
															"                        if(fcPortList[k][\"port-direction\"] == \"core-model-1-4:PORT_DIRECTION_TYPE_OUTPUT\") {\r",
															"                            outputFcPortList.push(fcPortList[k]);\r",
															"                        }\r",
															"                    }\r",
															"                    return outputFcPortList;\r",
															"                }\r",
															"            }\r",
															"        }\r",
															"    } catch (error) {\r",
															"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
															"    }\r",
															"    return outputFcPortList;\r",
															"}\r",
															"\r",
															"function FindActualInstanceByUuid(expectedUuid, actualLtpList) {\r",
															"    let actualInstance;\r",
															"    actualInstance = {};\r",
															"    try {\r",
															"        for ( let i=0; i<actualLtpList.length; i++ ) {\r",
															"            let sampleUuid;\r",
															"            sampleUuid = actualLtpList[i][\"uuid\"];\r",
															"            if( sampleUuid == expectedUuid ) {\r",
															"                actualInstance = actualLtpList[i];\r",
															"                return actualInstance;\r",
															"            }\r",
															"        }\r",
															"\r",
															"    } catch (error) {\r",
															"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
															"    }\r",
															"    return undefined;\r",
															"}\r",
															"\r",
															"function FindServingLtp(clientLtp, ltpList) {\r",
															"    let servingLtp;\r",
															"    servingLtp = {};\r",
															"    try{\r",
															"        let serverLtpUuid;\r",
															"        serverLtpUuid = clientLtp[\"server-ltp\"][0];\r",
															"        for( let i=0; i<ltpList.length; i++ ) {\r",
															"            let sampleUuid;\r",
															"            sampleUuid = ltpList[i][\"uuid\"];\r",
															"            if( sampleUuid == serverLtpUuid ) {\r",
															"                servingLtp = ltpList[i];\r",
															"                return servingLtp;\r",
															"            }\r",
															"        }\r",
															"    } catch(error) {\r",
															"        console.log(error);\r",
															"        console.log(\"! Exception in function : FindServingLtp. \")\r",
															"    }\r",
															"    return servingLtp;\r",
															"}\r",
															"\r",
															"function FindOperationClientUsingCallback(callback, fcList, ltpList) {\r",
															"    let operationClientLtp\r",
															"    try {\r",
															"        let outputFcPortList = FindOutputFcPortList(callback, fcList);\r",
															"        let randomOutputFcPort = outputFcPortList[Math.floor(Math.random() * outputFcPortList.length)];\r",
															"        let outputLtpUuid = randomOutputFcPort[\"logical-termination-point\"];\r",
															"        operationClientLtp = FindActualInstanceByUuid(outputLtpUuid, ltpList);\r",
															"    } catch (error) {\r",
															"        console.log(error);\r",
															"        console.log(\"! Exception in function FindOperationClientUsingCallback. \");\r",
															"    }\r",
															"    return  operationClientLtp\r",
															"}\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "x-mock-response-code",
														"value": "200",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Dummy /v1/bequeath-your-data-and-die",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"var APPLICATION;\r",
															"var OPERATION_KEY;\r",
															"var newApplicationName;\r",
															"var newApplicationRelease;\r",
															"var newApplicationProtocol;\r",
															"var newApplicationAddress;\r",
															"var dummyApplicationPort;\r",
															"try {\r",
															"    APPLICATION = pm.environment.get(\"application\");\r",
															"\r",
															"    let currentOperationServer;\r",
															"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
															"    \r",
															"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
															"\r",
															"    let newReleaseHttpClientLtp;\r",
															"    newReleaseHttpClientLtp = pm.collectionVariables.get(\"newReleaseHttpClientLtp\");\r",
															"\r",
															"    newApplicationName = newReleaseHttpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
															"\r",
															"    newApplicationRelease = newReleaseHttpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"release-number\"];\r",
															"\r",
															"    let newReleaseTcpClientLtp;\r",
															"    newReleaseTcpClientLtp = pm.collectionVariables.get(\"newReleaseTcpClientLtp\");\r",
															"\r",
															"    newApplicationProtocol = newReleaseTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
															"    newApplicationProtocol = newApplicationProtocol.substring(('tcp-client-interface-1-0:PROTOCOL_TYPE_').length);\r",
															"    \r",
															"    newApplicationAddress = newReleaseTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-address\"];\r",
															"    \r",
															"    dummyApplicationPort = RandomTcpPort();\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(error);\r",
															"    console.log(\"! Input Data could not be loaded.\");\r",
															"}\r",
															"\r",
															"/****************************************************************************************\r",
															"* Defining Dummy Parameters\r",
															"****************************************************************************************/\r",
															"var USER_NAME;\r",
															"var ORIGINATOR;\r",
															"var X_CORRELATOR;\r",
															"var TRACE_INDICATOR;\r",
															"var CUSTOMER_JOURNEY;\r",
															"try {\r",
															"    USER_NAME = APPLICATION.userName;\r",
															"    ORIGINATOR = \"Postman\";\r",
															"    X_CORRELATOR = CreateXCorrelator();\r",
															"    TRACE_INDICATOR = \"1\";\r",
															"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
															"    \r",
															"} catch (error) {\r",
															"    console.log(\"! Could not define dummy values for parameters. \");\r",
															"}\r",
															"\r",
															"/****************************************************************************************\r",
															"* Defining Request Body\r",
															"****************************************************************************************/\r",
															"var REQUEST_BODY;\r",
															"try {\r",
															"    REQUEST_BODY = '{'\r",
															"        + '\"new-application-name\" : ' + '\"' + newApplicationName + '\",'\r",
															"        + '\"new-application-release\" : ' + '\"' + newApplicationRelease + '\",'\r",
															"        + '\"new-application-protocol\" : ' + '\"' + newApplicationProtocol + '\",'\r",
															"        + '\"new-application-address\" : ' + JSON.stringify(newApplicationAddress) + ','\r",
															"        + '\"new-application-port\" : ' +  dummyApplicationPort\r",
															"    +'}';\r",
															"} catch (error) {\r",
															"    console.log(\"!Could not define request body. \");\r",
															"}\r",
															"/****************************************************************************************\r",
															"* Setting Collection Variables\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    pm.collectionVariables.set(\"dummyApplicationPort\", dummyApplicationPort);\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Collection variables could not be set.\");\r",
															"}\r",
															"\r",
															"/****************************************************************************************\r",
															"* Setting Local Variables and Preparing the Request\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    let URI;\r",
															"    URI = APPLICATION.serverUrl + \"/v1/bequeath-your-data-and-die\";\r",
															"\r",
															"    let ACCEPT;\r",
															"    ACCEPT = \"application/json\";\r",
															"\r",
															"    let CONTENT_TYPE;\r",
															"    CONTENT_TYPE = \"application/json\";\r",
															"\r",
															"    pm.variables.clear();\r",
															"\r",
															"    pm.variables.set(\"uri\", URI);\r",
															"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
															"\r",
															"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
															"\r",
															"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
															"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
															"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
															"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
															"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
															"\r",
															"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
															"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(error);\r",
															"    console.log(\"! Local variables could not be set.\");\r",
															"}\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/\r",
															"\r",
															"function CreateXCorrelator() {\r",
															"    let xCorrelator;\r",
															"    xCorrelator = \"\";\r",
															"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
															"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
															"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
															"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
															"    xCorrelator += GenerateRandomHexString(12);\r",
															"    return xCorrelator;\r",
															"}\r",
															"\r",
															"function GenerateRandomHexString(length) {\r",
															"    var randomRandomHexString = \"\";\r",
															"    while (randomRandomHexString.length < length) {\r",
															"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
															"    }\r",
															"    return randomRandomHexString.substring(0,length);\r",
															"}\r",
															"\r",
															"function RandomIpAddress() {\r",
															"    let randomAddress\r",
															"    let addressParts = [];\r",
															"    for ( let i=0; i<4; i++ ) {\r",
															"        addressParts[i] = String(Math.floor(Math.random() * 256));\r",
															"    }\r",
															"    randomAddress = addressParts[0] + \".\" + addressParts[1] + \".\" + addressParts[2] + \".\" + addressParts[3];\r",
															"    return randomAddress;\r",
															"}\r",
															"\r",
															"function RandomTcpPort() {\r",
															"    let randomPort;\r",
															"    randomPort = 2000 + Math.floor( Math.random() * 1000 );\r",
															"    return randomPort;\r",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Extracting Result\r",
															"****************************************************************************************/\r",
															"var RESPONSE_CODE;\r",
															"try {\r",
															"    let response;\r",
															"    response = pm.response;\r",
															"\r",
															"    RESPONSE_CODE = parseInt(response.code);\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Response Code could not be extracted.\");\r",
															"}    \r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Testing\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    pm.test(\"POST /v1/bequeath-your-data-and-die responds 204\", function () {\r",
															"        pm.expect(RESPONSE_CODE).to.equal(204);\r",
															"    });\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Testing could not be executed.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-mock-response-code",
														"value": "204",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Expected /core-model-1-4:control-construct",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"var APPLICATION;\r",
															"try {\r",
															"    APPLICATION = pm.environment.get(\"application\");\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Environment variables could not be loaded.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Setting Local Variables and Preparing the Request\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    let URI;\r",
															"    URI = APPLICATION.serverUrl + \"/core-model-1-4:control-construct\";\r",
															"\r",
															"    let REQUEST_BODY;\r",
															"    REQUEST_BODY = \"\";\r",
															"\r",
															"    let AUTHORIZATION;\r",
															"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
															"\r",
															"    let ACCEPT;\r",
															"    ACCEPT = \"application/json\";\r",
															"\r",
															"    let CONTENT_TYPE;\r",
															"    CONTENT_TYPE = \"application/json\";\r",
															"\r",
															"\r",
															"    pm.variables.clear();\r",
															"\r",
															"    pm.variables.set(\"uri\", URI);\r",
															"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
															"\r",
															"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
															"\r",
															"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
															"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Local variables could not be set.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"var expectedRemotePort;\r",
															"var initialNewReleaseTcpClientLtp;\r",
															"try {\r",
															"    expectedRemotePort = pm.collectionVariables.get(\"dummyApplicationPort\");\r",
															"    initialNewReleaseTcpClientLtp = pm.collectionVariables.get(\"newReleaseTcpClientLtp\");\r",
															"   \r",
															"} catch(error) {\r",
															"    console.log(\"! Could not load input data. \");\r",
															"}\r",
															"\r",
															"/****************************************************************************************\r",
															"* Extracting Result\r",
															"****************************************************************************************/\r",
															"var ltpList;\r",
															"try {\r",
															"    let response;\r",
															"    response = pm.response;\r",
															"    \r",
															"    let responseCode;\r",
															"    responseCode = parseInt(response.code);\r",
															"    \r",
															"    if ( Math.floor(responseCode/100) === 2 ) {\r",
															"        let responseObject;\r",
															"        responseObject = JSON.parse(response.stream);\r",
															"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
															"\r",
															"    } else {\r",
															"        ltpList = [];\r",
															"    }\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! ltpList could not be extracted.\");\r",
															"}\r",
															"\r",
															"var actualRemotePort;\r",
															"try {\r",
															"    let newReleaseTcpClientUuid;\r",
															"    newReleaseTcpClientUuid = initialNewReleaseTcpClientLtp[\"uuid\"];\r",
															"\r",
															"    let actualTcpClientLtp;\r",
															"    actualTcpClientLtp = FindActualInstanceByUuid(newReleaseTcpClientUuid, ltpList);\r",
															"\r",
															"    actualRemotePort = actualTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-port\"];\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(error);\r",
															"    console.log(\"! Reference objects could not be extracted.\");\r",
															"} \r",
															"\r",
															"/****************************************************************************************\r",
															"* Testing\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    pm.test(\"Provides expected new-application-port: \" + expectedRemotePort, function () {\r",
															"        pm.expect(actualRemotePort).to.equal(expectedRemotePort);\r",
															"    });\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Testing could not be executed.\");\r",
															"}\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/\r",
															"function FindActualInstanceByUuid(expectedUuid, actualLtpList) {\r",
															"    let actualInstance;\r",
															"    actualInstance = {};\r",
															"    try {\r",
															"        for ( let i=0; i<actualLtpList.length; i++ ) {\r",
															"            let sampleUuid;\r",
															"            sampleUuid = actualLtpList[i][\"uuid\"];\r",
															"            if( sampleUuid == expectedUuid ) {\r",
															"                actualInstance = actualLtpList[i];\r",
															"                return actualInstance;\r",
															"            }\r",
															"        }\r",
															"\r",
															"    } catch (error) {\r",
															"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
															"    }\r",
															"    return undefined;\r",
															"}\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "x-mock-response-code",
														"value": "200",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "initial newRelease/remote-port",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"var APPLICATION;\r",
															"var newReleaseTcpClientUuid;\r",
															"var initialReleaseRemotePort;\r",
															"try {\r",
															"    APPLICATION = pm.environment.get(\"application\");\r",
															"    \r",
															"    let newReleaseTcpClientLtp;\r",
															"    newReleaseTcpClientLtp = pm.collectionVariables.get(\"newReleaseTcpClientLtp\");\r",
															"\r",
															"    newReleaseTcpClientUuid = newReleaseTcpClientLtp[\"uuid\"];\r",
															"\r",
															"    initialReleaseRemotePort = newReleaseTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-port\"];\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Variables could not be loaded.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Setting Local Variables and Preparing the Request\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    let URI;\r",
															"    URI = APPLICATION.serverUrl \r",
															"            + \"/core-model-1-4:control-construct/logical-termination-point=\" \r",
															"            + newReleaseTcpClientUuid\r",
															"            + \"/layer-protocol=0/tcp-client-interface-1-0:tcp-client-interface-pac/tcp-client-interface-configuration/remote-port\";\r",
															"\r",
															"    let REQUEST_BODY;\r",
															"    REQUEST_BODY = '{ '\r",
															"                    +   '\"tcp-client-interface-1-0:remote-port\": ' + initialReleaseRemotePort\r",
															"                    + ' }';\r",
															"\r",
															"    let AUTHORIZATION;\r",
															"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
															"\r",
															"    let ACCEPT;\r",
															"    ACCEPT = \"application/json\";\r",
															"\r",
															"    let CONTENT_TYPE;\r",
															"    CONTENT_TYPE = \"application/json\";\r",
															"\r",
															"\r",
															"    pm.variables.clear();\r",
															"\r",
															"    pm.variables.set(\"uri\", URI);\r",
															"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
															"\r",
															"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
															"\r",
															"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
															"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(error)\r",
															"    console.log(\"! Local variables could not be set.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-mock-response-code",
														"value": "204",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Check /core-model-1-4:control-construct",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"var APPLICATION;\r",
															"var AUTHORIZATION;\r",
															"try {\r",
															"    APPLICATION = pm.environment.get(\"application\");\r",
															"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
															"\r",
															"    oamPath = \"/core-model-1-4:control-construct\";\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Environment variables could not be loaded.\");\r",
															"}\r",
															"\r",
															"/****************************************************************************************\r",
															"* Defining Request Body\r",
															"****************************************************************************************/\r",
															"var REQUEST_BODY;\r",
															"try {\r",
															"    REQUEST_BODY = \"\";\r",
															"} catch (error) {\r",
															"    console.log(\"!Could not define request body. \");\r",
															"}\r",
															"\r",
															"/****************************************************************************************\r",
															"* Setting Local Variables and Preparing the Request\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    let URI;\r",
															"    URI = APPLICATION.serverUrl + oamPath;\r",
															"\r",
															"    let ACCEPT;\r",
															"    ACCEPT = \"application/json\";\r",
															"\r",
															"    let CONTENT_TYPE;\r",
															"    CONTENT_TYPE = \"application/json\";\r",
															"\r",
															"    pm.variables.clear();\r",
															"\r",
															"    pm.variables.set(\"uri\", URI);\r",
															"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
															"\r",
															"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
															"\r",
															"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
															"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Local variables could not be set.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"var expectedLogicalTerminationPoint;\r",
															"var expectedForwardingConstruct;\r",
															"try {\r",
															"    expectedLogicalTerminationPoint = pm.collectionVariables.get(\"ltpList\");\r",
															"    expectedForwardingConstruct = pm.collectionVariables.get(\"fcList\");\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Collection variables could not be loaded.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Extracting Result\r",
															"****************************************************************************************/\r",
															"var RESPONSE_CODE;\r",
															"var RESPONSE;\r",
															"try {\r",
															"    let response;\r",
															"    response = pm.response;\r",
															"\r",
															"    RESPONSE_CODE = parseInt(response.code);\r",
															"\r",
															"    if (Math.floor(RESPONSE_CODE / 100) === 2) {\r",
															"        RESPONSE = JSON.parse(response.stream);\r",
															"    } else {\r",
															"        RESPONSE = [];\r",
															"    }\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Result value lists could not be extracted.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Testing\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    pm.test(\"GET /core-model-1-4:control-construct responds 200\", function () {\r",
															"        pm.expect(RESPONSE_CODE).to.equal(200);\r",
															"    });\r",
															"\r",
															"    let actualLtpList;\r",
															"    actualLtpList = RESPONSE[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
															"\r",
															"    pm.test(\"Received logical-termination-point is same as intial instance \", function () {\r",
															"        pm.expect(actualLtpList).to.deep.equal(expectedLogicalTerminationPoint);\r",
															"    });\r",
															"\r",
															"    let actualFcList;\r",
															"    actualFcList = RESPONSE[\"core-model-1-4:control-construct\"][\"forwarding-domain\"][0][\"forwarding-construct\"];\r",
															"\r",
															"    pm.test(\"Received forwarding-construct is same as intial instance \", function () {\r",
															"        pm.expect(actualFcList).to.deep.equal(expectedForwardingConstruct);\r",
															"    });\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Testing could not be executed.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-mock-response-code",
														"value": "200",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"description": "## Get new-application-port updated?\n#### Preparation:\n- GETing CC (/core-model-1-4:control-construct)\n  - searching CC for op-s of /v1/bequeath-your-data-and-die, storing operation-key\n  - searcing CC for output port of PromptForBequeathingDataCausesTransferOfListOfApplications, find corresponding op-c, http-c and tcp-c, store them.\n- POST /v1/bequeath-your-data-and-die with\n  - new-application-name and new-application-release attribute according to chosen http-c\n  - new-application-address and new-application-protocol according to chosen tcp-c\n  - new-application-port  with random generated dummy value within specified range \n  - operation-key from above\n  - reasonable parameters\n\n#### Testing:\n- checking for ResponseCode==204\n- GETing CC (/core-model-1-4:control-construct)\n- searching CC for tcp-c of NewRelease and check if the remote-port is updated with dummyValue.\n\n#### Clearing:\n- PUT NewRelease/remote-port with original value\n\n#### Clearance check:\n- Check if the logical-termination-point instance is the same as initial configuration\n- Check if the forwarding-construct instance is the same as initial configuration"
								}
							]
						},
						{
							"name": "Forwardings triggered?",
							"item": [
								{
									"name": "BequeathingDataAndDieCausesForwardings",
									"item": [
										{
											"name": "reference /core-model-1-4:control-construct",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n-----  /v1/bequeath-your-data-and-die acceptance -- callbacks sent? -------------------------------\");\r",
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"var APPLICATION;\r",
															"try {\r",
															"    APPLICATION = pm.environment.get(\"application\");\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Environment variables could not be loaded.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Setting Local Variables and Preparing the Request\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    let URI;\r",
															"    URI = APPLICATION.serverUrl + \"/core-model-1-4:control-construct\";\r",
															"\r",
															"    let REQUEST_BODY;\r",
															"    REQUEST_BODY = \"\";\r",
															"\r",
															"    let AUTHORIZATION;\r",
															"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
															"\r",
															"    let ACCEPT;\r",
															"    ACCEPT = \"application/json\";\r",
															"\r",
															"    let CONTENT_TYPE;\r",
															"    CONTENT_TYPE = \"application/json\";\r",
															"\r",
															"\r",
															"    pm.variables.clear();\r",
															"\r",
															"    pm.variables.set(\"uri\", URI);\r",
															"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
															"\r",
															"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
															"\r",
															"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
															"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Local variables could not be set.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Extracting Result\r",
															"****************************************************************************************/\r",
															"var ltpList;\r",
															"var fcList;\r",
															"try {\r",
															"    let response;\r",
															"    response = pm.response;\r",
															"    \r",
															"    let responseCode;\r",
															"    responseCode = parseInt(response.code);\r",
															"    \r",
															"    if ( Math.floor(responseCode/100) === 2 ) {\r",
															"        let responseObject;\r",
															"        responseObject = JSON.parse(response.stream);\r",
															"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
															"        fcList = responseObject[\"core-model-1-4:control-construct\"][\"forwarding-domain\"][0][\"forwarding-construct\"];\r",
															"\r",
															"    } else {\r",
															"        ltpList = [];\r",
															"        fcList = [];\r",
															"    }\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! ltpList could not be extracted.\");\r",
															"}\r",
															"\r",
															"\r",
															"var currentOperationServer;\r",
															"var executionAndTraceLogHttpClientLtp;\r",
															"var executionAndTraceLogTcpClientLtp;\r",
															"var httpServerLtp;\r",
															"var tcpServerLtpList;\r",
															"var oldReleaseOperationClientLtp;\r",
															"var oldReleaseHttpClientLtp;\r",
															"var oldReleaseTcpClientLtp;\r",
															"\r",
															"var regardApplicationsOperationClientLtp;\r",
															"var newReleaseHttpClientLtp;\r",
															"var newReleaseTcpClientLtp;\r",
															"var registryOfficeHttpClientLtp;\r",
															"var notifyApprovalsOperationClientLtp;\r",
															"var notifyWithdrawnApprovalsOperationClientLtp;\r",
															"var endSubscriptionOperationClientLtp;\r",
															"var relayServerReplacementOperationClientLtp;\r",
															"var deregisterApplicationOperationClientLtp;\r",
															"var relayOperationUpdateOperationClientLtp;\r",
															"var outputFcPortListUnderNewApplicationCausesRequestForOamRequestInformation;\r",
															"try {\r",
															"    currentOperationServer = FindOperationServer(\"/v1/bequeath-your-data-and-die\", ltpList);\r",
															"    httpServerLtp = FindHttpServerLtp(ltpList);\r",
															"    tcpServerLtpList = FindServingLtpList(httpServerLtp, ltpList);\r",
															"\r",
															"    //Execution And Trace Log\r",
															"    let recordServiceRequestOperationClientLtp = FindOperationClientUsingCallback(\"ServiceRequestCausesLoggingRequest\", fcList, ltpList)\r",
															"    executionAndTraceLogHttpClientLtp = FindServingLtp(recordServiceRequestOperationClientLtp, ltpList);\r",
															"    executionAndTraceLogTcpClientLtp = FindServingLtp(executionAndTraceLogHttpClientLtp, ltpList);\r",
															"\r",
															"   //OldRelease: callback - PromptForEmbeddingCausesRequestForBequeathingData\r",
															"    oldReleaseOperationClientLtp = FindOperationClientUsingCallback(\"PromptForEmbeddingCausesRequestForBequeathingData\", fcList, ltpList)\r",
															"    oldReleaseHttpClientLtp = FindServingLtp(oldReleaseOperationClientLtp, ltpList);\r",
															"    oldReleaseTcpClientLtp = FindServingLtp(oldReleaseHttpClientLtp, ltpList);\r",
															"\r",
															"    //Bequeath Transfer Of List Of Applications - NewRelease - PromptForBequeathingDataCausesTransferOfListOfApplications\r",
															"    regardApplicationsOperationClientLtp = FindOperationClientUsingCallback(\"PromptForBequeathingDataCausesTransferOfListOfApplications\", fcList, ltpList);\r",
															"\r",
															"    newReleaseHttpClientLtp = FindServingLtp(regardApplicationsOperationClientLtp, ltpList);\r",
															"    newReleaseTcpClientLtp = FindServingLtp(newReleaseHttpClientLtp, ltpList);\r",
															"\r",
															"    //RegistryOffice - notifyApprovalsOperationClientLtp- PromptForBequeathingDataCausesRObeingRequestedToNotifyApprovalsOfNewApplicationsToNewRelease\r",
															"    notifyApprovalsOperationClientLtp = FindOperationClientUsingCallback(\"PromptForBequeathingDataCausesRObeingRequestedToNotifyApprovalsOfNewApplicationsToNewRelease\", fcList, ltpList);\r",
															"    registryOfficeHttpClientLtp = FindServingLtp(notifyApprovalsOperationClientLtp, ltpList);\r",
															"\r",
															"    //\"notify-withdrawn-approvals\" - PromptForBequeathingDataCausesRObeingRequestedToNotifyWithdrawnApprovalsToNewRelease\r",
															"    notifyWithdrawnApprovalsOperationClientLtp = FindOperationClientUsingCallback(\"PromptForBequeathingDataCausesRObeingRequestedToNotifyWithdrawnApprovalsToNewRelease\", fcList, ltpList);\r",
															"\r",
															"    //\"end-subscription\" - PromptForBequeathingDataCausesRObeingRequestedToStopNotificationsToOldRelease\r",
															"    endSubscriptionOperationClientLtp = FindOperationClientUsingCallback(\"PromptForBequeathingDataCausesRObeingRequestedToStopNotificationsToOldRelease\", fcList, ltpList);\r",
															"\r",
															"    //\"relay-server-replacement\" - PromptForBequeathingDataCausesRequestForBroadcastingInfoAboutServerReplacement\r",
															"    relayServerReplacementOperationClientLtp = FindOperationClientUsingCallback(\"PromptForBequeathingDataCausesRequestForBroadcastingInfoAboutServerReplacement\", fcList, ltpList);\r",
															"\r",
															"    //\"deregister-application\" - PromptForBequeathingDataCausesRequestForDeregisteringOfOldRelease\r",
															"    deregisterApplicationOperationClientLtp = FindOperationClientUsingCallback(\"PromptForBequeathingDataCausesRequestForDeregisteringOfOldRelease\", fcList, ltpList);\r",
															"\r",
															"    //\"relay-operation-update\" - PromptingNewReleaseForUpdatingServerCausesRequestForBroadcastingInfoAboutBackwardCompatibleUpdateOfOperation\r",
															"    relayOperationUpdateOperationClientLtp = FindOperationClientUsingCallback(\"PromptingNewReleaseForUpdatingServerCausesRequestForBroadcastingInfoAboutBackwardCompatibleUpdateOfOperation\", fcList, ltpList)\r",
															"\r",
															"    outputFcPortListUnderNewApplicationCausesRequestForOamRequestInformation = FindOutputFcPortList(\"NewApplicationCausesRequestForOamRequestInformation\", fcList);\r",
															"        \r",
															"} catch (error) {\r",
															"    console.log(error);\r",
															"    console.log(\"! Reference objects could not be extracted.\");\r",
															"} \r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Setting Collection Variables\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    pm.collectionVariables.clear();\r",
															"    \r",
															"    pm.collectionVariables.set(\"currentOperationServer\", currentOperationServer);\r",
															"    pm.collectionVariables.set(\"executionAndTraceLogHttpClientLtp\", executionAndTraceLogHttpClientLtp);\r",
															"    pm.collectionVariables.set(\"executionAndTraceLogTcpClientLtp\", executionAndTraceLogTcpClientLtp);\r",
															"    pm.collectionVariables.set(\"httpServerLtp\", httpServerLtp);\r",
															"    pm.collectionVariables.set(\"tcpServerLtpList\", tcpServerLtpList);\r",
															"    pm.collectionVariables.set(\"oldReleaseHttpClientLtp\", oldReleaseHttpClientLtp);\r",
															"    pm.collectionVariables.set(\"oldReleaseTcpClientLtp\", oldReleaseTcpClientLtp);\r",
															"    pm.collectionVariables.set(\"oldReleaseOperationClientLtp\", oldReleaseOperationClientLtp);\r",
															"\r",
															"    pm.collectionVariables.set(\"regardApplicationsOperationClientLtp\", regardApplicationsOperationClientLtp);\r",
															"    pm.collectionVariables.set(\"newReleaseHttpClientLtp\", newReleaseHttpClientLtp);\r",
															"    pm.collectionVariables.set(\"newReleaseTcpClientLtp\", newReleaseTcpClientLtp);\r",
															"    pm.collectionVariables.set(\"registryOfficeHttpClientLtp\", registryOfficeHttpClientLtp);\r",
															"    pm.collectionVariables.set(\"notifyApprovalsOperationClientLtp\", notifyApprovalsOperationClientLtp);\r",
															"    pm.collectionVariables.set(\"notifyWithdrawnApprovalsOperationClientLtp\", notifyWithdrawnApprovalsOperationClientLtp);\r",
															"    pm.collectionVariables.set(\"endSubscriptionOperationClientLtp\", endSubscriptionOperationClientLtp);\r",
															"    pm.collectionVariables.set(\"relayServerReplacementOperationClientLtp\", relayServerReplacementOperationClientLtp);\r",
															"    pm.collectionVariables.set(\"deregisterApplicationOperationClientLtp\", deregisterApplicationOperationClientLtp);\r",
															"    pm.collectionVariables.set(\"relayOperationUpdateOperationClientLtp\", relayOperationUpdateOperationClientLtp);\r",
															"    pm.collectionVariables.set(\"applicationsListCount\", outputFcPortListUnderNewApplicationCausesRequestForOamRequestInformation.length);\r",
															"    \r",
															"} catch (error) {\r",
															"    console.log(\"! Collection variables could not be set.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/\r",
															"\r",
															"function FindOperationServer(operationName, ltpList) {\r",
															"    let operationServer;\r",
															"    operationServer = \"\";\r",
															"    try {\r",
															"        let sampleUuid;\r",
															"        for(let i=0; i<ltpList.length; i++) {\r",
															"            sampleUuid = ltpList[i][\"uuid\"];\r",
															"            if(sampleUuid.includes(\"op-s-\")) {\r",
															"                let sampleOperationName;\r",
															"                sampleOperationName = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
															"                if(sampleOperationName == operationName) {\r",
															"                    operationServer = ltpList[i];\r",
															"                    return operationServer;\r",
															"                }\r",
															"            }\r",
															"        }\r",
															"    } catch (error) {\r",
															"        console.log(\"! Exception in function : FindOperationServer. \");\r",
															"    }\r",
															"    return operationServer;\r",
															"}\r",
															"\r",
															"function FindHttpServerLtp(ltpList) {\r",
															"    let httpServerLtp;\r",
															"    httpServerLtp = {};\r",
															"    try {\r",
															"        for( let i=0; i<ltpList.length; i++ ) {\r",
															"            let sampleUuid;\r",
															"            sampleUuid = ltpList[i][\"uuid\"];\r",
															"            if(sampleUuid.includes(\"http-s-\")) {\r",
															"                httpServerLtp = ltpList[i];\r",
															"                return httpServerLtp;\r",
															"            }\r",
															"        } \r",
															"    } catch (error) {\r",
															"        console.log(\"! Exception in function : FindHttpServerLtp. \");\r",
															"    }\r",
															"    return httpServerLtp;\r",
															"}\r",
															"\r",
															"function FindHttpClientForApplicationName(applicationName, ltpList) {\r",
															"    let httpClientLtp;\r",
															"    httpClientLtp = {};\r",
															"    try {\r",
															"        let sampleUuid;\r",
															"        for(let i=0; i<ltpList.length; i++) {\r",
															"            sampleUuid = ltpList[i][\"uuid\"];\r",
															"            if(sampleUuid.includes(\"http-c-\")) {\r",
															"                let sampleApplicationName;\r",
															"                sampleApplicationName = ltpList[i][\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-capability\"][\"application-name\"];\r",
															"                if(sampleApplicationName == applicationName) {\r",
															"                    httpClientLtp = ltpList[i];\r",
															"                    return httpClientLtp;\r",
															"                }\r",
															"            }\r",
															"        }\r",
															"    } catch (error) {\r",
															"        console.log(\"! Exception in function : FindHttpClientForApplicationName. \");\r",
															"    }\r",
															"    return httpClientLtp;\r",
															"}\r",
															"\r",
															"function FindOutputFcPortList(forwardingName, fcList) {\r",
															"    let outputFcPortList;\r",
															"    outputFcPortList = [];\r",
															"    try {\r",
															"        for( let i=0; i<fcList.length; i++ ) {\r",
															"            for(let j=0; j<fcList[i][\"name\"].length; j++) {               \r",
															"                if(fcList[i][\"name\"][j][\"value\"] == forwardingName) {\r",
															"                    fcPortList = fcList[i][\"fc-port\"];\r",
															"                    for(let k=0;k<fcPortList.length;k++) {\r",
															"                        if(fcPortList[k][\"port-direction\"] == \"core-model-1-4:PORT_DIRECTION_TYPE_OUTPUT\") {\r",
															"                            outputFcPortList.push(fcPortList[k]);\r",
															"                        }\r",
															"                    }\r",
															"                    return outputFcPortList;\r",
															"                }\r",
															"            }\r",
															"        }\r",
															"    } catch (error) {\r",
															"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
															"    }\r",
															"    return outputFcPortList;\r",
															"}\r",
															"\r",
															"function FindActualInstanceByUuid(expectedUuid, actualLtpList) {\r",
															"    let actualInstance;\r",
															"    actualInstance = {};\r",
															"    try {\r",
															"        for ( let i=0; i<actualLtpList.length; i++ ) {\r",
															"            let sampleUuid;\r",
															"            sampleUuid = actualLtpList[i][\"uuid\"];\r",
															"            if( sampleUuid == expectedUuid ) {\r",
															"                actualInstance = actualLtpList[i];\r",
															"                return actualInstance;\r",
															"            }\r",
															"        }\r",
															"\r",
															"    } catch (error) {\r",
															"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
															"    }\r",
															"    return undefined;\r",
															"}\r",
															"\r",
															"function FindServingLtp(clientLtp, ltpList) {\r",
															"    let servingLtp;\r",
															"    servingLtp = {};\r",
															"    try{\r",
															"        let serverLtpUuid;\r",
															"        serverLtpUuid = clientLtp[\"server-ltp\"][0];\r",
															"        for( let i=0; i<ltpList.length; i++ ) {\r",
															"            let sampleUuid;\r",
															"            sampleUuid = ltpList[i][\"uuid\"];\r",
															"            if( sampleUuid == serverLtpUuid ) {\r",
															"                servingLtp = ltpList[i];\r",
															"                return servingLtp;\r",
															"            }\r",
															"        }\r",
															"    } catch(error) {\r",
															"        console.log(error);\r",
															"        console.log(\"! Exception in function : FindServingLtp. \")\r",
															"    }\r",
															"    return servingLtp;\r",
															"}\r",
															"\r",
															"function FindOperationServerLtp(ltpList, operationName) {\r",
															"    let operationServer;\r",
															"    operationServer = \"\";\r",
															"    try {\r",
															"        let sampleUuid;\r",
															"        for(let i=0; i<ltpList.length; i++) {\r",
															"            sampleUuid = ltpList[i][\"uuid\"];\r",
															"            if(sampleUuid.includes(\"op-s-\")) {\r",
															"                let sampleOperationName;\r",
															"                sampleOperationName = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
															"                if(sampleOperationName.includes(operationName)) {\r",
															"                    operationServer = ltpList[i];\r",
															"                    return operationServer;\r",
															"                }\r",
															"            }\r",
															"        }\r",
															"    } catch (error) {\r",
															"        console.log(\"! Exception in function : FindOperationServerLtp. \");\r",
															"    }\r",
															"    return operationServer;\r",
															"}\r",
															"\r",
															"function FindOperationClientLtp(serverLtp, ltpList, operationName) {\r",
															"    let operationClientLtp;\r",
															"    operationClientLtp = {};\r",
															"    try {\r",
															"        let clientLtpList;\r",
															"        clientLtpList = serverLtp[\"client-ltp\"];\r",
															"        let operationClientInstances;\r",
															"        operationClientInstances = [];\r",
															"        for ( let i=0; i<clientLtpList.length; i++ ) {\r",
															"            for ( let j=0; j<ltpList.length; j++ ) {\r",
															"                if( ltpList[j][\"uuid\"].includes(\"-op-c-\") ) {\r",
															"                    if( ltpList[j][\"uuid\"] == clientLtpList[i] ) {\r",
															"                        operationClientInstances.push(ltpList[j]);\r",
															"                        break;\r",
															"                    }\r",
															"                }\r",
															"            }\r",
															"        }\r",
															"        for( let i=0; i<operationClientInstances.length; i++ ) {\r",
															"            let sampleOperationName;\r",
															"            sampleOperationName = operationClientInstances[i][\"layer-protocol\"][0][\"operation-client-interface-1-0:operation-client-interface-pac\"][\"operation-client-interface-configuration\"][\"operation-name\"];\r",
															"            if(sampleOperationName.includes(operationName)) {\r",
															"                operationClientLtp = operationClientInstances[i];\r",
															"                return operationClientLtp;\r",
															"            }\r",
															"        }\r",
															"    } catch(error) {\r",
															"        console.log(error);\r",
															"        console.log(\"! Exception in function : FindOperationClientLtp. \")\r",
															"    }\r",
															"    return operationClientLtp;\r",
															"}\r",
															"\r",
															"\r",
															"function FindOperationClientUsingCallback(callback, fcList, ltpList) {\r",
															"    let operationClientLtp;\r",
															"    try {\r",
															"        let outputFcPortList = FindOutputFcPortList(callback, fcList);\r",
															"        let randomOutputFcPort = outputFcPortList[Math.floor(Math.random() * outputFcPortList.length)];\r",
															"        let outputLtpUuid = randomOutputFcPort[\"logical-termination-point\"];\r",
															"        operationClientLtp = FindActualInstanceByUuid(outputLtpUuid, ltpList);\r",
															"    } catch (error) {\r",
															"        console.log(error);\r",
															"        console.log(\"! Exception in function FindOperationClientUsingCallback. \");\r",
															"    }\r",
															"    return  operationClientLtp;\r",
															"}\r",
															"\r",
															"function FindServingLtpList(clientLtp, ltpList) {\r",
															"    let servingLtpList;\r",
															"    servingLtpList = [];\r",
															"    try{\r",
															"        let serverLtpList;\r",
															"        serverLtpList = clientLtp[\"server-ltp\"];\r",
															"        for(let j=0; j<serverLtpList.length; j++) {\r",
															"            for( let i=0; i<ltpList.length; i++ ) {\r",
															"                let sampleUuid;\r",
															"                sampleUuid = ltpList[i][\"uuid\"];\r",
															"                if( sampleUuid == serverLtpList[j] ) {\r",
															"                    servingLtpList.push(ltpList[i]);\r",
															"                    break;\r",
															"                }\r",
															"            }\r",
															"        }\r",
															"    } catch(error) {\r",
															"        console.log(error);\r",
															"        console.log(\"! Exception in function : FindServingLtp. \")\r",
															"    }\r",
															"    return servingLtpList;\r",
															"}\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "x-mock-response-code",
														"value": "200",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "reference ExecutionAndTraceLog/core-model-1-4:control-construct",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"var APPLICATION;\r",
															"var AUTHORIZATION;\r",
															"var applicationProtocol;\r",
															"var applicationAddress;\r",
															"var applicationPort;\r",
															"try {\r",
															"    APPLICATION = pm.environment.get(\"application\");\r",
															"\r",
															"    let executionAndTraceLogTcpClientLtp;\r",
															"    executionAndTraceLogTcpClientLtp = pm.collectionVariables.get(\"executionAndTraceLogTcpClientLtp\");\r",
															"\r",
															"    applicationProtocol = executionAndTraceLogTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
															"    applicationProtocol = applicationProtocol.substring(('tcp-client-interface-1-0:PROTOCOL_TYPE_').length);\r",
															"    applicationAddress = executionAndTraceLogTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-address\"];\r",
															"    if(applicationAddress.hasOwnProperty(\"ip-address\")) {\r",
															"        applicationAddress = applicationAddress[\"ip-address\"][\"ipv-4-address\"];\r",
															"    } else {\r",
															"        applicationAddress = applicationAddress[\"domain-name\"];\r",
															"    }\r",
															"    applicationPort = executionAndTraceLogTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-port\"];\r",
															" \r",
															"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Environment variables could not be loaded.\");\r",
															"}\r",
															"\r",
															"/****************************************************************************************\r",
															"* Defining Request Body\r",
															"****************************************************************************************/\r",
															"var REQUEST_BODY;\r",
															"try {\r",
															"    REQUEST_BODY = \"\";\r",
															"} catch (error) {\r",
															"    console.log(\"!Could not define request body. \");\r",
															"}\r",
															"\r",
															"/****************************************************************************************\r",
															"* Setting Local Variables and Preparing the Request\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    let URI;\r",
															"    URI = applicationProtocol + \"://\" + applicationAddress + \":\" + applicationPort + \"/core-model-1-4:control-construct\";\r",
															"    //URI = \"http://9d098835-4e91-48f3-9761-04a82ff2843e.mock.pstmn.io\" + \"/core-model-1-4:control-construct\";\r",
															"\r",
															"    let ACCEPT;\r",
															"    ACCEPT = \"application/json\";\r",
															"\r",
															"    let CONTENT_TYPE;\r",
															"    CONTENT_TYPE = \"application/json\";\r",
															"\r",
															"    pm.variables.clear();\r",
															"\r",
															"    pm.variables.set(\"uri\", URI);\r",
															"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
															"\r",
															"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
															"\r",
															"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
															"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Local variables could not be set.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Extracting Result\r",
															"****************************************************************************************/\r",
															"var ltpList;\r",
															"try {\r",
															"    let response;\r",
															"    response = pm.response;\r",
															"    \r",
															"    let responseCode;\r",
															"    responseCode = parseInt(response.code);\r",
															"    \r",
															"    if ( Math.floor(responseCode/100) === 2 ) {\r",
															"        let responseObject;\r",
															"        responseObject = JSON.parse(response.stream);\r",
															"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
															"\r",
															"    } else {\r",
															"        ltpList = [];\r",
															"    }\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! ltpList could not be extracted.\");\r",
															"}\r",
															"\r",
															"var listRecordsOfFlowOperationKey;\r",
															"try {\r",
															"    listRecordsOfFlowOperationKey = FindOperationKeyForOperationName(\"/v1/list-records-of-flow\", ltpList);\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(error);\r",
															"    console.log(\"! Reference objects could not be extracted.\");\r",
															"} \r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Setting Collection Variables\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    pm.collectionVariables.set(\"listRecordsOfFlowOperationKey\", listRecordsOfFlowOperationKey);\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Collection variables could not be set.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/\r",
															"function FindOperationKeyForOperationName(operationName, ltpList) {\r",
															"    let operationKey;\r",
															"    operationKey = \"\";\r",
															"    try {\r",
															"         let sampleUuid;\r",
															"         for ( let i=0; i<ltpList.length; i++) {\r",
															"            sampleUuid = ltpList[i][\"uuid\"];\r",
															"            if(sampleUuid.includes(\"op-s-\")){\r",
															"                let sampleOperationName;\r",
															"                sampleOperationName = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
															"                if(sampleOperationName == operationName) {\r",
															"                    operationKey = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
															"                    return operationKey; \r",
															"                }\r",
															"            }\r",
															"         }\r",
															"\r",
															"    } catch (error) {\r",
															"        console.log(\" ! Exception in function : FindOperationKeyForOperationName\")\r",
															"    }\r",
															"    return operationKey;\r",
															"}\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-mock-response-code",
														"value": "200",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "sampling /v1/bequeath-your-data-and-die",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"var APPLICATION;\r",
															"var OPERATION_KEY;\r",
															"var CURRENT_ORIGINATOR;\r",
															"var newApplicationName;\r",
															"var newApplicationRelease;\r",
															"var newApplicationProtocol;\r",
															"var newApplicationAddress;\r",
															"var newApplicationPort;\r",
															"var oldReleaseProtocol;\r",
															"var oldReleaseAddress;\r",
															"var oldReleasePort;\r",
															"try {\r",
															"    APPLICATION = pm.environment.get(\"application\");\r",
															"\r",
															"    let ltpList;\r",
															"    ltpList = APPLICATION[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
															"\r",
															"    CURRENT_ORIGINATOR = FindHttpServerApplicationName(ltpList);\r",
															"\r",
															"    let currentOperationServer;\r",
															"    currentOperationServer = pm.collectionVariables.get(\"oldReleaseOperationClientLtp\");\r",
															"    \r",
															"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-client-interface-1-0:operation-client-interface-pac\"][\"operation-client-interface-configuration\"][\"operation-key\"];\r",
															"\r",
															"    let newReleaseHttpServerLtp;\r",
															"    newReleaseHttpServerLtp = pm.collectionVariables.get(\"httpServerLtp\");\r",
															"    newApplicationName = newReleaseHttpServerLtp[\"layer-protocol\"][0][\"http-server-interface-1-0:http-server-interface-pac\"][\"http-server-interface-capability\"][\"application-name\"];\r",
															"    newApplicationRelease = newReleaseHttpServerLtp[\"layer-protocol\"][0][\"http-server-interface-1-0:http-server-interface-pac\"][\"http-server-interface-capability\"][\"release-number\"];\r",
															"\r",
															"    let newReleaseTcpServerLtpList;\r",
															"    newReleaseTcpServerLtpList = pm.collectionVariables.get(\"tcpServerLtpList\");\r",
															"\r",
															"    //Find random TCP server from avilable list\r",
															"    let newReleaseTcpServerLtp;\r",
															"    newReleaseTcpServerLtp = newReleaseTcpServerLtpList[0];\r",
															"   // newReleaseTcpServerLtp = newReleaseTcpServerLtpList[Math.floor(Math.random() * newReleaseTcpServerLtpList.length)];\r",
															"\r",
															"    newApplicationProtocol = newReleaseTcpServerLtp[\"layer-protocol\"][0][\"tcp-server-interface-1-0:tcp-server-interface-pac\"][\"tcp-server-interface-configuration\"][\"local-protocol\"];\r",
															"    newApplicationProtocol = newApplicationProtocol.substring(('tcp-server-interface-1-0:PROTOCOL_TYPE_').length);\r",
															"\r",
															"    //convert local address format to remote adress\r",
															"    //local address is in \"local-address/ipv-4-address\" format, but remote address is in remote-address/ip-address/ipv-4-address format\r",
															"    let newApplicationLocalAddress;\r",
															"    newApplicationLocalAddress = newReleaseTcpServerLtp[\"layer-protocol\"][0][\"tcp-server-interface-1-0:tcp-server-interface-pac\"][\"tcp-server-interface-configuration\"][\"local-address\"];\r",
															"    if(newApplicationLocalAddress.hasOwnProperty(\"ipv-4-address\")) {\r",
															"        newApplicationLocalAddress = newApplicationLocalAddress[\"ipv-4-address\"];\r",
															"        newApplicationAddress = { \"ip-address\": { \"ipv-4-address\": newApplicationLocalAddress} };\r",
															"    } else {\r",
															"        newApplicationAddress = { \"domain-name\": newApplicationLocalAddress[\"domain-name\"] };\r",
															"    }\r",
															"    \r",
															"    newApplicationPort = newReleaseTcpServerLtp[\"layer-protocol\"][0][\"tcp-server-interface-1-0:tcp-server-interface-pac\"][\"tcp-server-interface-configuration\"][\"local-port\"];\r",
															"\r",
															"    let oldReleaseTcpClientLtp;\r",
															"    oldReleaseTcpClientLtp = pm.collectionVariables.get(\"oldReleaseTcpClientLtp\");\r",
															"\r",
															"    oldReleaseProtocol = oldReleaseTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
															"    oldReleaseProtocol = oldReleaseProtocol.substring(('tcp-client-interface-1-0:PROTOCOL_TYPE_').length);\r",
															"    \r",
															"    oldReleaseAddress = oldReleaseTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-address\"];\r",
															"    if(oldReleaseAddress.hasOwnProperty(\"ip-address\")) {\r",
															"        oldReleaseAddress = oldReleaseAddress[\"ip-address\"][\"ipv-4-address\"];\r",
															"    } else {\r",
															"        oldReleaseAddress = oldReleaseAddress[\"domain-name\"];\r",
															"    }\r",
															"    oldReleasePort = oldReleaseTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-port\"];\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(error);\r",
															"    console.log(\"! Input Data could not be loaded.\");\r",
															"}\r",
															"\r",
															"/****************************************************************************************\r",
															"* Defining Dummy Parameters\r",
															"****************************************************************************************/\r",
															"var USER_NAME;\r",
															"var ORIGINATOR;\r",
															"var X_CORRELATOR;\r",
															"var TRACE_INDICATOR;\r",
															"var CUSTOMER_JOURNEY;\r",
															"try {\r",
															"    USER_NAME = APPLICATION.userName;\r",
															"    ORIGINATOR = \"Postman\";\r",
															"    X_CORRELATOR = CreateXCorrelator();\r",
															"    TRACE_INDICATOR = \"1\";\r",
															"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
															"    \r",
															"} catch (error) {\r",
															"    console.log(\"! Could not define dummy values for parameters. \");\r",
															"}\r",
															"\r",
															"/****************************************************************************************\r",
															"* Defining Request Body\r",
															"****************************************************************************************/\r",
															"var REQUEST_BODY;\r",
															"try {\r",
															"    REQUEST_BODY = '{'\r",
															"        + '\"new-application-name\" : ' + '\"' + newApplicationName + '\",'\r",
															"        + '\"new-application-release\" : ' + '\"' + newApplicationRelease + '\",'\r",
															"        + '\"new-application-protocol\" : ' + '\"' + newApplicationProtocol + '\",'\r",
															"        + '\"new-application-address\" : ' + JSON.stringify(newApplicationAddress) + ',' \r",
															"        + '\"new-application-port\" : ' +  newApplicationPort\r",
															"    +'}';\r",
															"} catch (error) {\r",
															"    console.log(\"!Could not define request body. \");\r",
															"}\r",
															"/****************************************************************************************\r",
															"* Setting Collection Variables\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    pm.collectionVariables.set(\"user\", USER_NAME);\r",
															"    pm.collectionVariables.set(\"originator\", ORIGINATOR);\r",
															"    pm.collectionVariables.set(\"xCorrelator\", X_CORRELATOR);\r",
															"    pm.collectionVariables.set(\"traceIndicator\", TRACE_INDICATOR);\r",
															"    pm.collectionVariables.set(\"customerJourney\", CUSTOMER_JOURNEY);\r",
															"    pm.collectionVariables.set(\"currentOriginator\", CURRENT_ORIGINATOR);\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Collection variables could not be set.\");\r",
															"}\r",
															"\r",
															"/****************************************************************************************\r",
															"* Setting Local Variables and Preparing the Request\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    let URI;\r",
															"    //URI = APPLICATION.serverUrl + \"/v1/bequeath-your-data-and-die\";\r",
															"    URI = oldReleaseProtocol + \"://\" + oldReleaseAddress + \":\" + oldReleasePort + \"/v1/bequeath-your-data-and-die\";\r",
															"\r",
															"    let ACCEPT;\r",
															"    ACCEPT = \"application/json\";\r",
															"\r",
															"    let CONTENT_TYPE;\r",
															"    CONTENT_TYPE = \"application/json\";\r",
															"\r",
															"    pm.variables.clear();\r",
															"\r",
															"    pm.variables.set(\"uri\", URI);\r",
															"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
															"\r",
															"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
															"\r",
															"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
															"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
															"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
															"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
															"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
															"\r",
															"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
															"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(error);\r",
															"    console.log(\"! Local variables could not be set.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/\r",
															"\r",
															"function CreateXCorrelator() {\r",
															"    let xCorrelator;\r",
															"    xCorrelator = \"\";\r",
															"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
															"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
															"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
															"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
															"    xCorrelator += GenerateRandomHexString(12);\r",
															"    return xCorrelator;\r",
															"}\r",
															"\r",
															"function GenerateRandomHexString(length) {\r",
															"    var randomRandomHexString = \"\";\r",
															"    while (randomRandomHexString.length < length) {\r",
															"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
															"    }\r",
															"    return randomRandomHexString.substring(0,length);\r",
															"}\r",
															"\r",
															"function RandomIpAddress() {\r",
															"    let randomAddress\r",
															"    let addressParts = [];\r",
															"    for ( let i=0; i<4; i++ ) {\r",
															"        addressParts[i] = String(Math.floor(Math.random() * 256));\r",
															"    }\r",
															"    randomAddress = addressParts[0] + \".\" + addressParts[1] + \".\" + addressParts[2] + \".\" + addressParts[3];\r",
															"    return randomAddress;\r",
															"}\r",
															"\r",
															"function RandomTcpPort() {\r",
															"    let randomPort;\r",
															"    randomPort = 2000 + Math.floor( Math.random() * 1000 );\r",
															"    return randomPort;\r",
															"}\r",
															"\r",
															"function GetMissingAttribute(attributes) {\r",
															"\tlet missingAttribute;\r",
															"\tmissingAttribute = attributes[Math.floor(Math.random()*attributes.length)];\r",
															"\treturn missingAttribute;\r",
															"}\r",
															"\r",
															"function FindHttpServerApplicationName(ltpList) {\r",
															"    let applicationName;\r",
															"    applicationName = \"\";\r",
															"    for( let i=0; i<ltpList.length; i++ ) {\r",
															"        let sampleUuid;\r",
															"        sampleUuid = ltpList[i][\"uuid\"];\r",
															"        if(sampleUuid.includes(\"http-s-\")) {\r",
															"            applicationName = ltpList[i][\"layer-protocol\"][0][\"http-server-interface-1-0:http-server-interface-pac\"][\"http-server-interface-capability\"][\"application-name\"];\r",
															"            return applicationName;\r",
															"        }\r",
															"    }\r",
															"    return applicationName;\r",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Extracting Result\r",
															"****************************************************************************************/\r",
															"var RESPONSE_CODE;\r",
															"try {\r",
															"    let response;\r",
															"    response = pm.response;\r",
															"\r",
															"    RESPONSE_CODE = parseInt(response.code);\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Response Code could not be extracted.\");\r",
															"}    \r",
															"\r",
															"var startTimeForCallBacks;\r",
															"try {\r",
															"    startTimeForCallBacks = new Date().getTime();\r",
															"\r",
															"} catch(error) {\r",
															"    console.log(\" !Could not set start time for callbacks. \");\r",
															"}\r",
															"\r",
															"/****************************************************************************************\r",
															"* Testing\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    pm.test(\"POST /v1/bequeath-your-data-and-die responds 204\", function () {\r",
															"        pm.expect(RESPONSE_CODE).to.equal(204);\r",
															"    });\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Testing could not be executed.\");\r",
															"}\r",
															"\r",
															"/****************************************************************************************\r",
															"* Setting Collection Variables\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    pm.collectionVariables.set(\"startTimeForCallBacks\", startTimeForCallBacks);\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Collection variables could not be set.\");\r",
															"}\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-mock-response-code",
														"value": "204",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Expected ExecutionAndTraceLog/v1/list-records-of-flow for /v1/bequeath-your-data-and-die",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"var APPLICATION;\r",
															"var OPERATION_KEY;\r",
															"var applicationProtocol;\r",
															"var applicationAddress;\r",
															"var applicationPort;\r",
															"var xCorrelatorUnderTest;\r",
															"var latestMatch;\r",
															"var numberOfRecords;\r",
															"try {\r",
															"    APPLICATION = pm.environment.get(\"application\");\r",
															"\r",
															"    let executionAndTraceLogTcpClientLtp;\r",
															"    executionAndTraceLogTcpClientLtp = pm.collectionVariables.get(\"executionAndTraceLogTcpClientLtp\");\r",
															"    \r",
															"    applicationProtocol = executionAndTraceLogTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
															"    applicationProtocol = applicationProtocol.substring(('tcp-client-interface-1-0:PROTOCOL_TYPE_').length);\r",
															"    applicationAddress = executionAndTraceLogTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-address\"];\r",
															"    if(applicationAddress.hasOwnProperty(\"ip-address\")) {\r",
															"        applicationAddress = applicationAddress[\"ip-address\"][\"ipv-4-address\"];\r",
															"    } else {\r",
															"        applicationAddress = applicationAddress[\"domain-name\"];\r",
															"    }\r",
															"    applicationPort = executionAndTraceLogTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-port\"];\r",
															"\r",
															"    OPERATION_KEY = pm.collectionVariables.get(\"listRecordsOfFlowOperationKey\");\r",
															"    xCorrelatorUnderTest = pm.collectionVariables.get(\"xCorrelator\");\r",
															"    latestMatch = 0;\r",
															"    numberOfRecords = 100;\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(error)\r",
															"    console.log(\"! Input Data could not be loaded.\");\r",
															"}\r",
															"\r",
															"/****************************************************************************************\r",
															"* Defining Dummy Parameters\r",
															"****************************************************************************************/\r",
															"var USER_NAME;\r",
															"var ORIGINATOR;\r",
															"var X_CORRELATOR;\r",
															"var TRACE_INDICATOR;\r",
															"var CUSTOMER_JOURNEY;\r",
															"try {\r",
															"    USER_NAME = APPLICATION.userName;\r",
															"    ORIGINATOR = \"Postman\";\r",
															"    X_CORRELATOR = CreateXCorrelator();\r",
															"    TRACE_INDICATOR = \"1\";\r",
															"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
															"    \r",
															"} catch (error) {\r",
															"    console.log(\"! Could not define dummy values for parameters. \");\r",
															"}\r",
															"\r",
															"/****************************************************************************************\r",
															"* Defining Request Body\r",
															"****************************************************************************************/\r",
															"var REQUEST_BODY;\r",
															"try {\r",
															"    REQUEST_BODY = '{'\r",
															"                + '\"x-correlator\": \"' + xCorrelatorUnderTest +'\",'\r",
															"                + '\"latest-match\": ' + latestMatch + ','\r",
															"                + '\"number-of-records\":' + numberOfRecords\r",
															"                + '}';\r",
															"} catch (error) {\r",
															"    console.log(\"!Could not define request body. \");\r",
															"}\r",
															"\r",
															"/****************************************************************************************\r",
															"* Setting Collection Variables\r",
															"****************************************************************************************/\r",
															"/****************************************************************************************\r",
															"* Setting delay\r",
															"****************************************************************************************/\r",
															"setTimeout(function(){\r",
															"\r",
															"}, 3000);\r",
															"/****************************************************************************************\r",
															"* Setting Local Variables and Preparing the Request\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    let URI;\r",
															"    URI = applicationProtocol + \"://\" + applicationAddress + \":\" + applicationPort + \"/v1/list-records-of-flow\";\r",
															"    //URI = \"http://9d098835-4e91-48f3-9761-04a82ff2843e.mock.pstmn.io/v1/list-records-of-flow\";\r",
															"\r",
															"    let ACCEPT;\r",
															"    ACCEPT = \"application/json\";\r",
															"\r",
															"    let CONTENT_TYPE;\r",
															"    CONTENT_TYPE = \"application/json\";\r",
															"\r",
															"    pm.variables.clear();\r",
															"\r",
															"    pm.variables.set(\"uri\", URI);\r",
															"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
															"\r",
															"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
															"\r",
															"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
															"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
															"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
															"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
															"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
															"\r",
															"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
															"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(error);\r",
															"    console.log(\"! Local variables could not be set.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/\r",
															"function CreateXCorrelator() {\r",
															"    let xCorrelator;\r",
															"    xCorrelator = \"\";\r",
															"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
															"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
															"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
															"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
															"    xCorrelator += GenerateRandomHexString(12);\r",
															"    return xCorrelator;\r",
															"}\r",
															"\r",
															"function GenerateRandomHexString(length) {\r",
															"    var randomRandomHexString = \"\";\r",
															"    while (randomRandomHexString.length < length) {\r",
															"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
															"    }\r",
															"    return randomRandomHexString.substring(0, length);\r",
															"}\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"var expectedXCorrelator;\r",
															"var expectedUser;\r",
															"var expectedOriginator;\r",
															"var expectedTraceIndicator;\r",
															"var startTimeForCallBacks;\r",
															"var expectedNewReleaseApplicationName;\r",
															"var expectedNewReleaseApplicationReleaseNumber;\r",
															"var expectedRegardApplicationsOperationName;\r",
															"var expectedRegistryApplicationName;\r",
															"var expectedRegistryOfficeApplicationReleaseNumber;\r",
															"var expectedNotifyApprovalsOperationName;\r",
															"var expectedNotifyWithdrawnApprovalsOperationName;\r",
															"var expectedEndSubscriptionOperationName;\r",
															"var expectedRelayServerReplacementOperationName;\r",
															"var expectedDeregisterApplicationOperationName;\r",
															"var expectedRelayOperationUpdateOperationName;\r",
															"var expecetdApplicationsListCount;\r",
															"try {\r",
															"    expectedXCorrelator = pm.collectionVariables.get(\"xCorrelator\");\r",
															"    expectedUser = pm.collectionVariables.get(\"user\");\r",
															"    expectedOriginator = pm.collectionVariables.get(\"currentOriginator\");\r",
															"    expectedTraceIndicator = pm.collectionVariables.get(\"traceIndicator\");\r",
															"    startTimeForCallBacks = pm.collectionVariables.get(\"startTimeForCallBacks\");\r",
															"   \r",
															"    let expectedNewReleaseHttpLtp;\r",
															"    expectedNewReleaseHttpLtp = pm.collectionVariables.get(\"httpServerLtp\");\r",
															"    expectedNewReleaseApplicationName = expectedNewReleaseHttpLtp[\"layer-protocol\"][0][\"http-server-interface-1-0:http-server-interface-pac\"][\"http-server-interface-capability\"][\"application-name\"];\r",
															"    expectedNewReleaseApplicationReleaseNumber = expectedNewReleaseHttpLtp[\"layer-protocol\"][0][\"http-server-interface-1-0:http-server-interface-pac\"][\"http-server-interface-capability\"][\"release-number\"];\r",
															"\r",
															"    let expectedRegardApplicationsLtp;\r",
															"    expectedRegardApplicationsLtp = pm.collectionVariables.get(\"regardApplicationsOperationClientLtp\");\r",
															"    expectedRegardApplicationsOperationName = expectedRegardApplicationsLtp[\"layer-protocol\"][0][\"operation-client-interface-1-0:operation-client-interface-pac\"][\"operation-client-interface-configuration\"][\"operation-name\"];\r",
															"\r",
															"    let expectedRegistryOfficeHttpLtp;\r",
															"    expectedRegistryOfficeHttpLtp = pm.collectionVariables.get(\"registryOfficeHttpClientLtp\");\r",
															"    expectedRegistryApplicationName = expectedRegistryOfficeHttpLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
															"    expectedRegistryOfficeApplicationReleaseNumber = expectedRegistryOfficeHttpLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"release-number\"];\r",
															"\r",
															"    let expectedNotifyApprovalsltp;\r",
															"    expectedNotifyApprovalsltp = pm.collectionVariables.get(\"notifyApprovalsOperationClientLtp\");\r",
															"    expectedNotifyApprovalsOperationName = expectedNotifyApprovalsltp[\"layer-protocol\"][0][\"operation-client-interface-1-0:operation-client-interface-pac\"][\"operation-client-interface-configuration\"][\"operation-name\"];\r",
															"\r",
															"    let expectedNotifyWithdrawnApprovalsltp;\r",
															"    expectedNotifyWithdrawnApprovalsltp = pm.collectionVariables.get(\"notifyWithdrawnApprovalsOperationClientLtp\");\r",
															"    expectedNotifyWithdrawnApprovalsOperationName = expectedNotifyWithdrawnApprovalsltp[\"layer-protocol\"][0][\"operation-client-interface-1-0:operation-client-interface-pac\"][\"operation-client-interface-configuration\"][\"operation-name\"];\r",
															"\r",
															"    let expectedEndSubscriptionltp;\r",
															"    expectedEndSubscriptionltp = pm.collectionVariables.get(\"endSubscriptionOperationClientLtp\");\r",
															"    expectedEndSubscriptionOperationName = expectedEndSubscriptionltp[\"layer-protocol\"][0][\"operation-client-interface-1-0:operation-client-interface-pac\"][\"operation-client-interface-configuration\"][\"operation-name\"];\r",
															"\r",
															"    let expectedRelayServerReplacementltp;\r",
															"    expectedRelayServerReplacementltp = pm.collectionVariables.get(\"relayServerReplacementOperationClientLtp\");\r",
															"    expectedRelayServerReplacementOperationName = expectedRelayServerReplacementltp[\"layer-protocol\"][0][\"operation-client-interface-1-0:operation-client-interface-pac\"][\"operation-client-interface-configuration\"][\"operation-name\"];\r",
															"\r",
															"    let expectedDeregisterApplicationLtp;\r",
															"    expectedDeregisterApplicationLtp = pm.collectionVariables.get(\"deregisterApplicationOperationClientLtp\");\r",
															"    expectedDeregisterApplicationOperationName = expectedDeregisterApplicationLtp[\"layer-protocol\"][0][\"operation-client-interface-1-0:operation-client-interface-pac\"][\"operation-client-interface-configuration\"][\"operation-name\"];\r",
															"\r",
															"    let expectedRelayOperationUpdateLtp;\r",
															"    expectedRelayOperationUpdateLtp = pm.collectionVariables.get(\"relayOperationUpdateOperationClientLtp\");\r",
															"    expectedRelayOperationUpdateOperationName = expectedRelayOperationUpdateLtp[\"layer-protocol\"][0][\"operation-client-interface-1-0:operation-client-interface-pac\"][\"operation-client-interface-configuration\"][\"operation-name\"];\r",
															"\r",
															"    expecetdApplicationsListCount = pm.collectionVariables.get(\"applicationsListCount\");\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Could not load Input Data. \");\r",
															"}\r",
															"\r",
															"/****************************************************************************************\r",
															"* Extracting Result\r",
															"****************************************************************************************/\r",
															"var RESPONSE_CODE;\r",
															"var serviceRecordList;\r",
															"try {\r",
															"    let response;\r",
															"    response = pm.response;\r",
															"    \r",
															"    RESPONSE_CODE = parseInt(response.code);\r",
															"\r",
															"    if(Math.floor(RESPONSE_CODE/100) === 2) {\r",
															"        serviceRecordList = JSON.parse(response.stream);\r",
															"    }\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Response Code could not be extracted.\");\r",
															"}    \r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Testing\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    pm.test(\"POST ExecutionAndTraceLog/v1/list-records-of-flow responds 200\", function () {\r",
															"        pm.expect(RESPONSE_CODE).to.equal(200);\r",
															"    });\r",
															"\r",
															"    let foundAnEntryWithTheExpectedFinalCallbackHeaderValuesInEatl;\r",
															"    foundAnEntryWithTheExpectedFinalCallbackHeaderValuesInEatl = false;\r",
															"    for(let i=0; i<serviceRecordList.length; i++)  {\r",
															"        if( serviceRecordList[i][\"application-name\"] == expectedRegistryApplicationName\r",
															"                && serviceRecordList[i][\"operation-name\"] == expectedRelayOperationUpdateOperationName\r",
															"                && serviceRecordList[i][\"x-correlator\"] == expectedXCorrelator\r",
															"                && serviceRecordList[i][\"user\"] == expectedUser\r",
															"                && serviceRecordList[i][\"originator\"] == expectedOriginator\r",
															"                && serviceRecordList[i][\"trace-indicator\"].includes(expectedTraceIndicator) ) {\r",
															"\r",
															"            foundAnEntryWithTheExpectedFinalCallbackHeaderValuesInEatl = true;\r",
															"            break;\r",
															"        }\r",
															"    }\r",
															"    pm.test(\"The forwarding for 'bequeathYourDataAndDie' is successful.\", function () {\r",
															"            pm.expect(foundAnEntryWithTheExpectedFinalCallbackHeaderValuesInEatl).to.be.true;\r",
															"        });\r",
															"\r",
															"    let currentTime;\r",
															"    currentTime = new Date().getTime();\r",
															"\r",
															"    if((currentTime < startTimeForCallBacks+(1*60*1000)) && (!foundAnEntryWithTheExpectedFinalCallbackHeaderValuesInEatl) ) {\r",
															"        setTimeout(()=>{\r",
															"            postman.setNextRequest(\"Expected ExecutionAndTraceLog/v1/list-records-of-flow for /v1/bequeath-your-data-and-die\");\r",
															"        }, 20*1000);\r",
															"    } else {\r",
															"        let foundAnEntryWithTheExpectedHeaderValuesInEaTLForRegardApplicationsInNewApplication;\r",
															"        foundAnEntryWithTheExpectedHeaderValuesInEaTLForRegardApplicationsInNewApplication = false;\r",
															"        let foundAnEntryWithTheExpectedHeaderValuesInEaTLForApprovalsNotificationSubscriptionInRO;\r",
															"        foundAnEntryWithTheExpectedHeaderValuesInEaTLForApprovalsNotificationSubscriptionInRO = false;\r",
															"        let foundAnEntryWithTheExpectedHeaderValuesInEaTLForWithdrawnApprovalsNotificationsSubscriptionInRO;\r",
															"        foundAnEntryWithTheExpectedHeaderValuesInEaTLForWithdrawnApprovalsNotificationsSubscriptionInRO = false;\r",
															"        let foundAnEntryWithTheExpectedHeaderValuesInEaTLForEndSubscriptionInRO;\r",
															"        foundAnEntryWithTheExpectedHeaderValuesInEaTLForEndSubscriptionInRO = false;\r",
															"        let foundAnEntryWithTheExpectedHeaderValuesInEaTLForBroadcastingInfoAboutServerReplacementInRO;\r",
															"        foundAnEntryWithTheExpectedHeaderValuesInEaTLForBroadcastingInfoAboutServerReplacementInRO = false;\r",
															"        let foundAnEntryWithTheExpectedHeaderValuesInEaTLForDeregisterOldReleaseInRO;\r",
															"        foundAnEntryWithTheExpectedHeaderValuesInEaTLForDeregisterOldReleaseInRO = false;\r",
															"        let foundAnEntryWithTheExpectedHeaderValuesInEaTLForBroadcastingInfoAboutUpdateOperationInRO;\r",
															"        foundAnEntryWithTheExpectedHeaderValuesInEaTLForBroadcastingInfoAboutUpdateOperationInRO = false;\r",
															"\r",
															"        let actualNumberOfRequestPassedForRegardApplication;\r",
															"        actualNumberOfRequestPassedForRegardApplication = 0;\r",
															"\r",
															"        for(let i=0; i<serviceRecordList.length; i++)  {\r",
															"            if( serviceRecordList[i][\"application-name\"] == expectedNewReleaseApplicationName\r",
															"                    && serviceRecordList[i][\"release-number\"] == expectedNewReleaseApplicationReleaseNumber\r",
															"                    && serviceRecordList[i][\"operation-name\"] == expectedRegardApplicationsOperationName\r",
															"                    && serviceRecordList[i][\"x-correlator\"] == expectedXCorrelator\r",
															"                    && serviceRecordList[i][\"user\"] == expectedUser\r",
															"                    && serviceRecordList[i][\"originator\"] == expectedOriginator\r",
															"                    && serviceRecordList[i][\"trace-indicator\"].includes(expectedTraceIndicator) ) {\r",
															"                foundAnEntryWithTheExpectedHeaderValuesInEaTLForRegardApplicationsInNewApplication = true;\r",
															"                actualNumberOfRequestPassedForRegardApplication = actualNumberOfRequestPassedForRegardApplication + 1;\r",
															"            }\r",
															"            if( serviceRecordList[i][\"application-name\"] == expectedRegistryApplicationName\r",
															"                    && serviceRecordList[i][\"release-number\"] == expectedRegistryOfficeApplicationReleaseNumber\r",
															"                    && serviceRecordList[i][\"operation-name\"] == expectedNotifyApprovalsOperationName\r",
															"                    && serviceRecordList[i][\"x-correlator\"] == expectedXCorrelator\r",
															"                    && serviceRecordList[i][\"user\"] == expectedUser\r",
															"                    && serviceRecordList[i][\"originator\"] == expectedOriginator\r",
															"                    && serviceRecordList[i][\"trace-indicator\"].includes(expectedTraceIndicator) ) {\r",
															"                foundAnEntryWithTheExpectedHeaderValuesInEaTLForApprovalsNotificationSubscriptionInRO = true;\r",
															"            }\r",
															"            if( serviceRecordList[i][\"application-name\"] == expectedRegistryApplicationName\r",
															"                    && serviceRecordList[i][\"release-number\"] == expectedRegistryOfficeApplicationReleaseNumber\r",
															"                    && serviceRecordList[i][\"operation-name\"] == expectedNotifyWithdrawnApprovalsOperationName\r",
															"                    && serviceRecordList[i][\"x-correlator\"] == expectedXCorrelator\r",
															"                    && serviceRecordList[i][\"user\"] == expectedUser\r",
															"                    && serviceRecordList[i][\"originator\"] == expectedOriginator\r",
															"                    && serviceRecordList[i][\"trace-indicator\"].includes(expectedTraceIndicator) ) {\r",
															"                foundAnEntryWithTheExpectedHeaderValuesInEaTLForWithdrawnApprovalsNotificationsSubscriptionInRO = true;\r",
															"            }\r",
															"            if( serviceRecordList[i][\"application-name\"] == expectedRegistryApplicationName\r",
															"                    && serviceRecordList[i][\"release-number\"] == expectedRegistryOfficeApplicationReleaseNumber\r",
															"                    && serviceRecordList[i][\"operation-name\"] == expectedEndSubscriptionOperationName\r",
															"                    && serviceRecordList[i][\"x-correlator\"] == expectedXCorrelator\r",
															"                    && serviceRecordList[i][\"user\"] == expectedUser\r",
															"                    && serviceRecordList[i][\"originator\"] == expectedOriginator\r",
															"                    && serviceRecordList[i][\"trace-indicator\"].includes(expectedTraceIndicator) ) {\r",
															"                foundAnEntryWithTheExpectedHeaderValuesInEaTLForEndSubscriptionInRO = true;\r",
															"            }\r",
															"            if( serviceRecordList[i][\"application-name\"] == expectedRegistryApplicationName\r",
															"                    && serviceRecordList[i][\"release-number\"] == expectedRegistryOfficeApplicationReleaseNumber\r",
															"                    && serviceRecordList[i][\"operation-name\"] == expectedRelayServerReplacementOperationName\r",
															"                    && serviceRecordList[i][\"user\"] == expectedUser\r",
															"                    && serviceRecordList[i][\"originator\"] == expectedOriginator\r",
															"                    && serviceRecordList[i][\"trace-indicator\"].includes(expectedTraceIndicator) ) {\r",
															"                foundAnEntryWithTheExpectedHeaderValuesInEaTLForBroadcastingInfoAboutServerReplacementInRO = true;\r",
															"            }\r",
															"            if( serviceRecordList[i][\"application-name\"] == expectedRegistryApplicationName\r",
															"                    && serviceRecordList[i][\"release-number\"] == expectedRegistryOfficeApplicationReleaseNumber\r",
															"                    && serviceRecordList[i][\"operation-name\"] == expectedDeregisterApplicationOperationName\r",
															"                    && serviceRecordList[i][\"user\"] == expectedUser\r",
															"                    && serviceRecordList[i][\"originator\"] == expectedOriginator\r",
															"                    && serviceRecordList[i][\"trace-indicator\"].includes(expectedTraceIndicator) ) {\r",
															"                foundAnEntryWithTheExpectedHeaderValuesInEaTLForDeregisterOldReleaseInRO = true;\r",
															"            }\r",
															"            if( serviceRecordList[i][\"application-name\"] == expectedRegistryApplicationName\r",
															"                    && serviceRecordList[i][\"release-number\"] == expectedRegistryOfficeApplicationReleaseNumber\r",
															"                    && serviceRecordList[i][\"operation-name\"] == expectedRelayOperationUpdateOperationName\r",
															"                    && serviceRecordList[i][\"user\"] == expectedUser\r",
															"                    && serviceRecordList[i][\"originator\"] == expectedOriginator\r",
															"                    && serviceRecordList[i][\"trace-indicator\"].includes(expectedTraceIndicator) ) {\r",
															"                foundAnEntryWithTheExpectedHeaderValuesInEaTLForBroadcastingInfoAboutUpdateOperationInRO = true;\r",
															"            }\r",
															"        }\r",
															"        \r",
															"        let expectedCallBackEntryFound;\r",
															"        expectedCallBackEntryFound = true;\r",
															"        let result;\r",
															"        result = expectedCallBackEntryFound ? result = \"successful\" : result = \"not successful\";\r",
															"        pm.test(\"As expected, the forwarding 'PromptForBequeathingDataCausesTransferOfListOfApplications' is \"+ result, function () {\r",
															"            pm.expect(foundAnEntryWithTheExpectedHeaderValuesInEaTLForRegardApplicationsInNewApplication).to.equal(expectedCallBackEntryFound);\r",
															"        });\r",
															"        if(foundAnEntryWithTheExpectedHeaderValuesInEaTLForRegardApplicationsInNewApplication) {\r",
															"            pm.test(\"As expected, \" + expecetdApplicationsListCount + \" requests could be found for \"+ expectedRegardApplicationsOperationName + \" \" + result, function () {\r",
															"                 pm.expect(actualNumberOfRequestPassedForRegardApplication).to.equal(expecetdApplicationsListCount);\r",
															"            });\r",
															"        }\r",
															"        if(expectedCallBackEntryFound && !foundAnEntryWithTheExpectedHeaderValuesInEaTLForRegardApplicationsInNewApplication) {\r",
															"            expectedCallBackEntryFound = foundAnEntryWithTheExpectedHeaderValuesInEaTLForRegardApplicationsInNewApplication;\r",
															"        }\r",
															"        if(actualNumberOfRequestPassedForRegardApplication != expecetdApplicationsListCount) {\r",
															"            expectedCallBackEntryFound = false;\r",
															"        }\r",
															"        result = expectedCallBackEntryFound ? result = \"successful\" : result = \"not successful\";\r",
															"        pm.test(\"As expected, the forwarding 'PromptForBequeathingDataCausesRObeingRequestedToNotifyApprovalsOfNewApplicationsToNewRelease' is \"+ result, function () {\r",
															"            pm.expect(foundAnEntryWithTheExpectedHeaderValuesInEaTLForApprovalsNotificationSubscriptionInRO).to.equal(expectedCallBackEntryFound);\r",
															"        });\r",
															"        if(expectedCallBackEntryFound &&!foundAnEntryWithTheExpectedHeaderValuesInEaTLForApprovalsNotificationSubscriptionInRO) {\r",
															"            expectedCallBackEntryFound = foundAnEntryWithTheExpectedHeaderValuesInEaTLForApprovalsNotificationSubscriptionInRO;\r",
															"        } \r",
															"        result = expectedCallBackEntryFound ? result = \"successful\" : result = \"not successful\";\r",
															"        pm.test(\"As expected, the forwarding 'PromptForBequeathingDataCausesRObeingRequestedToNotifyWithdrawnApprovalsToNewRelease' is \"+ result, function () {\r",
															"            pm.expect(foundAnEntryWithTheExpectedHeaderValuesInEaTLForWithdrawnApprovalsNotificationsSubscriptionInRO).to.equal(expectedCallBackEntryFound);\r",
															"        });\r",
															"        if(expectedCallBackEntryFound &&!foundAnEntryWithTheExpectedHeaderValuesInEaTLForWithdrawnApprovalsNotificationsSubscriptionInRO){\r",
															"            expectedCallBackEntryFound = foundAnEntryWithTheExpectedHeaderValuesInEaTLForWithdrawnApprovalsNotificationsSubscriptionInRO;\r",
															"        }\r",
															"        result = expectedCallBackEntryFound ? result = \"successful\" : result = \"not successful\";\r",
															"        pm.test(\"As expected, the forwarding 'PromptForBequeathingDataCausesEndingSubscriptionsToOldRelease' is \"+ result, function () {\r",
															"            pm.expect(foundAnEntryWithTheExpectedHeaderValuesInEaTLForEndSubscriptionInRO).to.equal(expectedCallBackEntryFound);\r",
															"        });\r",
															"        if(expectedCallBackEntryFound && !foundAnEntryWithTheExpectedHeaderValuesInEaTLForEndSubscriptionInRO){\r",
															"            expectedCallBackEntryFound = foundAnEntryWithTheExpectedHeaderValuesInEaTLForEndSubscriptionInRO;\r",
															"        }\r",
															"        result = expectedCallBackEntryFound ? result = \"successful\" : result = \"not successful\";\r",
															"        pm.test(\"As expected, the forwarding 'PromptForBequeathingDataCausesRequestForBroadcastingInfoAboutServerReplacement' is \"+ result, function () {\r",
															"            pm.expect(foundAnEntryWithTheExpectedHeaderValuesInEaTLForBroadcastingInfoAboutServerReplacementInRO).to.equal(expectedCallBackEntryFound);\r",
															"        });\r",
															"        if(expectedCallBackEntryFound && !foundAnEntryWithTheExpectedHeaderValuesInEaTLForBroadcastingInfoAboutServerReplacementInRO) {\r",
															"            expectedCallBackEntryFound = foundAnEntryWithTheExpectedHeaderValuesInEaTLForBroadcastingInfoAboutServerReplacementInRO;\r",
															"        }\r",
															"        result = expectedCallBackEntryFound ? result = \"successful\" : result = \"not successful\";\r",
															"        pm.test(\"As expected, the forwarding 'PromptForBequeathingDataCausesRequestForDeregisteringOfOldRelease' is \"+ result, function () {\r",
															"            pm.expect(foundAnEntryWithTheExpectedHeaderValuesInEaTLForDeregisterOldReleaseInRO).to.equal(expectedCallBackEntryFound);\r",
															"        });\r",
															"        if(expectedCallBackEntryFound && !foundAnEntryWithTheExpectedHeaderValuesInEaTLForDeregisterOldReleaseInRO) {\r",
															"            expectedCallBackEntryFound = foundAnEntryWithTheExpectedHeaderValuesInEaTLForDeregisterOldReleaseInRO;\r",
															"        }\r",
															"        result = expectedCallBackEntryFound ? result = \"successful\" : result = \"not successful\";\r",
															"        pm.test(\"As expected, the forwarding 'PromptingNewReleaseForUpdatingServerCausesRequestForBroadcastingInfoAboutBackwardCompatibleUpdateOfOperation' is \"+ result, function () {\r",
															"            pm.expect(foundAnEntryWithTheExpectedHeaderValuesInEaTLForBroadcastingInfoAboutUpdateOperationInRO).to.equal(expectedCallBackEntryFound);\r",
															"        });\r",
															"    }\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(error);\r",
															"    console.log(\"! Testing could not be executed.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-mock-response-code",
														"value": "200",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "reference OldRelease/core-model-1-4:control-construct",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"var APPLICATION;\r",
															"var oldReleaseProtocol;\r",
															"var oldReleaseAddress;\r",
															"var oldReleasePort;\r",
															"try {\r",
															"    APPLICATION = pm.environment.get(\"application\");\r",
															"\r",
															"    let oldReleaseTcpClientLtp;\r",
															"    oldReleaseTcpClientLtp = pm.collectionVariables.get(\"oldReleaseTcpClientLtp\");\r",
															"\r",
															"    oldReleaseProtocol = oldReleaseTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
															"    oldReleaseProtocol = oldReleaseProtocol.substring(('tcp-client-interface-1-0:PROTOCOL_TYPE_').length);\r",
															"    \r",
															"    oldReleaseAddress = oldReleaseTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-address\"];\r",
															"    if(oldReleaseAddress.hasOwnProperty(\"ip-address\")) {\r",
															"        oldReleaseAddress = oldReleaseAddress[\"ip-address\"][\"ipv-4-address\"];\r",
															"    } else {\r",
															"        oldReleaseAddress = oldReleaseAddress[\"domain-name\"];\r",
															"    }\r",
															"    \r",
															"    oldReleasePort = oldReleaseTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-port\"];\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Environment variables could not be loaded.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Setting Local Variables and Preparing the Request\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    let URI;\r",
															"    //URI = APPLICATION.serverUrl + \"/core-model-1-4:control-construct\";\r",
															"    URI = oldReleaseProtocol + \"://\" + oldReleaseAddress + \":\" + oldReleasePort + \"/core-model-1-4:control-construct\";\r",
															"\r",
															"    let REQUEST_BODY;\r",
															"    REQUEST_BODY = \"\";\r",
															"\r",
															"    let AUTHORIZATION;\r",
															"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
															"\r",
															"    let ACCEPT;\r",
															"    ACCEPT = \"application/json\";\r",
															"\r",
															"    let CONTENT_TYPE;\r",
															"    CONTENT_TYPE = \"application/json\";\r",
															"\r",
															"\r",
															"    pm.variables.clear();\r",
															"\r",
															"    pm.variables.set(\"uri\", URI);\r",
															"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
															"\r",
															"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
															"\r",
															"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
															"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Local variables could not be set.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Extracting Result\r",
															"****************************************************************************************/\r",
															"var ltpList;\r",
															"var fcList;\r",
															"try {\r",
															"    let response;\r",
															"    response = pm.response;\r",
															"    \r",
															"    let responseCode;\r",
															"    responseCode = parseInt(response.code);\r",
															"    \r",
															"    if ( Math.floor(responseCode/100) === 2 ) {\r",
															"        let responseObject;\r",
															"        responseObject = JSON.parse(response.stream);\r",
															"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
															"        fcList = responseObject[\"core-model-1-4:control-construct\"][\"forwarding-domain\"][0][\"forwarding-construct\"];\r",
															"\r",
															"    } else {\r",
															"        ltpList = [];\r",
															"        fcList = [];\r",
															"    }\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Reference object could not be extracted.\");\r",
															"}\r",
															"\r",
															"var oldReleaseBequeathYourDataAndDieOperationServer;\r",
															"var regardApplicationsOperationClientLtp;\r",
															"var newReleaseHttpClientLtp;\r",
															"var newReleaseTcpClientLtp;\r",
															"var registryOfficeHttpClientLtp;\r",
															"var notifyApprovalsOperationClientLtp;\r",
															"var notifyWithdrawnApprovalsOperationClientLtp;\r",
															"var endSubscriptionOperationClientLtp;\r",
															"var relayServerReplacementOperationClientLtp;\r",
															"var deregisterApplicationOperationClientLtp;\r",
															"var relayOperationUpdateOperationClientLtp;\r",
															"var outputFcPortListUnderNewApplicationCausesRequestForOamRequestInformation;\r",
															"try {\r",
															"    oldReleaseBequeathYourDataAndDieOperationServer = FindOperationServer(\"/v1/bequeath-your-data-and-die\", ltpList);\r",
															"\r",
															"    //Bequeath Transfer Of List Of Applications - NewRelease - PromptForBequeathingDataCausesTransferOfListOfApplications\r",
															"    regardApplicationsOperationClientLtp = FindOperationClientUsingCallback(\"PromptForBequeathingDataCausesTransferOfListOfApplications\", fcList, ltpList);\r",
															"\r",
															"    newReleaseHttpClientLtp = FindServingLtp(regardApplicationsOperationClientLtp, ltpList);\r",
															"    newReleaseTcpClientLtp = FindServingLtp(newReleaseHttpClientLtp, ltpList);\r",
															"\r",
															"    //RegistryOffice - notifyApprovalsOperationClientLtp- PromptForBequeathingDataCausesRObeingRequestedToNotifyApprovalsOfNewApplicationsToNewRelease\r",
															"    notifyApprovalsOperationClientLtp = FindOperationClientUsingCallback(\"PromptForBequeathingDataCausesRObeingRequestedToNotifyApprovalsOfNewApplicationsToNewRelease\", fcList, ltpList);\r",
															"    registryOfficeHttpClientLtp = FindServingLtp(notifyApprovalsOperationClientLtp, ltpList);\r",
															"\r",
															"    //\"notify-withdrawn-approvals\" - PromptForBequeathingDataCausesRObeingRequestedToNotifyWithdrawnApprovalsToNewRelease\r",
															"    notifyWithdrawnApprovalsOperationClientLtp = FindOperationClientUsingCallback(\"PromptForBequeathingDataCausesRObeingRequestedToNotifyWithdrawnApprovalsToNewRelease\", fcList, ltpList);\r",
															"\r",
															"    //\"end-subscription\" - PromptForBequeathingDataCausesRObeingRequestedToStopNotificationsToOldRelease\r",
															"    endSubscriptionOperationClientLtp = FindOperationClientUsingCallback(\"PromptForBequeathingDataCausesRObeingRequestedToStopNotificationsToOldRelease\", fcList, ltpList);\r",
															"\r",
															"    //\"relay-server-replacement\" - PromptForBequeathingDataCausesRequestForBroadcastingInfoAboutServerReplacement\r",
															"    relayServerReplacementOperationClientLtp = FindOperationClientUsingCallback(\"PromptForBequeathingDataCausesRequestForBroadcastingInfoAboutServerReplacement\", fcList, ltpList);\r",
															"\r",
															"    //\"deregister-application\" - PromptForBequeathingDataCausesRequestForDeregisteringOfOldRelease\r",
															"    deregisterApplicationOperationClientLtp = FindOperationClientUsingCallback(\"PromptForBequeathingDataCausesRequestForDeregisteringOfOldRelease\", fcList, ltpList);\r",
															"\r",
															"    //\"relay-operation-update\" - PromptingNewReleaseForUpdatingServerCausesRequestForBroadcastingInfoAboutBackwardCompatibleUpdateOfOperation\r",
															"    relayOperationUpdateOperationClientLtp = FindOperationClientUsingCallback(\"PromptingNewReleaseForUpdatingServerCausesRequestForBroadcastingInfoAboutBackwardCompatibleUpdateOfOperation\", fcList, ltpList)\r",
															"\r",
															"    outputFcPortListUnderNewApplicationCausesRequestForOamRequestInformation = FindOutputFcPortList(\"NewApplicationCausesRequestForOamRequestInformation\", fcList);\r",
															"    \r",
															"} catch (error) {\r",
															"    console.log(error);\r",
															"    console.log(\"! Reference objects could not be extracted.\");\r",
															"} \r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Setting Collection Variables\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    pm.collectionVariables.set(\"oldReleaseBequeathYourDataAndDieOperationServer\", oldReleaseBequeathYourDataAndDieOperationServer);\r",
															"    pm.collectionVariables.set(\"regardApplicationsOperationClientLtp\", regardApplicationsOperationClientLtp);\r",
															"    pm.collectionVariables.set(\"newReleaseHttpClientLtp\", newReleaseHttpClientLtp);\r",
															"    pm.collectionVariables.set(\"newReleaseTcpClientLtp\", newReleaseTcpClientLtp);\r",
															"    pm.collectionVariables.set(\"registryOfficeHttpClientLtp\", registryOfficeHttpClientLtp);\r",
															"    pm.collectionVariables.set(\"notifyApprovalsOperationClientLtp\", notifyApprovalsOperationClientLtp);\r",
															"    pm.collectionVariables.set(\"notifyWithdrawnApprovalsOperationClientLtp\", notifyWithdrawnApprovalsOperationClientLtp);\r",
															"    pm.collectionVariables.set(\"endSubscriptionOperationClientLtp\", endSubscriptionOperationClientLtp);\r",
															"    pm.collectionVariables.set(\"relayServerReplacementOperationClientLtp\", relayServerReplacementOperationClientLtp);\r",
															"    pm.collectionVariables.set(\"deregisterApplicationOperationClientLtp\", deregisterApplicationOperationClientLtp);\r",
															"    pm.collectionVariables.set(\"relayOperationUpdateOperationClientLtp\", relayOperationUpdateOperationClientLtp);\r",
															"    pm.collectionVariables.set(\"applicationsListCount\", outputFcPortListUnderNewApplicationCausesRequestForOamRequestInformation.length);\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Collection variables could not be set.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/\r",
															"\r",
															"function FindOperationServer(operationName, ltpList) {\r",
															"    let operationServer;\r",
															"    operationServer = \"\";\r",
															"    try {\r",
															"        let sampleUuid;\r",
															"        for(let i=0; i<ltpList.length; i++) {\r",
															"            sampleUuid = ltpList[i][\"uuid\"];\r",
															"            if(sampleUuid.includes(\"op-s-\")) {\r",
															"                let sampleOperationName;\r",
															"                sampleOperationName = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
															"                if(sampleOperationName == operationName) {\r",
															"                    operationServer = ltpList[i];\r",
															"                    return operationServer;\r",
															"                }\r",
															"            }\r",
															"        }\r",
															"    } catch (error) {\r",
															"        console.log(\"! Exception in function : FindOperationServer. \");\r",
															"    }\r",
															"    return operationServer;\r",
															"}\r",
															"\r",
															"function FindServingLtp(clientLtp, ltpList) {\r",
															"    let servingLtp;\r",
															"    servingLtp = {};\r",
															"    try{\r",
															"        let serverLtpUuid;\r",
															"        serverLtpUuid = clientLtp[\"server-ltp\"][0];\r",
															"        for( let i=0; i<ltpList.length; i++ ) {\r",
															"            let sampleUuid;\r",
															"            sampleUuid = ltpList[i][\"uuid\"];\r",
															"            if( sampleUuid == serverLtpUuid ) {\r",
															"                servingLtp = ltpList[i];\r",
															"                return servingLtp;\r",
															"            }\r",
															"        }\r",
															"    } catch(error) {\r",
															"        console.log(error);\r",
															"        console.log(\"! Exception in function : FindServingLtp. \")\r",
															"    }\r",
															"    return servingLtp;\r",
															"}\r",
															"\r",
															"function FindOperationClientLtp(serverLtp, ltpList, operationName) {\r",
															"    let operationClientLtp;\r",
															"    operationClientLtp = {};\r",
															"    try {\r",
															"        let clientLtpList;\r",
															"        clientLtpList = serverLtp[\"client-ltp\"];\r",
															"        let operationClientInstances;\r",
															"        operationClientInstances = [];\r",
															"        for ( let i=0; i<clientLtpList.length; i++ ) {\r",
															"            for ( let j=0; j<ltpList.length; j++ ) {\r",
															"                if( ltpList[j][\"uuid\"].includes(\"-op-c-\") ) {\r",
															"                    if( ltpList[j][\"uuid\"] == clientLtpList[i] ) {\r",
															"                        operationClientInstances.push(ltpList[j]);\r",
															"                        break;\r",
															"                    }\r",
															"                }\r",
															"            }\r",
															"        }\r",
															"        for( let i=0; i<operationClientInstances.length; i++ ) {\r",
															"            let sampleOperationName;\r",
															"            sampleOperationName = operationClientInstances[i][\"layer-protocol\"][0][\"operation-client-interface-1-0:operation-client-interface-pac\"][\"operation-client-interface-configuration\"][\"operation-name\"];\r",
															"            if(sampleOperationName.includes(operationName)) {\r",
															"                operationClientLtp = operationClientInstances[i];\r",
															"                return operationClientLtp;\r",
															"            }\r",
															"        }\r",
															"    } catch(error) {\r",
															"        console.log(error);\r",
															"        console.log(\"! Exception in function : FindOperationClientLtp. \")\r",
															"    }\r",
															"    return operationClientLtp;\r",
															"}\r",
															"\r",
															"function FindOutputFcPortList(forwardingName, fcList) {\r",
															"    let outputFcPortList;\r",
															"    outputFcPortList = [];\r",
															"    try {\r",
															"        for( let i=0; i<fcList.length; i++ ) {\r",
															"            for(let j=0; j<fcList[i][\"name\"].length; j++) {               \r",
															"                if(fcList[i][\"name\"][j][\"value\"] == forwardingName) {\r",
															"                    fcPortList = fcList[i][\"fc-port\"];\r",
															"                    for(let k=0;k<fcPortList.length;k++) {\r",
															"                        if(fcPortList[k][\"port-direction\"] == \"core-model-1-4:PORT_DIRECTION_TYPE_OUTPUT\") {\r",
															"                            outputFcPortList.push(fcPortList[k]);\r",
															"                        }\r",
															"                    }\r",
															"                    return outputFcPortList;\r",
															"                }\r",
															"            }\r",
															"        }\r",
															"    } catch (error) {\r",
															"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
															"    }\r",
															"    return outputFcPortList;\r",
															"}\r",
															"\r",
															"\r",
															"function FindActualInstanceByUuid(expectedUuid, actualLtpList) {\r",
															"    let actualInstance;\r",
															"    actualInstance = {};\r",
															"    try {\r",
															"        for ( let i=0; i<actualLtpList.length; i++ ) {\r",
															"            let sampleUuid;\r",
															"            sampleUuid = actualLtpList[i][\"uuid\"];\r",
															"            if( sampleUuid == expectedUuid ) {\r",
															"                actualInstance = actualLtpList[i];\r",
															"                return actualInstance;\r",
															"            }\r",
															"        }\r",
															"\r",
															"    } catch (error) {\r",
															"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
															"    }\r",
															"    return undefined;\r",
															"}\r",
															"\r",
															"\r",
															"function FindOperationClientUsingCallback(callback, fcList, ltpList) {\r",
															"    let operationClientLtp\r",
															"    try {\r",
															"        let outputFcPortList = FindOutputFcPortList(callback, fcList);\r",
															"        let randomOutputFcPort = outputFcPortList[Math.floor(Math.random() * outputFcPortList.length)];\r",
															"        let outputLtpUuid = randomOutputFcPort[\"logical-termination-point\"];\r",
															"        operationClientLtp = FindActualInstanceByUuid(outputLtpUuid, ltpList);\r",
															"    } catch (error) {\r",
															"        console.log(error);\r",
															"        console.log(\"! Exception in function FindOperationClientUsingCallback. \");\r",
															"    }\r",
															"    return  operationClientLtp\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "x-mock-response-code",
														"value": "200",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"description": "## Gets the forwarding happened for the incoming request?\n\n#### Requires:\n\n- ExecutionAndTraceLog server to operate\n    \n\n#### Preparation:\n\n- GETing CC (/core-model-1-4:control-construct)\n    - search CC for output fc-port of ServiceRequestCausesLoggingRequest,  \n        its corresponding op-c, http-c and tcp-c, storing them for later verification request\n    - searching CC for op-s of /v1/bequeath-your-data-and-die, storing operation-key\n    - find http-s and tcp-s from CC, store them\n    - searcing CC for output port of PromptForEmbeddingCausesRequestForBequeathingData (fc related with OldRelease), find corresponding op-c, http-c and tcp-c, store them\n- GETing OldRelease/CC (/core-model-1-4:control-construct)\n    - getting required attributes for bequeathing callbacks and store them.\n- GETting EaTL/CC (while using IP, protocol and port from above)\n    - searching CC for op-c of /v1/list-records-of-flow, storing operation-key\n- POST /v1/bequeath-your-data-and-die with\n    - Request body attributes according to chosen http-s, tcp-s (i.e NewRelease)\n    - Request URL attributes according to chosen http-c and tcp-c of Old Release\n    - operation-key from above\n    - all parameters with realistic values (incl. DummyXCorrelator)\n\n#### Testing:\n\n- POST ExecutionAndTraceLog/v1/list-records-of-flow with\n    - IP and port from above\n    - operation-key from above\n    - DummyValue of x-correlator\n    - checking response\n    - checking same record for containing DummyXCorrelator and  \n        each callback is present.\n- POST - 3 min - eatl log -x-core - check entries  \n    timer 10 min - loop for every 1 min, to check if last forwarding is executed/not\n    \n\n#### Clearing:\n\n- PUT initial newRelease/application-name\n- PUT initial newRelease/release-number\n- PUT initial newRelease/protocol\n- PUT initial newRelease/address\n- PUT initial newRelease/port"
								}
							]
						},
						{
							"name": "Update LTP notified?",
							"item": [
								{
									"name": "new-application-name update",
									"item": [
										{
											"name": "reference /core-model-1-4:control-construct",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n----- /v1/bequeath-your-data-and-die acceptance -- new-application-name attribute update notified to ALT-------------------------------\");\r",
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"var APPLICATION;\r",
															"try {\r",
															"    APPLICATION = pm.environment.get(\"application\");\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Environment variables could not be loaded.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Setting Local Variables and Preparing the Request\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    let URI;\r",
															"    URI = APPLICATION.serverUrl + \"/core-model-1-4:control-construct\";\r",
															"\r",
															"    let REQUEST_BODY;\r",
															"    REQUEST_BODY = \"\";\r",
															"\r",
															"    let AUTHORIZATION;\r",
															"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
															"\r",
															"    let ACCEPT;\r",
															"    ACCEPT = \"application/json\";\r",
															"\r",
															"    let CONTENT_TYPE;\r",
															"    CONTENT_TYPE = \"application/json\";\r",
															"\r",
															"\r",
															"    pm.variables.clear();\r",
															"\r",
															"    pm.variables.set(\"uri\", URI);\r",
															"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
															"\r",
															"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
															"\r",
															"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
															"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Local variables could not be set.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Extracting Result\r",
															"****************************************************************************************/\r",
															"var ltpList;\r",
															"var fcList;\r",
															"try {\r",
															"    let response;\r",
															"    response = pm.response;\r",
															"    \r",
															"    let responseCode;\r",
															"    responseCode = parseInt(response.code);\r",
															"    \r",
															"    if ( Math.floor(responseCode/100) === 2 ) {\r",
															"        let responseObject;\r",
															"        responseObject = JSON.parse(response.stream);\r",
															"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
															"        fcList = responseObject[\"core-model-1-4:control-construct\"][\"forwarding-domain\"][0][\"forwarding-construct\"];\r",
															"\r",
															"    } else {\r",
															"        ltpList = [];\r",
															"        fcList = [];\r",
															"    }\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! ltpList could not be extracted.\");\r",
															"}\r",
															"\r",
															"var currentOperationServer;\r",
															"var executionAndTraceLogHttpClientLtp;\r",
															"var executionAndTraceLogTcpClientLtp;\r",
															"var newReleaseHttpClientLtp;\r",
															"var newReleaseTcpClientLtp;\r",
															"var applicationLayerTopologyHttpClientLtp;\r",
															"var updateLtpOperationClientLtp;\r",
															"try {\r",
															"    currentOperationServer = FindOperationServer(\"/v1/bequeath-your-data-and-die\", ltpList);\r",
															"\r",
															"    //Execution And Trace Log\r",
															"    let recordServiceRequestOperationClientLtp = FindOperationClientUsingCallback(\"ServiceRequestCausesLoggingRequest\", fcList, ltpList)\r",
															"    executionAndTraceLogHttpClientLtp = FindServingLtp(recordServiceRequestOperationClientLtp, ltpList);\r",
															"    executionAndTraceLogTcpClientLtp = FindServingLtp(executionAndTraceLogHttpClientLtp, ltpList);\r",
															"\r",
															"    //Bequeath Transfer Of List Of Applications\r",
															"    let bequeathingDataCausesTransferOfListOfApplicationsOperationClientLtp = FindOperationClientUsingCallback(\"PromptForBequeathingDataCausesTransferOfListOfApplications\", fcList, ltpList)\r",
															"    newReleaseHttpClientLtp = FindServingLtp(bequeathingDataCausesTransferOfListOfApplicationsOperationClientLtp, ltpList);\r",
															"    newReleaseTcpClientLtp = FindServingLtp(newReleaseHttpClientLtp, ltpList);\r",
															"    \r",
															"    //Ltp Update Request\r",
															"    updateLtpOperationClientLtp = FindOperationClientUsingCallback(\"ServiceRequestCausesLtpUpdateRequest\", fcList, ltpList)\r",
															"    applicationLayerTopologyHttpClientLtp = FindServingLtp(updateLtpOperationClientLtp, ltpList);\r",
															"    \r",
															"} catch (error) {\r",
															"    console.log(error);\r",
															"    console.log(\"! Reference objects could not be extracted.\");\r",
															"} \r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Setting Collection Variables\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    pm.collectionVariables.clear();\r",
															"    \r",
															"    pm.collectionVariables.set(\"currentOperationServer\", currentOperationServer);\r",
															"    pm.collectionVariables.set(\"executionAndTraceLogHttpClientLtp\", executionAndTraceLogHttpClientLtp);\r",
															"    pm.collectionVariables.set(\"executionAndTraceLogTcpClientLtp\", executionAndTraceLogTcpClientLtp);\r",
															"    pm.collectionVariables.set(\"newReleaseHttpClientLtp\", newReleaseHttpClientLtp);\r",
															"    pm.collectionVariables.set(\"newReleaseTcpClientLtp\", newReleaseTcpClientLtp);\r",
															"    pm.collectionVariables.set(\"applicationLayerTopologyHttpClientLtp\", applicationLayerTopologyHttpClientLtp);\r",
															"    pm.collectionVariables.set(\"updateLtpOperationClientLtp\", updateLtpOperationClientLtp);\r",
															"    pm.collectionVariables.set(\"ltpList\", ltpList);\r",
															"    pm.collectionVariables.set(\"fcList\", fcList);\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Collection variables could not be set.\");\r",
															"}\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/\r",
															"\r",
															"function FindOperationServer(operationName, ltpList) {\r",
															"    let operationServer;\r",
															"    operationServer = \"\";\r",
															"    try {\r",
															"        let sampleUuid;\r",
															"        for(let i=0; i<ltpList.length; i++) {\r",
															"            sampleUuid = ltpList[i][\"uuid\"];\r",
															"            if(sampleUuid.includes(\"op-s-\")) {\r",
															"                let sampleOperationName;\r",
															"                sampleOperationName = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
															"                if(sampleOperationName == operationName) {\r",
															"                    operationServer = ltpList[i];\r",
															"                    return operationServer;\r",
															"                }\r",
															"            }\r",
															"        }\r",
															"    } catch (error) {\r",
															"        console.log(\"! Exception in function : FindOperationServer. \");\r",
															"    }\r",
															"    return operationServer;\r",
															"}\r",
															"\r",
															"function FindOutputFcPortList(forwardingName, fcList) {\r",
															"    let outputFcPortList;\r",
															"    outputFcPortList = [];\r",
															"    try {\r",
															"        for( let i=0; i<fcList.length; i++ ) {\r",
															"            for(let j=0; j<fcList[i][\"name\"].length; j++) {               \r",
															"                if(fcList[i][\"name\"][j][\"value\"] == forwardingName) {\r",
															"                    fcPortList = fcList[i][\"fc-port\"];\r",
															"                    for(let k=0;k<fcPortList.length;k++) {\r",
															"                        if(fcPortList[k][\"port-direction\"] == \"core-model-1-4:PORT_DIRECTION_TYPE_OUTPUT\") {\r",
															"                            outputFcPortList.push(fcPortList[k]);\r",
															"                        }\r",
															"                    }\r",
															"                    return outputFcPortList;\r",
															"                }\r",
															"            }\r",
															"        }\r",
															"    } catch (error) {\r",
															"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
															"    }\r",
															"    return outputFcPortList;\r",
															"}\r",
															"\r",
															"function FindActualInstanceByUuid(expectedUuid, actualLtpList) {\r",
															"    let actualInstance;\r",
															"    actualInstance = {};\r",
															"    try {\r",
															"        for ( let i=0; i<actualLtpList.length; i++ ) {\r",
															"            let sampleUuid;\r",
															"            sampleUuid = actualLtpList[i][\"uuid\"];\r",
															"            if( sampleUuid == expectedUuid ) {\r",
															"                actualInstance = actualLtpList[i];\r",
															"                return actualInstance;\r",
															"            }\r",
															"        }\r",
															"\r",
															"    } catch (error) {\r",
															"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
															"    }\r",
															"    return undefined;\r",
															"}\r",
															"\r",
															"function FindServingLtp(clientLtp, ltpList) {\r",
															"    let servingLtp;\r",
															"    servingLtp = {};\r",
															"    try{\r",
															"        let serverLtpUuid;\r",
															"        serverLtpUuid = clientLtp[\"server-ltp\"][0];\r",
															"        for( let i=0; i<ltpList.length; i++ ) {\r",
															"            let sampleUuid;\r",
															"            sampleUuid = ltpList[i][\"uuid\"];\r",
															"            if( sampleUuid == serverLtpUuid ) {\r",
															"                servingLtp = ltpList[i];\r",
															"                return servingLtp;\r",
															"            }\r",
															"        }\r",
															"    } catch(error) {\r",
															"        console.log(error);\r",
															"        console.log(\"! Exception in function : FindServingLtp. \")\r",
															"    }\r",
															"    return servingLtp;\r",
															"}\r",
															"\r",
															"function FindOperationClientUsingCallback(callback, fcList, ltpList) {\r",
															"    let operationClientLtp\r",
															"    try {\r",
															"        let outputFcPortList = FindOutputFcPortList(callback, fcList);\r",
															"        let randomOutputFcPort = outputFcPortList[Math.floor(Math.random() * outputFcPortList.length)];\r",
															"        let outputLtpUuid = randomOutputFcPort[\"logical-termination-point\"];\r",
															"        operationClientLtp = FindActualInstanceByUuid(outputLtpUuid, ltpList);\r",
															"    } catch (error) {\r",
															"        console.log(error);\r",
															"        console.log(\"! Exception in function FindOperationClientUsingCallback. \");\r",
															"    }\r",
															"    return  operationClientLtp\r",
															"}\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "x-mock-response-code",
														"value": "200",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "reference ExecutionAndTraceLog/core-model-1-4:control-construct",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"var APPLICATION;\r",
															"var AUTHORIZATION;\r",
															"var applicationProtocol;\r",
															"var applicationAddress;\r",
															"var applicationPort;\r",
															"try {\r",
															"    APPLICATION = pm.environment.get(\"application\");\r",
															"\r",
															"    let executionAndTraceLogTcpClientLtp;\r",
															"    executionAndTraceLogTcpClientLtp = pm.collectionVariables.get(\"executionAndTraceLogTcpClientLtp\");\r",
															"\r",
															"    applicationProtocol = executionAndTraceLogTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
															"    applicationProtocol = applicationProtocol.substring(('tcp-client-interface-1-0:PROTOCOL_TYPE_').length);\r",
															"    applicationAddress = executionAndTraceLogTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-address\"];\r",
															"    if(applicationAddress.hasOwnProperty(\"ip-address\")) {\r",
															"        applicationAddress = applicationAddress[\"ip-address\"][\"ipv-4-address\"];\r",
															"    } else {\r",
															"        applicationAddress = applicationAddress[\"domain-name\"];\r",
															"    }\r",
															"    applicationPort = executionAndTraceLogTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-port\"];\r",
															" \r",
															"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Environment variables could not be loaded.\");\r",
															"}\r",
															"\r",
															"/****************************************************************************************\r",
															"* Defining Request Body\r",
															"****************************************************************************************/\r",
															"var REQUEST_BODY;\r",
															"try {\r",
															"    REQUEST_BODY = \"\";\r",
															"} catch (error) {\r",
															"    console.log(\"!Could not define request body. \");\r",
															"}\r",
															"\r",
															"/****************************************************************************************\r",
															"* Setting Local Variables and Preparing the Request\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    let URI;\r",
															"    URI = applicationProtocol + \"://\" + applicationAddress + \":\" + applicationPort + \"/core-model-1-4:control-construct\";\r",
															"    //URI = \"http://9d098835-4e91-48f3-9761-04a82ff2843e.mock.pstmn.io\" + \"/core-model-1-4:control-construct\";\r",
															"\r",
															"    let ACCEPT;\r",
															"    ACCEPT = \"application/json\";\r",
															"\r",
															"    let CONTENT_TYPE;\r",
															"    CONTENT_TYPE = \"application/json\";\r",
															"\r",
															"    pm.variables.clear();\r",
															"\r",
															"    pm.variables.set(\"uri\", URI);\r",
															"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
															"\r",
															"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
															"\r",
															"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
															"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Local variables could not be set.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Extracting Result\r",
															"****************************************************************************************/\r",
															"var ltpList;\r",
															"try {\r",
															"    let response;\r",
															"    response = pm.response;\r",
															"    \r",
															"    let responseCode;\r",
															"    responseCode = parseInt(response.code);\r",
															"    \r",
															"    if ( Math.floor(responseCode/100) === 2 ) {\r",
															"        let responseObject;\r",
															"        responseObject = JSON.parse(response.stream);\r",
															"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
															"\r",
															"    } else {\r",
															"        ltpList = [];\r",
															"    }\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! ltpList could not be extracted.\");\r",
															"}\r",
															"\r",
															"var listRecordsOfFlowOperationKey;\r",
															"try {\r",
															"    listRecordsOfFlowOperationKey = FindOperationKeyForOperationName(\"/v1/list-records-of-flow\", ltpList);\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(error);\r",
															"    console.log(\"! Reference objects could not be extracted.\");\r",
															"} \r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Setting Collection Variables\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    pm.collectionVariables.set(\"listRecordsOfFlowOperationKey\", listRecordsOfFlowOperationKey);\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Collection variables could not be set.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/\r",
															"function FindOperationKeyForOperationName(operationName, ltpList) {\r",
															"    let operationKey;\r",
															"    operationKey = \"\";\r",
															"    try {\r",
															"         let sampleUuid;\r",
															"         for ( let i=0; i<ltpList.length; i++) {\r",
															"            sampleUuid = ltpList[i][\"uuid\"];\r",
															"            if(sampleUuid.includes(\"op-s-\")){\r",
															"                let sampleOperationName;\r",
															"                sampleOperationName = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
															"                if(sampleOperationName == operationName) {\r",
															"                    operationKey = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
															"                    return operationKey; \r",
															"                }\r",
															"            }\r",
															"         }\r",
															"\r",
															"    } catch (error) {\r",
															"        console.log(\" ! Exception in function : FindOperationKeyForOperationName\")\r",
															"    }\r",
															"    return operationKey;\r",
															"}\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-mock-response-code",
														"value": "200",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "sampling /v1/bequeath-your-data-and-die",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"var APPLICATION;\r",
															"var OPERATION_KEY;\r",
															"var CURRENT_ORIGINATOR;\r",
															"var dummyNewApplicationName;\r",
															"var newApplicationRelease;\r",
															"var dummyApplicationProtocol;\r",
															"var dummyApplicationAddress;\r",
															"var dummyApplicationPort;\r",
															"try {\r",
															"    APPLICATION = pm.environment.get(\"application\");\r",
															"\r",
															"    let ltpList;\r",
															"    ltpList = APPLICATION[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
															"\r",
															"    CURRENT_ORIGINATOR = FindHttpServerApplicationName(ltpList);\r",
															"\r",
															"    let currentOperationServer;\r",
															"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
															"    \r",
															"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
															"\r",
															"    dummyNewApplicationName = GenerateRandomString(12);\r",
															"\r",
															"    let newReleaseHttpClientLtp;\r",
															"    newReleaseHttpClientLtp = pm.collectionVariables.get(\"newReleaseHttpClientLtp\");\r",
															"    newApplicationRelease = newReleaseHttpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"release-number\"];\r",
															"\r",
															"    let newReleaseTcpClientLtp;\r",
															"    newReleaseTcpClientLtp = pm.collectionVariables.get(\"newReleaseTcpClientLtp\");\r",
															"\r",
															"    let protocol = newReleaseTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
															"    dummyApplicationProtocol = GenerateDummyRemoteProtocol(protocol);\r",
															"    dummyApplicationProtocol = dummyApplicationProtocol.substring(('tcp-client-interface-1-0:PROTOCOL_TYPE_').length);\r",
															"\r",
															"    let dummyIpv4Address = RandomIpAddress();\r",
															"    dummyApplicationAddress = {\r",
															"        \"ip-address\": {\r",
															"            \"ipv-4-address\": dummyIpv4Address\r",
															"        }\r",
															"    };\r",
															"    dummyApplicationPort = RandomTcpPort();\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(error);\r",
															"    console.log(\"! Input Data could not be loaded.\");\r",
															"}\r",
															"\r",
															"/****************************************************************************************\r",
															"* Defining Dummy Parameters\r",
															"****************************************************************************************/\r",
															"var USER_NAME;\r",
															"var ORIGINATOR;\r",
															"var X_CORRELATOR;\r",
															"var TRACE_INDICATOR;\r",
															"var CUSTOMER_JOURNEY;\r",
															"try {\r",
															"    USER_NAME = APPLICATION.userName;\r",
															"    ORIGINATOR = \"Postman\";\r",
															"    X_CORRELATOR = CreateXCorrelator();\r",
															"    TRACE_INDICATOR = \"1\";\r",
															"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
															"    \r",
															"} catch (error) {\r",
															"    console.log(\"! Could not define dummy values for parameters. \");\r",
															"}\r",
															"\r",
															"/****************************************************************************************\r",
															"* Defining Request Body\r",
															"****************************************************************************************/\r",
															"var REQUEST_BODY;\r",
															"try {\r",
															"    REQUEST_BODY = '{'\r",
															"        + '\"new-application-name\" : ' + '\"' + dummyNewApplicationName + '\",'\r",
															"        + '\"new-application-release\" : ' + '\"' + newApplicationRelease + '\",'\r",
															"        + '\"new-application-protocol\" : ' + '\"' + dummyApplicationProtocol + '\",'\r",
															"        + '\"new-application-address\" : ' + JSON.stringify(dummyApplicationAddress) + ','\r",
															"        + '\"new-application-port\" : ' +  dummyApplicationPort\r",
															"    +'}';\r",
															"} catch (error) {\r",
															"    console.log(\"!Could not define request body. \");\r",
															"}\r",
															"/****************************************************************************************\r",
															"* Setting Collection Variables\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    pm.collectionVariables.set(\"user\", USER_NAME);\r",
															"    pm.collectionVariables.set(\"originator\", ORIGINATOR);\r",
															"    pm.collectionVariables.set(\"xCorrelator\", X_CORRELATOR);\r",
															"    pm.collectionVariables.set(\"traceIndicator\", TRACE_INDICATOR);\r",
															"    pm.collectionVariables.set(\"customerJourney\", CUSTOMER_JOURNEY);\r",
															"    pm.collectionVariables.set(\"currentOriginator\", CURRENT_ORIGINATOR);\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Collection variables could not be set.\");\r",
															"}\r",
															"\r",
															"/****************************************************************************************\r",
															"* Setting Local Variables and Preparing the Request\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    let URI;\r",
															"    URI = APPLICATION.serverUrl + \"/v1/bequeath-your-data-and-die\";\r",
															"\r",
															"    let ACCEPT;\r",
															"    ACCEPT = \"application/json\";\r",
															"\r",
															"    let CONTENT_TYPE;\r",
															"    CONTENT_TYPE = \"application/json\";\r",
															"\r",
															"    pm.variables.clear();\r",
															"\r",
															"    pm.variables.set(\"uri\", URI);\r",
															"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
															"\r",
															"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
															"\r",
															"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
															"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
															"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
															"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
															"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
															"\r",
															"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
															"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(error);\r",
															"    console.log(\"! Local variables could not be set.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/\r",
															"\r",
															"function CreateXCorrelator() {\r",
															"    let xCorrelator;\r",
															"    xCorrelator = \"\";\r",
															"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
															"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
															"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
															"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
															"    xCorrelator += GenerateRandomHexString(12);\r",
															"    return xCorrelator;\r",
															"}\r",
															"\r",
															"function GenerateRandomHexString(length) {\r",
															"    var randomRandomHexString = \"\";\r",
															"    while (randomRandomHexString.length < length) {\r",
															"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
															"    }\r",
															"    return randomRandomHexString.substring(0,length);\r",
															"}\r",
															"\r",
															"function RandomReleaseNumber() {\r",
															"    let releaseNumber;\r",
															"    let releaseNumberParts = [];\r",
															"    for  (let i=0; i<3 ; i++) {\r",
															"        releaseNumberParts[i] = Math.floor(Math.random() * 10);\r",
															"    }\r",
															"    releaseNumber = releaseNumberParts[0] + \".\" + releaseNumberParts[1] + \".\" + releaseNumberParts[2];\r",
															"    return releaseNumber;\r",
															"}\r",
															"\r",
															"function RandomIpAddress() {\r",
															"    let randomAddress\r",
															"    let addressParts = [];\r",
															"    for ( let i=0; i<4; i++ ) {\r",
															"        addressParts[i] = String(Math.floor(Math.random() * 256));\r",
															"    }\r",
															"    randomAddress = addressParts[0] + \".\" + addressParts[1] + \".\" + addressParts[2] + \".\" + addressParts[3];\r",
															"    return randomAddress;\r",
															"}\r",
															"\r",
															"function RandomTcpPort() {\r",
															"    let randomPort;\r",
															"    randomPort = 2000 + Math.floor( Math.random() * 1000 );\r",
															"    return randomPort;\r",
															"}\r",
															"\r",
															"function FindHttpServerApplicationName(ltpList) {\r",
															"    let applicationName;\r",
															"    applicationName = \"\";\r",
															"    for( let i=0; i<ltpList.length; i++ ) {\r",
															"        let sampleUuid;\r",
															"        sampleUuid = ltpList[i][\"uuid\"];\r",
															"        if(sampleUuid.includes(\"http-s-\")) {\r",
															"            applicationName = ltpList[i][\"layer-protocol\"][0][\"http-server-interface-1-0:http-server-interface-pac\"][\"http-server-interface-capability\"][\"application-name\"];\r",
															"            return applicationName;\r",
															"        }\r",
															"    }\r",
															"    return applicationName;\r",
															"}\r",
															"\r",
															"function GenerateDummyRemoteProtocol(currentProtocol) {\r",
															"    let alternativeProtocolList;\r",
															"    alternativeProtocolList = [  \"tcp-client-interface-1-0:PROTOCOL_TYPE_HTTP\",\r",
															"                                    \"tcp-client-interface-1-0:PROTOCOL_TYPE_HTTPS\"\r",
															"                                ];\r",
															"    let indexOfCurrentProtocol;\r",
															"    indexOfCurrentProtocol = alternativeProtocolList.indexOf(currentProtocol);\r",
															"    if (indexOfCurrentProtocol > -1) {\r",
															"        alternativeProtocolList.splice(indexOfCurrentProtocol, 1);\r",
															"    }\r",
															"\r",
															"    let alternativeProtocol;\r",
															"    let alternativeProtocolIndex;\r",
															"    alternativeProtocolIndex = Math.floor(Math.random() * alternativeProtocolList.length);\r",
															"    alternativeProtocol = alternativeProtocolList[alternativeProtocolIndex]; \r",
															"\r",
															"    return alternativeProtocol;\r",
															"}\r",
															"\r",
															"function GenerateRandomString(length) {\r",
															"    let randomString;\r",
															"    randomString = \"\";\r",
															"    try {\r",
															"        let characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\r",
															"        let charactersLength = characters.length;\r",
															"        for (let i = 0; i < length; i++) {\r",
															"            randomString += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
															"        }\r",
															"    } catch (error) {\r",
															"        console.log(\"! Could not generate random string. \");\r",
															"    }\r",
															"    return randomString;\r",
															"}\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Extracting Result\r",
															"****************************************************************************************/\r",
															"var RESPONSE_CODE;\r",
															"try {\r",
															"    let response;\r",
															"    response = pm.response;\r",
															"\r",
															"    RESPONSE_CODE = parseInt(response.code);\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Response Code could not be extracted.\");\r",
															"}    \r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Testing\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    pm.test(\"POST /v1/bequeath-your-data-and-die responds 204\", function () {\r",
															"        pm.expect(RESPONSE_CODE).to.equal(204);\r",
															"    });\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Testing could not be executed.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-mock-response-code",
														"value": "204",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Expected ExecutionAndTraceLog/v1/list-records-of-flow",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"var APPLICATION;\r",
															"var OPERATION_KEY;\r",
															"var applicationProtocol;\r",
															"var applicationAddress;\r",
															"var applicationPort;\r",
															"var xCorrelatorUnderTest;\r",
															"var latestMatch;\r",
															"var numberOfRecords;\r",
															"try {\r",
															"    APPLICATION = pm.environment.get(\"application\");\r",
															"\r",
															"    let executionAndTraceLogTcpClientLtp;\r",
															"    executionAndTraceLogTcpClientLtp = pm.collectionVariables.get(\"executionAndTraceLogTcpClientLtp\");\r",
															"    \r",
															"    applicationProtocol = executionAndTraceLogTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
															"    applicationProtocol = applicationProtocol.substring(('tcp-client-interface-1-0:PROTOCOL_TYPE_').length);\r",
															"    applicationAddress = executionAndTraceLogTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-address\"];\r",
															"    if(applicationAddress.hasOwnProperty(\"ip-address\")) {\r",
															"        applicationAddress = applicationAddress[\"ip-address\"][\"ipv-4-address\"];\r",
															"    } else {\r",
															"        applicationAddress = applicationAddress[\"domain-name\"];\r",
															"    }\r",
															"    applicationPort = executionAndTraceLogTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-port\"];\r",
															"\r",
															"    OPERATION_KEY = pm.collectionVariables.get(\"listRecordsOfFlowOperationKey\");\r",
															"    xCorrelatorUnderTest = pm.collectionVariables.get(\"xCorrelator\");\r",
															"    latestMatch = 0;\r",
															"    numberOfRecords = 100;\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(error)\r",
															"    console.log(\"! Input Data could not be loaded.\");\r",
															"}\r",
															"\r",
															"/****************************************************************************************\r",
															"* Defining Dummy Parameters\r",
															"****************************************************************************************/\r",
															"var USER_NAME;\r",
															"var ORIGINATOR;\r",
															"var X_CORRELATOR;\r",
															"var TRACE_INDICATOR;\r",
															"var CUSTOMER_JOURNEY;\r",
															"try {\r",
															"    USER_NAME = APPLICATION.userName;\r",
															"    ORIGINATOR = \"Postman\";\r",
															"    X_CORRELATOR = CreateXCorrelator();\r",
															"    TRACE_INDICATOR = \"1\";\r",
															"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
															"    \r",
															"} catch (error) {\r",
															"    console.log(\"! Could not define dummy values for parameters. \");\r",
															"}\r",
															"\r",
															"/****************************************************************************************\r",
															"* Defining Request Body\r",
															"****************************************************************************************/\r",
															"var REQUEST_BODY;\r",
															"try {\r",
															"    REQUEST_BODY = '{'\r",
															"                + '\"x-correlator\": \"' + xCorrelatorUnderTest +'\",'\r",
															"                + '\"latest-match\": ' + latestMatch + ','\r",
															"                + '\"number-of-records\":' + numberOfRecords\r",
															"                + '}';\r",
															"} catch (error) {\r",
															"    console.log(\"!Could not define request body. \");\r",
															"}\r",
															"\r",
															"/****************************************************************************************\r",
															"* Setting Collection Variables\r",
															"****************************************************************************************/\r",
															"/****************************************************************************************\r",
															"* Setting delay\r",
															"****************************************************************************************/\r",
															"setTimeout(function(){\r",
															"\r",
															"}, 3000);\r",
															"/****************************************************************************************\r",
															"* Setting Local Variables and Preparing the Request\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    let URI;\r",
															"    URI = applicationProtocol + \"://\" + applicationAddress + \":\" + applicationPort + \"/v1/list-records-of-flow\";\r",
															"    //URI = \"http://9d098835-4e91-48f3-9761-04a82ff2843e.mock.pstmn.io/v1/list-records-of-flow\";\r",
															"\r",
															"    let ACCEPT;\r",
															"    ACCEPT = \"application/json\";\r",
															"\r",
															"    let CONTENT_TYPE;\r",
															"    CONTENT_TYPE = \"application/json\";\r",
															"\r",
															"    pm.variables.clear();\r",
															"\r",
															"    pm.variables.set(\"uri\", URI);\r",
															"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
															"\r",
															"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
															"\r",
															"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
															"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
															"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
															"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
															"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
															"\r",
															"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
															"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(error);\r",
															"    console.log(\"! Local variables could not be set.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/\r",
															"function CreateXCorrelator() {\r",
															"    let xCorrelator;\r",
															"    xCorrelator = \"\";\r",
															"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
															"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
															"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
															"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
															"    xCorrelator += GenerateRandomHexString(12);\r",
															"    return xCorrelator;\r",
															"}\r",
															"\r",
															"function GenerateRandomHexString(length) {\r",
															"    var randomRandomHexString = \"\";\r",
															"    while (randomRandomHexString.length < length) {\r",
															"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
															"    }\r",
															"    return randomRandomHexString.substring(0, length);\r",
															"}\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"var expectedXCorrelator;\r",
															"var expectedUser;\r",
															"var expectedOriginator;\r",
															"var expectedTraceIndicator;\r",
															"var expectedApplicationName;\r",
															"var expectedReleaseNumber;\r",
															"var expectedOperationName;\r",
															"try {\r",
															"    expectedXCorrelator = pm.collectionVariables.get(\"xCorrelator\");\r",
															"    expectedUser = pm.collectionVariables.get(\"user\");\r",
															"    expectedOriginator = pm.collectionVariables.get(\"currentOriginator\");\r",
															"    expectedTraceIndicator = pm.collectionVariables.get(\"traceIndicator\");\r",
															"\r",
															"    let expectedHttpClientLtp;\r",
															"    expectedHttpClientLtp = pm.collectionVariables.get(\"applicationLayerTopologyHttpClientLtp\");\r",
															"    expectedApplicationName = expectedHttpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
															"    expectedReleaseNumber = expectedHttpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"release-number\"];\r",
															"\r",
															"    let expectedOperationClient;\r",
															"    expectedOperationClient = pm.collectionVariables.get(\"updateLtpOperationClientLtp\");\r",
															"    expectedOperationName = expectedOperationClient[\"layer-protocol\"][0][\"operation-client-interface-1-0:operation-client-interface-pac\"][\"operation-client-interface-configuration\"][\"operation-name\"];\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Could not load Input Data. \");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Extracting Result\r",
															"****************************************************************************************/\r",
															"var RESPONSE_CODE;\r",
															"var serviceRecordList;\r",
															"try {\r",
															"    let response;\r",
															"    response = pm.response;\r",
															"    \r",
															"    RESPONSE_CODE = parseInt(response.code);\r",
															"\r",
															"    if(Math.floor(RESPONSE_CODE/100) === 2) {\r",
															"        serviceRecordList = JSON.parse(response.stream);\r",
															"    }\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Response Code could not be extracted.\");\r",
															"}    \r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Testing\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    pm.test(\"POST ExecutionAndTraceLog/v1/list-records-of-flow responds 200\", function () {\r",
															"        pm.expect(RESPONSE_CODE).to.equal(200);\r",
															"    });\r",
															"\r",
															"    let foundAnEntryWithTheExpectedHeaderValuesInEatl;\r",
															"    foundAnEntryWithTheExpectedHeaderValuesInEatl = false;\r",
															"    let responseCodeofTriggeredForwarding;\r",
															"    responseCodeofTriggeredForwarding = 0;\r",
															"    for(let i=0; i<serviceRecordList.length; i++)  {\r",
															"        if( serviceRecordList[i][\"application-name\"] == expectedApplicationName\r",
															"                && serviceRecordList[i][\"release-number\"] == expectedReleaseNumber\r",
															"                && serviceRecordList[i][\"operation-name\"] == expectedOperationName\r",
															"                && serviceRecordList[i][\"x-correlator\"] == expectedXCorrelator\r",
															"                && serviceRecordList[i][\"user\"] == expectedUser\r",
															"                && serviceRecordList[i][\"originator\"] == expectedOriginator\r",
															"                && serviceRecordList[i][\"trace-indicator\"].includes(expectedTraceIndicator) ) {\r",
															"\r",
															"            foundAnEntryWithTheExpectedHeaderValuesInEatl = true;\r",
															"            responseCodeofTriggeredForwarding =  serviceRecordList[i][\"response-code\"];\r",
															"            break;\r",
															"        }\r",
															"    }\r",
															"\r",
															"    if(foundAnEntryWithTheExpectedHeaderValuesInEatl) {\r",
															"        pm.test(\"Update in LTP is successfully notified to ALT with response-code 204\", function () {\r",
															"            pm.expect(responseCodeofTriggeredForwarding).to.equal(204);        \r",
															"        });\r",
															"    } else {\r",
															"        pm.test(\"Update in LTP is successfully notified to ALT\", function () {\r",
															"            pm.expect(foundAnEntryWithTheExpectedHeaderValuesInEatl).to.be.true;        \r",
															"        });\r",
															"    }  \r",
															"\r",
															"} catch (error) {\r",
															"    console.log(error);\r",
															"    console.log(\"! Testing could not be executed.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-mock-response-code",
														"value": "200",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "initial http-c/application-name",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"var APPLICATION;\r",
															"var newReleaseHttpClientLtpUuid;\r",
															"var initialApplicationName;\r",
															"try {\r",
															"    APPLICATION = pm.environment.get(\"application\");\r",
															"    \r",
															"    let newReleaseHttpClientLtp;\r",
															"    newReleaseHttpClientLtp = pm.collectionVariables.get(\"newReleaseHttpClientLtp\");\r",
															"\r",
															"    newReleaseHttpClientLtpUuid = newReleaseHttpClientLtp[\"uuid\"];\r",
															"\r",
															"    initialApplicationName = newReleaseHttpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Variables could not be loaded.\");\r",
															"}\r",
															"\r",
															"/****************************************************************************************\r",
															"* Setting Collection Variables\r",
															"****************************************************************************************/\r",
															"\r",
															"/****************************************************************************************\r",
															"* Setting Local Variables and Preparing the Request\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    let URI;\r",
															"    URI = APPLICATION.serverUrl \r",
															"            + \"/core-model-1-4:control-construct/logical-termination-point=\"\r",
															"            + newReleaseHttpClientLtpUuid\r",
															"            + \"/layer-protocol=0/http-client-interface-1-0:http-client-interface-pac/http-client-interface-configuration/application-name\";\r",
															"\r",
															"    let REQUEST_BODY;\r",
															"    REQUEST_BODY = '{ '\r",
															"                    +   '\"http-client-interface-1-0:application-name\": \"' + initialApplicationName + '\"'\r",
															"                    + ' }';\r",
															"\r",
															"    let AUTHORIZATION;\r",
															"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
															"\r",
															"    let ACCEPT;\r",
															"    ACCEPT = \"application/json\";\r",
															"\r",
															"    let CONTENT_TYPE;\r",
															"    CONTENT_TYPE = \"application/json\";\r",
															"\r",
															"\r",
															"    pm.variables.clear();\r",
															"\r",
															"    pm.variables.set(\"uri\", URI);\r",
															"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
															"\r",
															"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
															"\r",
															"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
															"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(error)\r",
															"    console.log(\"! Local variables could not be set.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-mock-response-code",
														"value": "204",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "initial newRelease/remote-protocol",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"var APPLICATION;\r",
															"var newReleaseTcpClientUuid;\r",
															"var initialReleaseRemoteProtocol;\r",
															"try {\r",
															"    APPLICATION = pm.environment.get(\"application\");\r",
															"    \r",
															"    let newReleaseTcpClientLtp;\r",
															"    newReleaseTcpClientLtp = pm.collectionVariables.get(\"newReleaseTcpClientLtp\");\r",
															"\r",
															"    newReleaseTcpClientUuid = newReleaseTcpClientLtp[\"uuid\"];\r",
															"\r",
															"    initialReleaseRemoteProtocol = newReleaseTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Variables could not be loaded.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Setting Local Variables and Preparing the Request\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    let URI;\r",
															"    URI = APPLICATION.serverUrl \r",
															"            + \"/core-model-1-4:control-construct/logical-termination-point=\" \r",
															"            + newReleaseTcpClientUuid\r",
															"            + \"/layer-protocol=0/tcp-client-interface-1-0:tcp-client-interface-pac/tcp-client-interface-configuration/remote-protocol\";\r",
															"\r",
															"    let REQUEST_BODY;\r",
															"    REQUEST_BODY = '{ '\r",
															"                    +   '\"tcp-client-interface-1-0:remote-protocol\": \"' + initialReleaseRemoteProtocol + '\"'\r",
															"                    + ' }';\r",
															"\r",
															"    let AUTHORIZATION;\r",
															"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
															"\r",
															"    let ACCEPT;\r",
															"    ACCEPT = \"application/json\";\r",
															"\r",
															"    let CONTENT_TYPE;\r",
															"    CONTENT_TYPE = \"application/json\";\r",
															"\r",
															"\r",
															"    pm.variables.clear();\r",
															"\r",
															"    pm.variables.set(\"uri\", URI);\r",
															"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
															"\r",
															"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
															"\r",
															"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
															"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(error)\r",
															"    console.log(\"! Local variables could not be set.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-mock-response-code",
														"value": "204",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "initial newRelease/remote-address",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"var APPLICATION;\r",
															"var newReleaseTcpClientUuid;\r",
															"var initialReleaseRemoteAddress;\r",
															"try {\r",
															"    APPLICATION = pm.environment.get(\"application\");\r",
															"    \r",
															"    let newReleaseTcpClientLtp;\r",
															"    newReleaseTcpClientLtp = pm.collectionVariables.get(\"newReleaseTcpClientLtp\");\r",
															"\r",
															"    newReleaseTcpClientUuid = newReleaseTcpClientLtp[\"uuid\"];\r",
															"\r",
															"    initialReleaseRemoteAddress = newReleaseTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-address\"];\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Variables could not be loaded.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Setting Local Variables and Preparing the Request\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    let URI;\r",
															"    URI = APPLICATION.serverUrl \r",
															"            + \"/core-model-1-4:control-construct/logical-termination-point=\"\r",
															"            + newReleaseTcpClientUuid\r",
															"            + \"/layer-protocol=0/tcp-client-interface-1-0:tcp-client-interface-pac/tcp-client-interface-configuration/remote-address\";\r",
															"\r",
															"    let REQUEST_BODY;\r",
															"    REQUEST_BODY = '{ '\r",
															"                    +   '\"tcp-client-interface-1-0:remote-address\": ' + JSON.stringify(initialReleaseRemoteAddress)\r",
															"                    + ' }';\r",
															"\r",
															"    let AUTHORIZATION;\r",
															"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
															"\r",
															"    let ACCEPT;\r",
															"    ACCEPT = \"application/json\";\r",
															"\r",
															"    let CONTENT_TYPE;\r",
															"    CONTENT_TYPE = \"application/json\";\r",
															"\r",
															"    pm.variables.clear();\r",
															"\r",
															"    pm.variables.set(\"uri\", URI);\r",
															"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
															"\r",
															"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
															"\r",
															"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
															"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(error)\r",
															"    console.log(\"! Local variables could not be set.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-mock-response-code",
														"value": "204",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "initial newRelease/remote-port",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"var APPLICATION;\r",
															"var newReleaseTcpClientUuid;\r",
															"var initialReleaseRemotePort;\r",
															"try {\r",
															"    APPLICATION = pm.environment.get(\"application\");\r",
															"    \r",
															"    let newReleaseTcpClientLtp;\r",
															"    newReleaseTcpClientLtp = pm.collectionVariables.get(\"newReleaseTcpClientLtp\");\r",
															"\r",
															"    newReleaseTcpClientUuid = newReleaseTcpClientLtp[\"uuid\"];\r",
															"\r",
															"    initialReleaseRemotePort = newReleaseTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-port\"];\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Variables could not be loaded.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Setting Local Variables and Preparing the Request\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    let URI;\r",
															"    URI = APPLICATION.serverUrl \r",
															"            + \"/core-model-1-4:control-construct/logical-termination-point=\" \r",
															"            + newReleaseTcpClientUuid\r",
															"            + \"/layer-protocol=0/tcp-client-interface-1-0:tcp-client-interface-pac/tcp-client-interface-configuration/remote-port\";\r",
															"\r",
															"    let REQUEST_BODY;\r",
															"    REQUEST_BODY = '{ '\r",
															"                    +   '\"tcp-client-interface-1-0:remote-port\": ' + initialReleaseRemotePort\r",
															"                    + ' }';\r",
															"\r",
															"    let AUTHORIZATION;\r",
															"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
															"\r",
															"    let ACCEPT;\r",
															"    ACCEPT = \"application/json\";\r",
															"\r",
															"    let CONTENT_TYPE;\r",
															"    CONTENT_TYPE = \"application/json\";\r",
															"\r",
															"\r",
															"    pm.variables.clear();\r",
															"\r",
															"    pm.variables.set(\"uri\", URI);\r",
															"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
															"\r",
															"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
															"\r",
															"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
															"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(error)\r",
															"    console.log(\"! Local variables could not be set.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-mock-response-code",
														"value": "204",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Check /core-model-1-4:control-construct",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"var APPLICATION;\r",
															"var AUTHORIZATION;\r",
															"try {\r",
															"    APPLICATION = pm.environment.get(\"application\");\r",
															"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
															"\r",
															"    oamPath = \"/core-model-1-4:control-construct\";\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Environment variables could not be loaded.\");\r",
															"}\r",
															"\r",
															"/****************************************************************************************\r",
															"* Defining Request Body\r",
															"****************************************************************************************/\r",
															"var REQUEST_BODY;\r",
															"try {\r",
															"    REQUEST_BODY = \"\";\r",
															"} catch (error) {\r",
															"    console.log(\"!Could not define request body. \");\r",
															"}\r",
															"\r",
															"/****************************************************************************************\r",
															"* Setting Local Variables and Preparing the Request\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    let URI;\r",
															"    URI = APPLICATION.serverUrl + oamPath;\r",
															"\r",
															"    let ACCEPT;\r",
															"    ACCEPT = \"application/json\";\r",
															"\r",
															"    let CONTENT_TYPE;\r",
															"    CONTENT_TYPE = \"application/json\";\r",
															"\r",
															"    pm.variables.clear();\r",
															"\r",
															"    pm.variables.set(\"uri\", URI);\r",
															"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
															"\r",
															"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
															"\r",
															"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
															"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Local variables could not be set.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"var expectedLogicalTerminationPoint;\r",
															"var expectedForwardingConstruct;\r",
															"try {\r",
															"    expectedLogicalTerminationPoint = pm.collectionVariables.get(\"ltpList\");\r",
															"    expectedForwardingConstruct = pm.collectionVariables.get(\"fcList\");\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Collection variables could not be loaded.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Extracting Result\r",
															"****************************************************************************************/\r",
															"var RESPONSE_CODE;\r",
															"var RESPONSE;\r",
															"try {\r",
															"    let response;\r",
															"    response = pm.response;\r",
															"\r",
															"    RESPONSE_CODE = parseInt(response.code);\r",
															"\r",
															"    if (Math.floor(RESPONSE_CODE / 100) === 2) {\r",
															"        RESPONSE = JSON.parse(response.stream);\r",
															"    } else {\r",
															"        RESPONSE = [];\r",
															"    }\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Result value lists could not be extracted.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Testing\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    pm.test(\"GET /core-model-1-4:control-construct responds 200\", function () {\r",
															"        pm.expect(RESPONSE_CODE).to.equal(200);\r",
															"    });\r",
															"\r",
															"    let actualLtpList;\r",
															"    actualLtpList = RESPONSE[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
															"\r",
															"    pm.test(\"Received logical-termination-point is same as intial instance \", function () {\r",
															"        pm.expect(actualLtpList).to.deep.equal(expectedLogicalTerminationPoint);\r",
															"    });\r",
															"\r",
															"    let actualFcList;\r",
															"    actualFcList = RESPONSE[\"core-model-1-4:control-construct\"][\"forwarding-domain\"][0][\"forwarding-construct\"];\r",
															"\r",
															"    pm.test(\"Received forwarding-construct is same as intial instance \", function () {\r",
															"        pm.expect(actualFcList).to.deep.equal(expectedForwardingConstruct);\r",
															"    });\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Testing could not be executed.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-mock-response-code",
														"value": "200",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"description": "##Gets new-application-name update trigger update-ltp to ALT?\n#### Requires:\n- ExecutionAndTraceLog/OamLog server to operate\n\n#### Preparation:\n- GETing CC (/core-model-1-4:control-construct)\n  - search CC for output fc-port of ServiceRequestCausesLoggingRequest, \nits corresponding op-c, http-c and tcp-c, storing them for later verification request \n  - searching CC for output-fc-port of ServiceRequestCausesLtpUpdateRequest, its corresponding op-c, http-c, storing them.\n  - searching CC for op-s of /v1/bequeath-your-data-and-die, storing operation-key\n  - searcing CC for output port of PromptForBequeathingDataCausesTransferOfListOfApplications, find corresponding op-c, http-c and tcp-c, store them.\n- GETting EaTL/CC (while using IP, protocol and port from above)\n  - searching CC for op-c of /v1/list-records-of-flow, storing operation-key\n- POST /v1/bequeath-your-data-and-die with\n  - new-application-release attribute according to chosen http-c \n  - new-application-protocol, new-application-address and new-application-port with random generated dummy values (assure sufficiently high probability that set does not exist!), BUT new-application-name attribute with random dummy value as per the spec.\n  - operation-key from above\n  - reasonable parameters\n\n#### Testing:\n- POST ExecutionAndTraceLog/v1/list-records-of-flow with \n   - IP, protocol and port from above\n   - operation-key from above\n   - DummyValue of x-correlator\n   - checking response for entry with application data from ServiceRequestCausesLtpUpdateRequest\n   - checking same record for containing DummyXCorrelator &DummyTraceIndicator\n\n#### Clearing:\n- PUT NewRelease/application-name with original value\n- PUT NewRelease/release-protocol with original value\n- PUT NewRelease/remote-address with original value\n- PUT NewRelease/remote-port with original value\n\n#### Clearance check:\n- Check if the logical-termination-point instance is the same as initial configuration\n- Check if the forwarding-construct instance is the same as initial configuration"
								},
								{
									"name": "new-application-release update",
									"item": [
										{
											"name": "reference /core-model-1-4:control-construct",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n----- /v1/bequeath-your-data-and-die acceptance -- new-application-release attribute update notified to ALT-------------------------------\");\r",
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"var APPLICATION;\r",
															"try {\r",
															"    APPLICATION = pm.environment.get(\"application\");\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Environment variables could not be loaded.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Setting Local Variables and Preparing the Request\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    let URI;\r",
															"    URI = APPLICATION.serverUrl + \"/core-model-1-4:control-construct\";\r",
															"\r",
															"    let REQUEST_BODY;\r",
															"    REQUEST_BODY = \"\";\r",
															"\r",
															"    let AUTHORIZATION;\r",
															"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
															"\r",
															"    let ACCEPT;\r",
															"    ACCEPT = \"application/json\";\r",
															"\r",
															"    let CONTENT_TYPE;\r",
															"    CONTENT_TYPE = \"application/json\";\r",
															"\r",
															"\r",
															"    pm.variables.clear();\r",
															"\r",
															"    pm.variables.set(\"uri\", URI);\r",
															"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
															"\r",
															"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
															"\r",
															"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
															"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Local variables could not be set.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Extracting Result\r",
															"****************************************************************************************/\r",
															"var ltpList;\r",
															"var fcList;\r",
															"try {\r",
															"    let response;\r",
															"    response = pm.response;\r",
															"    \r",
															"    let responseCode;\r",
															"    responseCode = parseInt(response.code);\r",
															"    \r",
															"    if ( Math.floor(responseCode/100) === 2 ) {\r",
															"        let responseObject;\r",
															"        responseObject = JSON.parse(response.stream);\r",
															"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
															"        fcList = responseObject[\"core-model-1-4:control-construct\"][\"forwarding-domain\"][0][\"forwarding-construct\"];\r",
															"\r",
															"    } else {\r",
															"        ltpList = [];\r",
															"        fcList = [];\r",
															"    }\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! ltpList could not be extracted.\");\r",
															"}\r",
															"\r",
															"var currentOperationServer;\r",
															"var executionAndTraceLogHttpClientLtp;\r",
															"var executionAndTraceLogTcpClientLtp;\r",
															"var newReleaseHttpClientLtp;\r",
															"var newReleaseTcpClientLtp;\r",
															"var applicationLayerTopologyHttpClientLtp;\r",
															"var updateLtpOperationClientLtp;\r",
															"try {\r",
															"    currentOperationServer = FindOperationServer(\"/v1/bequeath-your-data-and-die\", ltpList);\r",
															"\r",
															"    //Execution And Trace Log\r",
															"    let recordServiceRequestOperationClientLtp = FindOperationClientUsingCallback(\"ServiceRequestCausesLoggingRequest\", fcList, ltpList)\r",
															"    executionAndTraceLogHttpClientLtp = FindServingLtp(recordServiceRequestOperationClientLtp, ltpList);\r",
															"    executionAndTraceLogTcpClientLtp = FindServingLtp(executionAndTraceLogHttpClientLtp, ltpList);\r",
															"\r",
															"    //Bequeath Transfer Of List Of Applications\r",
															"    let bequeathingDataCausesTransferOfListOfApplicationsOperationClientLtp = FindOperationClientUsingCallback(\"PromptForBequeathingDataCausesTransferOfListOfApplications\", fcList, ltpList)\r",
															"    newReleaseHttpClientLtp = FindServingLtp(bequeathingDataCausesTransferOfListOfApplicationsOperationClientLtp, ltpList);\r",
															"    newReleaseTcpClientLtp = FindServingLtp(newReleaseHttpClientLtp, ltpList);\r",
															"    \r",
															"    //Ltp Update Request\r",
															"    updateLtpOperationClientLtp = FindOperationClientUsingCallback(\"ServiceRequestCausesLtpUpdateRequest\", fcList, ltpList)\r",
															"    applicationLayerTopologyHttpClientLtp = FindServingLtp(updateLtpOperationClientLtp, ltpList);\r",
															"    \r",
															"} catch (error) {\r",
															"    console.log(error);\r",
															"    console.log(\"! Reference objects could not be extracted.\");\r",
															"} \r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Setting Collection Variables\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    pm.collectionVariables.clear();\r",
															"    \r",
															"    pm.collectionVariables.set(\"currentOperationServer\", currentOperationServer);\r",
															"    pm.collectionVariables.set(\"executionAndTraceLogHttpClientLtp\", executionAndTraceLogHttpClientLtp);\r",
															"    pm.collectionVariables.set(\"executionAndTraceLogTcpClientLtp\", executionAndTraceLogTcpClientLtp);\r",
															"    pm.collectionVariables.set(\"newReleaseHttpClientLtp\", newReleaseHttpClientLtp);\r",
															"    pm.collectionVariables.set(\"newReleaseTcpClientLtp\", newReleaseTcpClientLtp);\r",
															"    pm.collectionVariables.set(\"applicationLayerTopologyHttpClientLtp\", applicationLayerTopologyHttpClientLtp);\r",
															"    pm.collectionVariables.set(\"updateLtpOperationClientLtp\", updateLtpOperationClientLtp);\r",
															"    pm.collectionVariables.set(\"ltpList\", ltpList);\r",
															"    pm.collectionVariables.set(\"fcList\", fcList);\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Collection variables could not be set.\");\r",
															"}\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/\r",
															"\r",
															"function FindOperationServer(operationName, ltpList) {\r",
															"    let operationServer;\r",
															"    operationServer = \"\";\r",
															"    try {\r",
															"        let sampleUuid;\r",
															"        for(let i=0; i<ltpList.length; i++) {\r",
															"            sampleUuid = ltpList[i][\"uuid\"];\r",
															"            if(sampleUuid.includes(\"op-s-\")) {\r",
															"                let sampleOperationName;\r",
															"                sampleOperationName = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
															"                if(sampleOperationName == operationName) {\r",
															"                    operationServer = ltpList[i];\r",
															"                    return operationServer;\r",
															"                }\r",
															"            }\r",
															"        }\r",
															"    } catch (error) {\r",
															"        console.log(\"! Exception in function : FindOperationServer. \");\r",
															"    }\r",
															"    return operationServer;\r",
															"}\r",
															"\r",
															"function FindOutputFcPortList(forwardingName, fcList) {\r",
															"    let outputFcPortList;\r",
															"    outputFcPortList = [];\r",
															"    try {\r",
															"        for( let i=0; i<fcList.length; i++ ) {\r",
															"            for(let j=0; j<fcList[i][\"name\"].length; j++) {               \r",
															"                if(fcList[i][\"name\"][j][\"value\"] == forwardingName) {\r",
															"                    fcPortList = fcList[i][\"fc-port\"];\r",
															"                    for(let k=0;k<fcPortList.length;k++) {\r",
															"                        if(fcPortList[k][\"port-direction\"] == \"core-model-1-4:PORT_DIRECTION_TYPE_OUTPUT\") {\r",
															"                            outputFcPortList.push(fcPortList[k]);\r",
															"                        }\r",
															"                    }\r",
															"                    return outputFcPortList;\r",
															"                }\r",
															"            }\r",
															"        }\r",
															"    } catch (error) {\r",
															"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
															"    }\r",
															"    return outputFcPortList;\r",
															"}\r",
															"\r",
															"function FindActualInstanceByUuid(expectedUuid, actualLtpList) {\r",
															"    let actualInstance;\r",
															"    actualInstance = {};\r",
															"    try {\r",
															"        for ( let i=0; i<actualLtpList.length; i++ ) {\r",
															"            let sampleUuid;\r",
															"            sampleUuid = actualLtpList[i][\"uuid\"];\r",
															"            if( sampleUuid == expectedUuid ) {\r",
															"                actualInstance = actualLtpList[i];\r",
															"                return actualInstance;\r",
															"            }\r",
															"        }\r",
															"\r",
															"    } catch (error) {\r",
															"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
															"    }\r",
															"    return undefined;\r",
															"}\r",
															"\r",
															"function FindServingLtp(clientLtp, ltpList) {\r",
															"    let servingLtp;\r",
															"    servingLtp = {};\r",
															"    try{\r",
															"        let serverLtpUuid;\r",
															"        serverLtpUuid = clientLtp[\"server-ltp\"][0];\r",
															"        for( let i=0; i<ltpList.length; i++ ) {\r",
															"            let sampleUuid;\r",
															"            sampleUuid = ltpList[i][\"uuid\"];\r",
															"            if( sampleUuid == serverLtpUuid ) {\r",
															"                servingLtp = ltpList[i];\r",
															"                return servingLtp;\r",
															"            }\r",
															"        }\r",
															"    } catch(error) {\r",
															"        console.log(error);\r",
															"        console.log(\"! Exception in function : FindServingLtp. \")\r",
															"    }\r",
															"    return servingLtp;\r",
															"}\r",
															"\r",
															"function FindOperationClientUsingCallback(callback, fcList, ltpList) {\r",
															"    let operationClientLtp\r",
															"    try {\r",
															"        let outputFcPortList = FindOutputFcPortList(callback, fcList);\r",
															"        let randomOutputFcPort = outputFcPortList[Math.floor(Math.random() * outputFcPortList.length)];\r",
															"        let outputLtpUuid = randomOutputFcPort[\"logical-termination-point\"];\r",
															"        operationClientLtp = FindActualInstanceByUuid(outputLtpUuid, ltpList);\r",
															"    } catch (error) {\r",
															"        console.log(error);\r",
															"        console.log(\"! Exception in function FindOperationClientUsingCallback. \");\r",
															"    }\r",
															"    return  operationClientLtp\r",
															"}\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "x-mock-response-code",
														"value": "200",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "reference ExecutionAndTraceLog/core-model-1-4:control-construct",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"var APPLICATION;\r",
															"var AUTHORIZATION;\r",
															"var applicationProtocol;\r",
															"var applicationAddress;\r",
															"var applicationPort;\r",
															"try {\r",
															"    APPLICATION = pm.environment.get(\"application\");\r",
															"\r",
															"    let executionAndTraceLogTcpClientLtp;\r",
															"    executionAndTraceLogTcpClientLtp = pm.collectionVariables.get(\"executionAndTraceLogTcpClientLtp\");\r",
															"\r",
															"    applicationProtocol = executionAndTraceLogTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
															"    applicationProtocol = applicationProtocol.substring(('tcp-client-interface-1-0:PROTOCOL_TYPE_').length);\r",
															"    applicationAddress = executionAndTraceLogTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-address\"];\r",
															"    if(applicationAddress.hasOwnProperty(\"ip-address\")) {\r",
															"        applicationAddress = applicationAddress[\"ip-address\"][\"ipv-4-address\"];\r",
															"    } else {\r",
															"        applicationAddress = applicationAddress[\"domain-name\"];\r",
															"    }\r",
															"    applicationPort = executionAndTraceLogTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-port\"];\r",
															" \r",
															"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Environment variables could not be loaded.\");\r",
															"}\r",
															"\r",
															"/****************************************************************************************\r",
															"* Defining Request Body\r",
															"****************************************************************************************/\r",
															"var REQUEST_BODY;\r",
															"try {\r",
															"    REQUEST_BODY = \"\";\r",
															"} catch (error) {\r",
															"    console.log(\"!Could not define request body. \");\r",
															"}\r",
															"\r",
															"/****************************************************************************************\r",
															"* Setting Local Variables and Preparing the Request\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    let URI;\r",
															"    URI = applicationProtocol + \"://\" + applicationAddress + \":\" + applicationPort + \"/core-model-1-4:control-construct\";\r",
															"    //URI = \"http://9d098835-4e91-48f3-9761-04a82ff2843e.mock.pstmn.io\" + \"/core-model-1-4:control-construct\";\r",
															"\r",
															"    let ACCEPT;\r",
															"    ACCEPT = \"application/json\";\r",
															"\r",
															"    let CONTENT_TYPE;\r",
															"    CONTENT_TYPE = \"application/json\";\r",
															"\r",
															"    pm.variables.clear();\r",
															"\r",
															"    pm.variables.set(\"uri\", URI);\r",
															"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
															"\r",
															"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
															"\r",
															"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
															"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Local variables could not be set.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Extracting Result\r",
															"****************************************************************************************/\r",
															"var ltpList;\r",
															"try {\r",
															"    let response;\r",
															"    response = pm.response;\r",
															"    \r",
															"    let responseCode;\r",
															"    responseCode = parseInt(response.code);\r",
															"    \r",
															"    if ( Math.floor(responseCode/100) === 2 ) {\r",
															"        let responseObject;\r",
															"        responseObject = JSON.parse(response.stream);\r",
															"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
															"\r",
															"    } else {\r",
															"        ltpList = [];\r",
															"    }\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! ltpList could not be extracted.\");\r",
															"}\r",
															"\r",
															"var listRecordsOfFlowOperationKey;\r",
															"try {\r",
															"    listRecordsOfFlowOperationKey = FindOperationKeyForOperationName(\"/v1/list-records-of-flow\", ltpList);\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(error);\r",
															"    console.log(\"! Reference objects could not be extracted.\");\r",
															"} \r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Setting Collection Variables\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    pm.collectionVariables.set(\"listRecordsOfFlowOperationKey\", listRecordsOfFlowOperationKey);\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Collection variables could not be set.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/\r",
															"function FindOperationKeyForOperationName(operationName, ltpList) {\r",
															"    let operationKey;\r",
															"    operationKey = \"\";\r",
															"    try {\r",
															"         let sampleUuid;\r",
															"         for ( let i=0; i<ltpList.length; i++) {\r",
															"            sampleUuid = ltpList[i][\"uuid\"];\r",
															"            if(sampleUuid.includes(\"op-s-\")){\r",
															"                let sampleOperationName;\r",
															"                sampleOperationName = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
															"                if(sampleOperationName == operationName) {\r",
															"                    operationKey = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
															"                    return operationKey; \r",
															"                }\r",
															"            }\r",
															"         }\r",
															"\r",
															"    } catch (error) {\r",
															"        console.log(\" ! Exception in function : FindOperationKeyForOperationName\")\r",
															"    }\r",
															"    return operationKey;\r",
															"}\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-mock-response-code",
														"value": "200",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "sampling /v1/bequeath-your-data-and-die",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"var APPLICATION;\r",
															"var OPERATION_KEY;\r",
															"var CURRENT_ORIGINATOR;\r",
															"var newApplicationName;\r",
															"var dummyNewApplicationRelease;\r",
															"var dummyApplicationProtocol;\r",
															"var dummyApplicationAddress;\r",
															"var dummyApplicationPort;\r",
															"try {\r",
															"    APPLICATION = pm.environment.get(\"application\");\r",
															"\r",
															"    let ltpList;\r",
															"    ltpList = APPLICATION[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
															"\r",
															"    CURRENT_ORIGINATOR = FindHttpServerApplicationName(ltpList);\r",
															"\r",
															"    let currentOperationServer;\r",
															"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
															"    \r",
															"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
															"\r",
															"    let newReleaseHttpClientLtp;\r",
															"    newReleaseHttpClientLtp = pm.collectionVariables.get(\"newReleaseHttpClientLtp\");\r",
															"\r",
															"    newApplicationName = newReleaseHttpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
															"\r",
															"    dummyNewApplicationRelease = RandomReleaseNumber();\r",
															"\r",
															"    let newReleaseTcpClientLtp;\r",
															"    newReleaseTcpClientLtp = pm.collectionVariables.get(\"newReleaseTcpClientLtp\");\r",
															"\r",
															"    let protocol = newReleaseTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
															"    dummyApplicationProtocol = GenerateDummyRemoteProtocol(protocol);\r",
															"    dummyApplicationProtocol = dummyApplicationProtocol.substring(('tcp-client-interface-1-0:PROTOCOL_TYPE_').length);\r",
															"\r",
															"    let dummyIpv4Address = RandomIpAddress();\r",
															"    dummyApplicationAddress = {\r",
															"        \"ip-address\": {\r",
															"            \"ipv-4-address\": dummyIpv4Address\r",
															"        }\r",
															"    };\r",
															"    dummyApplicationPort = RandomTcpPort();\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(error);\r",
															"    console.log(\"! Input Data could not be loaded.\");\r",
															"}\r",
															"\r",
															"/****************************************************************************************\r",
															"* Defining Dummy Parameters\r",
															"****************************************************************************************/\r",
															"var USER_NAME;\r",
															"var ORIGINATOR;\r",
															"var X_CORRELATOR;\r",
															"var TRACE_INDICATOR;\r",
															"var CUSTOMER_JOURNEY;\r",
															"try {\r",
															"    USER_NAME = APPLICATION.userName;\r",
															"    ORIGINATOR = \"Postman\";\r",
															"    X_CORRELATOR = CreateXCorrelator();\r",
															"    TRACE_INDICATOR = \"1\";\r",
															"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
															"    \r",
															"} catch (error) {\r",
															"    console.log(\"! Could not define dummy values for parameters. \");\r",
															"}\r",
															"\r",
															"/****************************************************************************************\r",
															"* Defining Request Body\r",
															"****************************************************************************************/\r",
															"var REQUEST_BODY;\r",
															"try {\r",
															"    REQUEST_BODY = '{'\r",
															"        + '\"new-application-name\" : ' + '\"' + newApplicationName + '\",'\r",
															"        + '\"new-application-release\" : ' + '\"' + dummyNewApplicationRelease + '\",'\r",
															"        + '\"new-application-protocol\" : ' + '\"' + dummyApplicationProtocol + '\",'\r",
															"        + '\"new-application-address\" : ' + JSON.stringify(dummyApplicationAddress) + ','\r",
															"        + '\"new-application-port\" : ' +  dummyApplicationPort\r",
															"    +'}';\r",
															"} catch (error) {\r",
															"    console.log(\"!Could not define request body. \");\r",
															"}\r",
															"/****************************************************************************************\r",
															"* Setting Collection Variables\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    pm.collectionVariables.set(\"user\", USER_NAME);\r",
															"    pm.collectionVariables.set(\"originator\", ORIGINATOR);\r",
															"    pm.collectionVariables.set(\"xCorrelator\", X_CORRELATOR);\r",
															"    pm.collectionVariables.set(\"traceIndicator\", TRACE_INDICATOR);\r",
															"    pm.collectionVariables.set(\"customerJourney\", CUSTOMER_JOURNEY);\r",
															"    pm.collectionVariables.set(\"currentOriginator\", CURRENT_ORIGINATOR);\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Collection variables could not be set.\");\r",
															"}\r",
															"\r",
															"/****************************************************************************************\r",
															"* Setting Local Variables and Preparing the Request\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    let URI;\r",
															"    URI = APPLICATION.serverUrl + \"/v1/bequeath-your-data-and-die\";\r",
															"\r",
															"    let ACCEPT;\r",
															"    ACCEPT = \"application/json\";\r",
															"\r",
															"    let CONTENT_TYPE;\r",
															"    CONTENT_TYPE = \"application/json\";\r",
															"\r",
															"    pm.variables.clear();\r",
															"\r",
															"    pm.variables.set(\"uri\", URI);\r",
															"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
															"\r",
															"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
															"\r",
															"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
															"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
															"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
															"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
															"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
															"\r",
															"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
															"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(error);\r",
															"    console.log(\"! Local variables could not be set.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/\r",
															"\r",
															"function CreateXCorrelator() {\r",
															"    let xCorrelator;\r",
															"    xCorrelator = \"\";\r",
															"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
															"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
															"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
															"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
															"    xCorrelator += GenerateRandomHexString(12);\r",
															"    return xCorrelator;\r",
															"}\r",
															"\r",
															"function GenerateRandomHexString(length) {\r",
															"    var randomRandomHexString = \"\";\r",
															"    while (randomRandomHexString.length < length) {\r",
															"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
															"    }\r",
															"    return randomRandomHexString.substring(0,length);\r",
															"}\r",
															"\r",
															"function RandomReleaseNumber() {\r",
															"    let releaseNumber;\r",
															"    let releaseNumberParts = [];\r",
															"    for  (let i=0; i<3 ; i++) {\r",
															"        releaseNumberParts[i] = Math.floor(Math.random() * 10);\r",
															"    }\r",
															"    releaseNumber = releaseNumberParts[0] + \".\" + releaseNumberParts[1] + \".\" + releaseNumberParts[2];\r",
															"    return releaseNumber;\r",
															"}\r",
															"\r",
															"function RandomIpAddress() {\r",
															"    let randomAddress\r",
															"    let addressParts = [];\r",
															"    for ( let i=0; i<4; i++ ) {\r",
															"        addressParts[i] = String(Math.floor(Math.random() * 256));\r",
															"    }\r",
															"    randomAddress = addressParts[0] + \".\" + addressParts[1] + \".\" + addressParts[2] + \".\" + addressParts[3];\r",
															"    return randomAddress;\r",
															"}\r",
															"\r",
															"function RandomTcpPort() {\r",
															"    let randomPort;\r",
															"    randomPort = 2000 + Math.floor( Math.random() * 1000 );\r",
															"    return randomPort;\r",
															"}\r",
															"\r",
															"function FindHttpServerApplicationName(ltpList) {\r",
															"    let applicationName;\r",
															"    applicationName = \"\";\r",
															"    for( let i=0; i<ltpList.length; i++ ) {\r",
															"        let sampleUuid;\r",
															"        sampleUuid = ltpList[i][\"uuid\"];\r",
															"        if(sampleUuid.includes(\"http-s-\")) {\r",
															"            applicationName = ltpList[i][\"layer-protocol\"][0][\"http-server-interface-1-0:http-server-interface-pac\"][\"http-server-interface-capability\"][\"application-name\"];\r",
															"            return applicationName;\r",
															"        }\r",
															"    }\r",
															"    return applicationName;\r",
															"}\r",
															"\r",
															"function GenerateDummyRemoteProtocol(currentProtocol) {\r",
															"    let alternativeProtocolList;\r",
															"    alternativeProtocolList = [  \"tcp-client-interface-1-0:PROTOCOL_TYPE_HTTP\",\r",
															"                                    \"tcp-client-interface-1-0:PROTOCOL_TYPE_HTTPS\"\r",
															"                                ];\r",
															"    let indexOfCurrentProtocol;\r",
															"    indexOfCurrentProtocol = alternativeProtocolList.indexOf(currentProtocol);\r",
															"    if (indexOfCurrentProtocol > -1) {\r",
															"        alternativeProtocolList.splice(indexOfCurrentProtocol, 1);\r",
															"    }\r",
															"\r",
															"    let alternativeProtocol;\r",
															"    let alternativeProtocolIndex;\r",
															"    alternativeProtocolIndex = Math.floor(Math.random() * alternativeProtocolList.length);\r",
															"    alternativeProtocol = alternativeProtocolList[alternativeProtocolIndex]; \r",
															"\r",
															"    return alternativeProtocol;\r",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Extracting Result\r",
															"****************************************************************************************/\r",
															"var RESPONSE_CODE;\r",
															"try {\r",
															"    let response;\r",
															"    response = pm.response;\r",
															"\r",
															"    RESPONSE_CODE = parseInt(response.code);\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Response Code could not be extracted.\");\r",
															"}    \r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Testing\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    pm.test(\"POST /v1/bequeath-your-data-and-die responds 204\", function () {\r",
															"        pm.expect(RESPONSE_CODE).to.equal(204);\r",
															"    });\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Testing could not be executed.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-mock-response-code",
														"value": "204",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Expected ExecutionAndTraceLog/v1/list-records-of-flow",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"var APPLICATION;\r",
															"var OPERATION_KEY;\r",
															"var applicationProtocol;\r",
															"var applicationAddress;\r",
															"var applicationPort;\r",
															"var xCorrelatorUnderTest;\r",
															"var latestMatch;\r",
															"var numberOfRecords;\r",
															"try {\r",
															"    APPLICATION = pm.environment.get(\"application\");\r",
															"\r",
															"    let executionAndTraceLogTcpClientLtp;\r",
															"    executionAndTraceLogTcpClientLtp = pm.collectionVariables.get(\"executionAndTraceLogTcpClientLtp\");\r",
															"    \r",
															"    applicationProtocol = executionAndTraceLogTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
															"    applicationProtocol = applicationProtocol.substring(('tcp-client-interface-1-0:PROTOCOL_TYPE_').length);\r",
															"    applicationAddress = executionAndTraceLogTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-address\"];\r",
															"    if(applicationAddress.hasOwnProperty(\"ip-address\")) {\r",
															"        applicationAddress = applicationAddress[\"ip-address\"][\"ipv-4-address\"];\r",
															"    } else {\r",
															"        applicationAddress = applicationAddress[\"domain-name\"];\r",
															"    }\r",
															"    applicationPort = executionAndTraceLogTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-port\"];\r",
															"\r",
															"    OPERATION_KEY = pm.collectionVariables.get(\"listRecordsOfFlowOperationKey\");\r",
															"    xCorrelatorUnderTest = pm.collectionVariables.get(\"xCorrelator\");\r",
															"    latestMatch = 0;\r",
															"    numberOfRecords = 100;\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(error)\r",
															"    console.log(\"! Input Data could not be loaded.\");\r",
															"}\r",
															"\r",
															"/****************************************************************************************\r",
															"* Defining Dummy Parameters\r",
															"****************************************************************************************/\r",
															"var USER_NAME;\r",
															"var ORIGINATOR;\r",
															"var X_CORRELATOR;\r",
															"var TRACE_INDICATOR;\r",
															"var CUSTOMER_JOURNEY;\r",
															"try {\r",
															"    USER_NAME = APPLICATION.userName;\r",
															"    ORIGINATOR = \"Postman\";\r",
															"    X_CORRELATOR = CreateXCorrelator();\r",
															"    TRACE_INDICATOR = \"1\";\r",
															"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
															"    \r",
															"} catch (error) {\r",
															"    console.log(\"! Could not define dummy values for parameters. \");\r",
															"}\r",
															"\r",
															"/****************************************************************************************\r",
															"* Defining Request Body\r",
															"****************************************************************************************/\r",
															"var REQUEST_BODY;\r",
															"try {\r",
															"    REQUEST_BODY = '{'\r",
															"                + '\"x-correlator\": \"' + xCorrelatorUnderTest +'\",'\r",
															"                + '\"latest-match\": ' + latestMatch + ','\r",
															"                + '\"number-of-records\":' + numberOfRecords\r",
															"                + '}';\r",
															"} catch (error) {\r",
															"    console.log(\"!Could not define request body. \");\r",
															"}\r",
															"\r",
															"/****************************************************************************************\r",
															"* Setting Collection Variables\r",
															"****************************************************************************************/\r",
															"/****************************************************************************************\r",
															"* Setting delay\r",
															"****************************************************************************************/\r",
															"setTimeout(function(){\r",
															"\r",
															"}, 3000);\r",
															"/****************************************************************************************\r",
															"* Setting Local Variables and Preparing the Request\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    let URI;\r",
															"    URI = applicationProtocol + \"://\" + applicationAddress + \":\" + applicationPort + \"/v1/list-records-of-flow\";\r",
															"    //URI = \"http://9d098835-4e91-48f3-9761-04a82ff2843e.mock.pstmn.io/v1/list-records-of-flow\";\r",
															"\r",
															"    let ACCEPT;\r",
															"    ACCEPT = \"application/json\";\r",
															"\r",
															"    let CONTENT_TYPE;\r",
															"    CONTENT_TYPE = \"application/json\";\r",
															"\r",
															"    pm.variables.clear();\r",
															"\r",
															"    pm.variables.set(\"uri\", URI);\r",
															"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
															"\r",
															"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
															"\r",
															"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
															"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
															"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
															"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
															"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
															"\r",
															"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
															"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(error);\r",
															"    console.log(\"! Local variables could not be set.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/\r",
															"function CreateXCorrelator() {\r",
															"    let xCorrelator;\r",
															"    xCorrelator = \"\";\r",
															"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
															"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
															"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
															"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
															"    xCorrelator += GenerateRandomHexString(12);\r",
															"    return xCorrelator;\r",
															"}\r",
															"\r",
															"function GenerateRandomHexString(length) {\r",
															"    var randomRandomHexString = \"\";\r",
															"    while (randomRandomHexString.length < length) {\r",
															"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
															"    }\r",
															"    return randomRandomHexString.substring(0, length);\r",
															"}\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"var expectedXCorrelator;\r",
															"var expectedUser;\r",
															"var expectedOriginator;\r",
															"var expectedTraceIndicator;\r",
															"var expectedApplicationName;\r",
															"var expectedReleaseNumber;\r",
															"var expectedOperationName;\r",
															"try {\r",
															"    expectedXCorrelator = pm.collectionVariables.get(\"xCorrelator\");\r",
															"    expectedUser = pm.collectionVariables.get(\"user\");\r",
															"    expectedOriginator = pm.collectionVariables.get(\"currentOriginator\");\r",
															"    expectedTraceIndicator = pm.collectionVariables.get(\"traceIndicator\");\r",
															"\r",
															"    let expectedHttpClientLtp;\r",
															"    expectedHttpClientLtp = pm.collectionVariables.get(\"applicationLayerTopologyHttpClientLtp\");\r",
															"    expectedApplicationName = expectedHttpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
															"    expectedReleaseNumber = expectedHttpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"release-number\"];\r",
															"\r",
															"    let expectedOperationClient;\r",
															"    expectedOperationClient = pm.collectionVariables.get(\"updateLtpOperationClientLtp\");\r",
															"    expectedOperationName = expectedOperationClient[\"layer-protocol\"][0][\"operation-client-interface-1-0:operation-client-interface-pac\"][\"operation-client-interface-configuration\"][\"operation-name\"];\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Could not load Input Data. \");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Extracting Result\r",
															"****************************************************************************************/\r",
															"var RESPONSE_CODE;\r",
															"var serviceRecordList;\r",
															"try {\r",
															"    let response;\r",
															"    response = pm.response;\r",
															"    \r",
															"    RESPONSE_CODE = parseInt(response.code);\r",
															"\r",
															"    if(Math.floor(RESPONSE_CODE/100) === 2) {\r",
															"        serviceRecordList = JSON.parse(response.stream);\r",
															"    }\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Response Code could not be extracted.\");\r",
															"}    \r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Testing\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    pm.test(\"POST ExecutionAndTraceLog/v1/list-records-of-flow responds 200\", function () {\r",
															"        pm.expect(RESPONSE_CODE).to.equal(200);\r",
															"    });\r",
															"\r",
															"    let foundAnEntryWithTheExpectedHeaderValuesInEatl;\r",
															"    foundAnEntryWithTheExpectedHeaderValuesInEatl = false;\r",
															"    let responseCodeofTriggeredForwarding;\r",
															"    responseCodeofTriggeredForwarding = 0;\r",
															"    for(let i=0; i<serviceRecordList.length; i++)  {\r",
															"        if( serviceRecordList[i][\"application-name\"] == expectedApplicationName\r",
															"                && serviceRecordList[i][\"release-number\"] == expectedReleaseNumber\r",
															"                && serviceRecordList[i][\"operation-name\"] == expectedOperationName\r",
															"                && serviceRecordList[i][\"x-correlator\"] == expectedXCorrelator\r",
															"                && serviceRecordList[i][\"user\"] == expectedUser\r",
															"                && serviceRecordList[i][\"originator\"] == expectedOriginator\r",
															"                && serviceRecordList[i][\"trace-indicator\"].includes(expectedTraceIndicator) ) {\r",
															"\r",
															"            foundAnEntryWithTheExpectedHeaderValuesInEatl = true;\r",
															"            responseCodeofTriggeredForwarding =  serviceRecordList[i][\"response-code\"];\r",
															"            break;\r",
															"        }\r",
															"    }\r",
															"\r",
															"    if(foundAnEntryWithTheExpectedHeaderValuesInEatl) {\r",
															"        pm.test(\"Update in LTP is successfully notified to ALT with response-code 204\", function () {\r",
															"            pm.expect(responseCodeofTriggeredForwarding).to.equal(204);        \r",
															"        });\r",
															"    } else {\r",
															"        pm.test(\"Update in LTP is successfully notified to ALT\", function () {\r",
															"            pm.expect(foundAnEntryWithTheExpectedHeaderValuesInEatl).to.be.true;        \r",
															"        });\r",
															"    }  \r",
															"\r",
															"} catch (error) {\r",
															"    console.log(error);\r",
															"    console.log(\"! Testing could not be executed.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-mock-response-code",
														"value": "200",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "initial http-c/release-number",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"var APPLICATION;\r",
															"var newReleaseHttpClientLtpUuid;\r",
															"var initialReleaseNumber;\r",
															"try {\r",
															"    APPLICATION = pm.environment.get(\"application\");\r",
															"    \r",
															"    let newReleaseHttpClientLtp;\r",
															"    newReleaseHttpClientLtp = pm.collectionVariables.get(\"newReleaseHttpClientLtp\");\r",
															"\r",
															"    newReleaseHttpClientLtpUuid = newReleaseHttpClientLtp[\"uuid\"];\r",
															"\r",
															"    initialReleaseNumber = newReleaseHttpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"release-number\"];\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Variables could not be loaded.\");\r",
															"}\r",
															"\r",
															"/****************************************************************************************\r",
															"* Setting Collection Variables\r",
															"****************************************************************************************/\r",
															"\r",
															"/****************************************************************************************\r",
															"* Setting Local Variables and Preparing the Request\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    let URI;\r",
															"    URI = APPLICATION.serverUrl \r",
															"            + \"/core-model-1-4:control-construct/logical-termination-point=\"\r",
															"            + newReleaseHttpClientLtpUuid\r",
															"            + \"/layer-protocol=0/http-client-interface-1-0:http-client-interface-pac/http-client-interface-configuration/release-number\";\r",
															"\r",
															"    let REQUEST_BODY;\r",
															"    REQUEST_BODY = '{ '\r",
															"                    +   '\"http-client-interface-1-0:release-number\": \"' + initialReleaseNumber + '\"'\r",
															"                    + ' }';\r",
															"\r",
															"    let AUTHORIZATION;\r",
															"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
															"\r",
															"    let ACCEPT;\r",
															"    ACCEPT = \"application/json\";\r",
															"\r",
															"    let CONTENT_TYPE;\r",
															"    CONTENT_TYPE = \"application/json\";\r",
															"\r",
															"\r",
															"    pm.variables.clear();\r",
															"\r",
															"    pm.variables.set(\"uri\", URI);\r",
															"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
															"\r",
															"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
															"\r",
															"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
															"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(error)\r",
															"    console.log(\"! Local variables could not be set.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-mock-response-code",
														"value": "204",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "initial newRelease/remote-protocol",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"var APPLICATION;\r",
															"var newReleaseTcpClientUuid;\r",
															"var initialReleaseRemoteProtocol;\r",
															"try {\r",
															"    APPLICATION = pm.environment.get(\"application\");\r",
															"    \r",
															"    let newReleaseTcpClientLtp;\r",
															"    newReleaseTcpClientLtp = pm.collectionVariables.get(\"newReleaseTcpClientLtp\");\r",
															"\r",
															"    newReleaseTcpClientUuid = newReleaseTcpClientLtp[\"uuid\"];\r",
															"\r",
															"    initialReleaseRemoteProtocol = newReleaseTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Variables could not be loaded.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Setting Local Variables and Preparing the Request\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    let URI;\r",
															"    URI = APPLICATION.serverUrl \r",
															"            + \"/core-model-1-4:control-construct/logical-termination-point=\" \r",
															"            + newReleaseTcpClientUuid\r",
															"            + \"/layer-protocol=0/tcp-client-interface-1-0:tcp-client-interface-pac/tcp-client-interface-configuration/remote-protocol\";\r",
															"\r",
															"    let REQUEST_BODY;\r",
															"    REQUEST_BODY = '{ '\r",
															"                    +   '\"tcp-client-interface-1-0:remote-protocol\": \"' + initialReleaseRemoteProtocol + '\"'\r",
															"                    + ' }';\r",
															"\r",
															"    let AUTHORIZATION;\r",
															"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
															"\r",
															"    let ACCEPT;\r",
															"    ACCEPT = \"application/json\";\r",
															"\r",
															"    let CONTENT_TYPE;\r",
															"    CONTENT_TYPE = \"application/json\";\r",
															"\r",
															"\r",
															"    pm.variables.clear();\r",
															"\r",
															"    pm.variables.set(\"uri\", URI);\r",
															"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
															"\r",
															"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
															"\r",
															"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
															"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(error)\r",
															"    console.log(\"! Local variables could not be set.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-mock-response-code",
														"value": "204",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "initial newRelease/remote-address",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"var APPLICATION;\r",
															"var newReleaseTcpClientUuid;\r",
															"var initialReleaseRemoteAddress;\r",
															"try {\r",
															"    APPLICATION = pm.environment.get(\"application\");\r",
															"    \r",
															"    let newReleaseTcpClientLtp;\r",
															"    newReleaseTcpClientLtp = pm.collectionVariables.get(\"newReleaseTcpClientLtp\");\r",
															"\r",
															"    newReleaseTcpClientUuid = newReleaseTcpClientLtp[\"uuid\"];\r",
															"\r",
															"    initialReleaseRemoteAddress = newReleaseTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-address\"];\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Variables could not be loaded.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Setting Local Variables and Preparing the Request\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    let URI;\r",
															"    URI = APPLICATION.serverUrl \r",
															"            + \"/core-model-1-4:control-construct/logical-termination-point=\"\r",
															"            + newReleaseTcpClientUuid\r",
															"            + \"/layer-protocol=0/tcp-client-interface-1-0:tcp-client-interface-pac/tcp-client-interface-configuration/remote-address\";\r",
															"\r",
															"    let REQUEST_BODY;\r",
															"    REQUEST_BODY = '{ '\r",
															"                    +   '\"tcp-client-interface-1-0:remote-address\": ' + JSON.stringify(initialReleaseRemoteAddress)\r",
															"                    + ' }';\r",
															"\r",
															"    let AUTHORIZATION;\r",
															"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
															"\r",
															"    let ACCEPT;\r",
															"    ACCEPT = \"application/json\";\r",
															"\r",
															"    let CONTENT_TYPE;\r",
															"    CONTENT_TYPE = \"application/json\";\r",
															"\r",
															"    pm.variables.clear();\r",
															"\r",
															"    pm.variables.set(\"uri\", URI);\r",
															"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
															"\r",
															"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
															"\r",
															"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
															"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(error)\r",
															"    console.log(\"! Local variables could not be set.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-mock-response-code",
														"value": "204",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "initial newRelease/remote-port",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"var APPLICATION;\r",
															"var newReleaseTcpClientUuid;\r",
															"var initialReleaseRemotePort;\r",
															"try {\r",
															"    APPLICATION = pm.environment.get(\"application\");\r",
															"    \r",
															"    let newReleaseTcpClientLtp;\r",
															"    newReleaseTcpClientLtp = pm.collectionVariables.get(\"newReleaseTcpClientLtp\");\r",
															"\r",
															"    newReleaseTcpClientUuid = newReleaseTcpClientLtp[\"uuid\"];\r",
															"\r",
															"    initialReleaseRemotePort = newReleaseTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-port\"];\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Variables could not be loaded.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Setting Local Variables and Preparing the Request\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    let URI;\r",
															"    URI = APPLICATION.serverUrl \r",
															"            + \"/core-model-1-4:control-construct/logical-termination-point=\" \r",
															"            + newReleaseTcpClientUuid\r",
															"            + \"/layer-protocol=0/tcp-client-interface-1-0:tcp-client-interface-pac/tcp-client-interface-configuration/remote-port\";\r",
															"\r",
															"    let REQUEST_BODY;\r",
															"    REQUEST_BODY = '{ '\r",
															"                    +   '\"tcp-client-interface-1-0:remote-port\": ' + initialReleaseRemotePort\r",
															"                    + ' }';\r",
															"\r",
															"    let AUTHORIZATION;\r",
															"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
															"\r",
															"    let ACCEPT;\r",
															"    ACCEPT = \"application/json\";\r",
															"\r",
															"    let CONTENT_TYPE;\r",
															"    CONTENT_TYPE = \"application/json\";\r",
															"\r",
															"\r",
															"    pm.variables.clear();\r",
															"\r",
															"    pm.variables.set(\"uri\", URI);\r",
															"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
															"\r",
															"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
															"\r",
															"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
															"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(error)\r",
															"    console.log(\"! Local variables could not be set.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-mock-response-code",
														"value": "204",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Check /core-model-1-4:control-construct",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"var APPLICATION;\r",
															"var AUTHORIZATION;\r",
															"try {\r",
															"    APPLICATION = pm.environment.get(\"application\");\r",
															"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
															"\r",
															"    oamPath = \"/core-model-1-4:control-construct\";\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Environment variables could not be loaded.\");\r",
															"}\r",
															"\r",
															"/****************************************************************************************\r",
															"* Defining Request Body\r",
															"****************************************************************************************/\r",
															"var REQUEST_BODY;\r",
															"try {\r",
															"    REQUEST_BODY = \"\";\r",
															"} catch (error) {\r",
															"    console.log(\"!Could not define request body. \");\r",
															"}\r",
															"\r",
															"/****************************************************************************************\r",
															"* Setting Local Variables and Preparing the Request\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    let URI;\r",
															"    URI = APPLICATION.serverUrl + oamPath;\r",
															"\r",
															"    let ACCEPT;\r",
															"    ACCEPT = \"application/json\";\r",
															"\r",
															"    let CONTENT_TYPE;\r",
															"    CONTENT_TYPE = \"application/json\";\r",
															"\r",
															"    pm.variables.clear();\r",
															"\r",
															"    pm.variables.set(\"uri\", URI);\r",
															"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
															"\r",
															"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
															"\r",
															"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
															"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Local variables could not be set.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"var expectedLogicalTerminationPoint;\r",
															"var expectedForwardingConstruct;\r",
															"try {\r",
															"    expectedLogicalTerminationPoint = pm.collectionVariables.get(\"ltpList\");\r",
															"    expectedForwardingConstruct = pm.collectionVariables.get(\"fcList\");\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Collection variables could not be loaded.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Extracting Result\r",
															"****************************************************************************************/\r",
															"var RESPONSE_CODE;\r",
															"var RESPONSE;\r",
															"try {\r",
															"    let response;\r",
															"    response = pm.response;\r",
															"\r",
															"    RESPONSE_CODE = parseInt(response.code);\r",
															"\r",
															"    if (Math.floor(RESPONSE_CODE / 100) === 2) {\r",
															"        RESPONSE = JSON.parse(response.stream);\r",
															"    } else {\r",
															"        RESPONSE = [];\r",
															"    }\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Result value lists could not be extracted.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Testing\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    pm.test(\"GET /core-model-1-4:control-construct responds 200\", function () {\r",
															"        pm.expect(RESPONSE_CODE).to.equal(200);\r",
															"    });\r",
															"\r",
															"    let actualLtpList;\r",
															"    actualLtpList = RESPONSE[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
															"\r",
															"    pm.test(\"Received logical-termination-point is same as intial instance \", function () {\r",
															"        pm.expect(actualLtpList).to.deep.equal(expectedLogicalTerminationPoint);\r",
															"    });\r",
															"\r",
															"    let actualFcList;\r",
															"    actualFcList = RESPONSE[\"core-model-1-4:control-construct\"][\"forwarding-domain\"][0][\"forwarding-construct\"];\r",
															"\r",
															"    pm.test(\"Received forwarding-construct is same as intial instance \", function () {\r",
															"        pm.expect(actualFcList).to.deep.equal(expectedForwardingConstruct);\r",
															"    });\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Testing could not be executed.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-mock-response-code",
														"value": "200",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"description": "##Gets new-application-release update trigger update-ltp to ALT?\n#### Requires:\n- ExecutionAndTraceLog/OamLog server to operate\n\n#### Preparation:\n- GETing CC (/core-model-1-4:control-construct)\n  - search CC for output fc-port of ServiceRequestCausesLoggingRequest, \nits corresponding op-c, http-c and tcp-c, storing them for later verification request \n  - searching CC for output-fc-port of ServiceRequestCausesLtpUpdateRequest, its corresponding op-c, http-c, storing them.\n  - searching CC for op-s of /v1/bequeath-your-data-and-die, storing operation-key\n  - searcing CC for output port of PromptForBequeathingDataCausesTransferOfListOfApplications, find corresponding op-c, http-c and tcp-c, store them.\n- GETting EaTL/CC (while using IP, protocol and port from above)\n  - searching CC for op-c of /v1/list-records-of-flow, storing operation-key\n- POST /v1/bequeath-your-data-and-die with\n  - new-application-name according to chosen http-c\n  - new-application-protocol, new-application-address and new-application-port with random generated dummy values (assure sufficiently high probability that set does not exist!), BUT new-application-release attribute with random dummy value that matches the specified pattern.\n  - operation-key from above\n  - reasonable parameters\n\n#### Testing:\n- POST ExecutionAndTraceLog/v1/list-records-of-flow with \n   - IP, protocol and port from above\n   - operation-key from above\n   - DummyValue of x-correlator\n   - checking response for entry with application data from ServiceRequestCausesLtpUpdateRequest\n   - checking same record for containing DummyXCorrelator &DummyTraceIndicator\n\n#### Clearing:\n- PUT NewRelease/release-number with original value\n- PUT NewRelease/release-protocol with original value\n- PUT NewRelease/remote-address with original value\n- PUT NewRelease/remote-port with original value\n\n#### Clearance check:\n- Check if the logical-termination-point instance is the same as initial configuration\n- Check if the forwarding-construct instance is the same as initial configuration"
								},
								{
									"name": "new-application-protocol update",
									"item": [
										{
											"name": "reference /core-model-1-4:control-construct",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n-----/v1/bequeath-your-data-and-die acceptance -- new-application-protocol attribute update notified to ALT -------------------------------\");\r",
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"var APPLICATION;\r",
															"try {\r",
															"    APPLICATION = pm.environment.get(\"application\");\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Environment variables could not be loaded.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Setting Local Variables and Preparing the Request\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    let URI;\r",
															"    URI = APPLICATION.serverUrl + \"/core-model-1-4:control-construct\";\r",
															"\r",
															"    let REQUEST_BODY;\r",
															"    REQUEST_BODY = \"\";\r",
															"\r",
															"    let AUTHORIZATION;\r",
															"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
															"\r",
															"    let ACCEPT;\r",
															"    ACCEPT = \"application/json\";\r",
															"\r",
															"    let CONTENT_TYPE;\r",
															"    CONTENT_TYPE = \"application/json\";\r",
															"\r",
															"\r",
															"    pm.variables.clear();\r",
															"\r",
															"    pm.variables.set(\"uri\", URI);\r",
															"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
															"\r",
															"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
															"\r",
															"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
															"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Local variables could not be set.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Extracting Result\r",
															"****************************************************************************************/\r",
															"var ltpList;\r",
															"var fcList;\r",
															"try {\r",
															"    let response;\r",
															"    response = pm.response;\r",
															"    \r",
															"    let responseCode;\r",
															"    responseCode = parseInt(response.code);\r",
															"    \r",
															"    if ( Math.floor(responseCode/100) === 2 ) {\r",
															"        let responseObject;\r",
															"        responseObject = JSON.parse(response.stream);\r",
															"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
															"        fcList = responseObject[\"core-model-1-4:control-construct\"][\"forwarding-domain\"][0][\"forwarding-construct\"];\r",
															"\r",
															"    } else {\r",
															"        ltpList = [];\r",
															"        fcList = [];\r",
															"    }\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! ltpList could not be extracted.\");\r",
															"}\r",
															"\r",
															"var currentOperationServer;\r",
															"var executionAndTraceLogHttpClientLtp;\r",
															"var executionAndTraceLogTcpClientLtp;\r",
															"var newReleaseHttpClientLtp;\r",
															"var newReleaseTcpClientLtp;\r",
															"var applicationLayerTopologyHttpClientLtp;\r",
															"var updateLtpOperationClientLtp;\r",
															"try {\r",
															"    currentOperationServer = FindOperationServer(\"/v1/bequeath-your-data-and-die\", ltpList);\r",
															"\r",
															"    //Execution And Trace Log\r",
															"    let recordServiceRequestOperationClientLtp = FindOperationClientUsingCallback(\"ServiceRequestCausesLoggingRequest\", fcList, ltpList)\r",
															"    executionAndTraceLogHttpClientLtp = FindServingLtp(recordServiceRequestOperationClientLtp, ltpList);\r",
															"    executionAndTraceLogTcpClientLtp = FindServingLtp(executionAndTraceLogHttpClientLtp, ltpList);\r",
															"\r",
															"    //Bequeath Transfer Of List Of Applications\r",
															"    let bequeathingDataCausesTransferOfListOfApplicationsOperationClientLtp = FindOperationClientUsingCallback(\"PromptForBequeathingDataCausesTransferOfListOfApplications\", fcList, ltpList)\r",
															"    newReleaseHttpClientLtp = FindServingLtp(bequeathingDataCausesTransferOfListOfApplicationsOperationClientLtp, ltpList);\r",
															"    newReleaseTcpClientLtp = FindServingLtp(newReleaseHttpClientLtp, ltpList);\r",
															"    \r",
															"    //Ltp Update Request\r",
															"    updateLtpOperationClientLtp = FindOperationClientUsingCallback(\"ServiceRequestCausesLtpUpdateRequest\", fcList, ltpList)\r",
															"    applicationLayerTopologyHttpClientLtp = FindServingLtp(updateLtpOperationClientLtp, ltpList);\r",
															"    \r",
															"} catch (error) {\r",
															"    console.log(error);\r",
															"    console.log(\"! Reference objects could not be extracted.\");\r",
															"} \r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Setting Collection Variables\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    pm.collectionVariables.clear();\r",
															"    \r",
															"    pm.collectionVariables.set(\"currentOperationServer\", currentOperationServer);\r",
															"    pm.collectionVariables.set(\"executionAndTraceLogHttpClientLtp\", executionAndTraceLogHttpClientLtp);\r",
															"    pm.collectionVariables.set(\"executionAndTraceLogTcpClientLtp\", executionAndTraceLogTcpClientLtp);\r",
															"    pm.collectionVariables.set(\"newReleaseHttpClientLtp\", newReleaseHttpClientLtp);\r",
															"    pm.collectionVariables.set(\"newReleaseTcpClientLtp\", newReleaseTcpClientLtp);\r",
															"    pm.collectionVariables.set(\"applicationLayerTopologyHttpClientLtp\", applicationLayerTopologyHttpClientLtp);\r",
															"    pm.collectionVariables.set(\"updateLtpOperationClientLtp\", updateLtpOperationClientLtp);\r",
															"    pm.collectionVariables.set(\"ltpList\", ltpList);\r",
															"    pm.collectionVariables.set(\"fcList\", fcList);\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Collection variables could not be set.\");\r",
															"}\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/\r",
															"\r",
															"function FindOperationServer(operationName, ltpList) {\r",
															"    let operationServer;\r",
															"    operationServer = \"\";\r",
															"    try {\r",
															"        let sampleUuid;\r",
															"        for(let i=0; i<ltpList.length; i++) {\r",
															"            sampleUuid = ltpList[i][\"uuid\"];\r",
															"            if(sampleUuid.includes(\"op-s-\")) {\r",
															"                let sampleOperationName;\r",
															"                sampleOperationName = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
															"                if(sampleOperationName == operationName) {\r",
															"                    operationServer = ltpList[i];\r",
															"                    return operationServer;\r",
															"                }\r",
															"            }\r",
															"        }\r",
															"    } catch (error) {\r",
															"        console.log(\"! Exception in function : FindOperationServer. \");\r",
															"    }\r",
															"    return operationServer;\r",
															"}\r",
															"\r",
															"function FindOutputFcPortList(forwardingName, fcList) {\r",
															"    let outputFcPortList;\r",
															"    outputFcPortList = [];\r",
															"    try {\r",
															"        for( let i=0; i<fcList.length; i++ ) {\r",
															"            for(let j=0; j<fcList[i][\"name\"].length; j++) {               \r",
															"                if(fcList[i][\"name\"][j][\"value\"] == forwardingName) {\r",
															"                    fcPortList = fcList[i][\"fc-port\"];\r",
															"                    for(let k=0;k<fcPortList.length;k++) {\r",
															"                        if(fcPortList[k][\"port-direction\"] == \"core-model-1-4:PORT_DIRECTION_TYPE_OUTPUT\") {\r",
															"                            outputFcPortList.push(fcPortList[k]);\r",
															"                        }\r",
															"                    }\r",
															"                    return outputFcPortList;\r",
															"                }\r",
															"            }\r",
															"        }\r",
															"    } catch (error) {\r",
															"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
															"    }\r",
															"    return outputFcPortList;\r",
															"}\r",
															"\r",
															"function FindActualInstanceByUuid(expectedUuid, actualLtpList) {\r",
															"    let actualInstance;\r",
															"    actualInstance = {};\r",
															"    try {\r",
															"        for ( let i=0; i<actualLtpList.length; i++ ) {\r",
															"            let sampleUuid;\r",
															"            sampleUuid = actualLtpList[i][\"uuid\"];\r",
															"            if( sampleUuid == expectedUuid ) {\r",
															"                actualInstance = actualLtpList[i];\r",
															"                return actualInstance;\r",
															"            }\r",
															"        }\r",
															"\r",
															"    } catch (error) {\r",
															"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
															"    }\r",
															"    return undefined;\r",
															"}\r",
															"\r",
															"function FindServingLtp(clientLtp, ltpList) {\r",
															"    let servingLtp;\r",
															"    servingLtp = {};\r",
															"    try{\r",
															"        let serverLtpUuid;\r",
															"        serverLtpUuid = clientLtp[\"server-ltp\"][0];\r",
															"        for( let i=0; i<ltpList.length; i++ ) {\r",
															"            let sampleUuid;\r",
															"            sampleUuid = ltpList[i][\"uuid\"];\r",
															"            if( sampleUuid == serverLtpUuid ) {\r",
															"                servingLtp = ltpList[i];\r",
															"                return servingLtp;\r",
															"            }\r",
															"        }\r",
															"    } catch(error) {\r",
															"        console.log(error);\r",
															"        console.log(\"! Exception in function : FindServingLtp. \")\r",
															"    }\r",
															"    return servingLtp;\r",
															"}\r",
															"\r",
															"function FindOperationClientUsingCallback(callback, fcList, ltpList) {\r",
															"    let operationClientLtp\r",
															"    try {\r",
															"        let outputFcPortList = FindOutputFcPortList(callback, fcList);\r",
															"        let randomOutputFcPort = outputFcPortList[Math.floor(Math.random() * outputFcPortList.length)];\r",
															"        let outputLtpUuid = randomOutputFcPort[\"logical-termination-point\"];\r",
															"        operationClientLtp = FindActualInstanceByUuid(outputLtpUuid, ltpList);\r",
															"    } catch (error) {\r",
															"        console.log(error);\r",
															"        console.log(\"! Exception in function FindOperationClientUsingCallback. \");\r",
															"    }\r",
															"    return  operationClientLtp\r",
															"}\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "x-mock-response-code",
														"value": "200",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "reference ExecutionAndTraceLog/core-model-1-4:control-construct",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"var APPLICATION;\r",
															"var AUTHORIZATION;\r",
															"var applicationProtocol;\r",
															"var applicationAddress;\r",
															"var applicationPort;\r",
															"try {\r",
															"    APPLICATION = pm.environment.get(\"application\");\r",
															"\r",
															"    let executionAndTraceLogTcpClientLtp;\r",
															"    executionAndTraceLogTcpClientLtp = pm.collectionVariables.get(\"executionAndTraceLogTcpClientLtp\");\r",
															"\r",
															"    applicationProtocol = executionAndTraceLogTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
															"    applicationProtocol = applicationProtocol.substring(('tcp-client-interface-1-0:PROTOCOL_TYPE_').length);\r",
															"    applicationAddress = executionAndTraceLogTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-address\"];\r",
															"    if(applicationAddress.hasOwnProperty(\"ip-address\")) {\r",
															"        applicationAddress = applicationAddress[\"ip-address\"][\"ipv-4-address\"];\r",
															"    } else {\r",
															"        applicationAddress = applicationAddress[\"domain-name\"];\r",
															"    }\r",
															"    applicationPort = executionAndTraceLogTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-port\"];\r",
															" \r",
															"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Environment variables could not be loaded.\");\r",
															"}\r",
															"\r",
															"/****************************************************************************************\r",
															"* Defining Request Body\r",
															"****************************************************************************************/\r",
															"var REQUEST_BODY;\r",
															"try {\r",
															"    REQUEST_BODY = \"\";\r",
															"} catch (error) {\r",
															"    console.log(\"!Could not define request body. \");\r",
															"}\r",
															"\r",
															"/****************************************************************************************\r",
															"* Setting Local Variables and Preparing the Request\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    let URI;\r",
															"    URI = applicationProtocol + \"://\" + applicationAddress + \":\" + applicationPort + \"/core-model-1-4:control-construct\";\r",
															"    //URI = \"http://9d098835-4e91-48f3-9761-04a82ff2843e.mock.pstmn.io\" + \"/core-model-1-4:control-construct\";\r",
															"\r",
															"    let ACCEPT;\r",
															"    ACCEPT = \"application/json\";\r",
															"\r",
															"    let CONTENT_TYPE;\r",
															"    CONTENT_TYPE = \"application/json\";\r",
															"\r",
															"    pm.variables.clear();\r",
															"\r",
															"    pm.variables.set(\"uri\", URI);\r",
															"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
															"\r",
															"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
															"\r",
															"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
															"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Local variables could not be set.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Extracting Result\r",
															"****************************************************************************************/\r",
															"var ltpList;\r",
															"try {\r",
															"    let response;\r",
															"    response = pm.response;\r",
															"    \r",
															"    let responseCode;\r",
															"    responseCode = parseInt(response.code);\r",
															"    \r",
															"    if ( Math.floor(responseCode/100) === 2 ) {\r",
															"        let responseObject;\r",
															"        responseObject = JSON.parse(response.stream);\r",
															"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
															"\r",
															"    } else {\r",
															"        ltpList = [];\r",
															"    }\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! ltpList could not be extracted.\");\r",
															"}\r",
															"\r",
															"var listRecordsOfFlowOperationKey;\r",
															"try {\r",
															"    listRecordsOfFlowOperationKey = FindOperationKeyForOperationName(\"/v1/list-records-of-flow\", ltpList);\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(error);\r",
															"    console.log(\"! Reference objects could not be extracted.\");\r",
															"} \r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Setting Collection Variables\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    pm.collectionVariables.set(\"listRecordsOfFlowOperationKey\", listRecordsOfFlowOperationKey);\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Collection variables could not be set.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/\r",
															"function FindOperationKeyForOperationName(operationName, ltpList) {\r",
															"    let operationKey;\r",
															"    operationKey = \"\";\r",
															"    try {\r",
															"         let sampleUuid;\r",
															"         for ( let i=0; i<ltpList.length; i++) {\r",
															"            sampleUuid = ltpList[i][\"uuid\"];\r",
															"            if(sampleUuid.includes(\"op-s-\")){\r",
															"                let sampleOperationName;\r",
															"                sampleOperationName = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
															"                if(sampleOperationName == operationName) {\r",
															"                    operationKey = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
															"                    return operationKey; \r",
															"                }\r",
															"            }\r",
															"         }\r",
															"\r",
															"    } catch (error) {\r",
															"        console.log(\" ! Exception in function : FindOperationKeyForOperationName\")\r",
															"    }\r",
															"    return operationKey;\r",
															"}\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-mock-response-code",
														"value": "200",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "sampling /v1/bequeath-your-data-and-die",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"var APPLICATION;\r",
															"var OPERATION_KEY;\r",
															"var CURRENT_ORIGINATOR;\r",
															"var newApplicationName;\r",
															"var newApplicationRelease;\r",
															"var dummyApplicationProtocol;\r",
															"var newApplicationAddress;\r",
															"var newApplicationPort;\r",
															"try {\r",
															"    APPLICATION = pm.environment.get(\"application\");\r",
															"\r",
															"    let ltpList;\r",
															"    ltpList = APPLICATION[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
															"\r",
															"    CURRENT_ORIGINATOR = FindHttpServerApplicationName(ltpList);\r",
															"\r",
															"    let currentOperationServer;\r",
															"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
															"    \r",
															"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
															"\r",
															"    let newReleaseHttpClientLtp;\r",
															"    newReleaseHttpClientLtp = pm.collectionVariables.get(\"newReleaseHttpClientLtp\");\r",
															"\r",
															"    newApplicationName = newReleaseHttpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
															"\r",
															"    newApplicationRelease = newReleaseHttpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"release-number\"];\r",
															"\r",
															"    let newReleaseTcpClientLtp;\r",
															"    newReleaseTcpClientLtp = pm.collectionVariables.get(\"newReleaseTcpClientLtp\");\r",
															"\r",
															"    let protocol = newReleaseTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
															"    dummyApplicationProtocol = GenerateDummyRemoteProtocol(protocol);\r",
															"    dummyApplicationProtocol = dummyApplicationProtocol.substring(('tcp-client-interface-1-0:PROTOCOL_TYPE_').length);\r",
															"    \r",
															"    newApplicationAddress = newReleaseTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-address\"];\r",
															"\r",
															"    newApplicationPort = newReleaseTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-port\"];\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(error);\r",
															"    console.log(\"! Input Data could not be loaded.\");\r",
															"}\r",
															"\r",
															"/****************************************************************************************\r",
															"* Defining Dummy Parameters\r",
															"****************************************************************************************/\r",
															"var USER_NAME;\r",
															"var ORIGINATOR;\r",
															"var X_CORRELATOR;\r",
															"var TRACE_INDICATOR;\r",
															"var CUSTOMER_JOURNEY;\r",
															"try {\r",
															"    USER_NAME = APPLICATION.userName;\r",
															"    ORIGINATOR = \"Postman\";\r",
															"    X_CORRELATOR = CreateXCorrelator();\r",
															"    TRACE_INDICATOR = \"1\";\r",
															"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
															"    \r",
															"} catch (error) {\r",
															"    console.log(\"! Could not define dummy values for parameters. \");\r",
															"}\r",
															"\r",
															"/****************************************************************************************\r",
															"* Defining Request Body\r",
															"****************************************************************************************/\r",
															"var REQUEST_BODY;\r",
															"try {\r",
															"    REQUEST_BODY = '{'\r",
															"        + '\"new-application-name\" : ' + '\"' + newApplicationName + '\",'\r",
															"        + '\"new-application-release\" : ' + '\"' + newApplicationRelease + '\",'\r",
															"        + '\"new-application-protocol\" : ' + '\"' + dummyApplicationProtocol + '\",'\r",
															"        + '\"new-application-address\" : ' + JSON.stringify(newApplicationAddress) + ','\r",
															"        + '\"new-application-port\" : ' +  newApplicationPort\r",
															"    +'}';\r",
															"} catch (error) {\r",
															"    console.log(\"!Could not define request body. \");\r",
															"}\r",
															"/****************************************************************************************\r",
															"* Setting Collection Variables\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    pm.collectionVariables.set(\"user\", USER_NAME);\r",
															"    pm.collectionVariables.set(\"originator\", ORIGINATOR);\r",
															"    pm.collectionVariables.set(\"xCorrelator\", X_CORRELATOR);\r",
															"    pm.collectionVariables.set(\"traceIndicator\", TRACE_INDICATOR);\r",
															"    pm.collectionVariables.set(\"customerJourney\", CUSTOMER_JOURNEY);\r",
															"    pm.collectionVariables.set(\"currentOriginator\", CURRENT_ORIGINATOR);\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Collection variables could not be set.\");\r",
															"}\r",
															"\r",
															"/****************************************************************************************\r",
															"* Setting Local Variables and Preparing the Request\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    let URI;\r",
															"    URI = APPLICATION.serverUrl + \"/v1/bequeath-your-data-and-die\";\r",
															"\r",
															"    let ACCEPT;\r",
															"    ACCEPT = \"application/json\";\r",
															"\r",
															"    let CONTENT_TYPE;\r",
															"    CONTENT_TYPE = \"application/json\";\r",
															"\r",
															"    pm.variables.clear();\r",
															"\r",
															"    pm.variables.set(\"uri\", URI);\r",
															"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
															"\r",
															"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
															"\r",
															"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
															"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
															"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
															"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
															"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
															"\r",
															"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
															"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(error);\r",
															"    console.log(\"! Local variables could not be set.\");\r",
															"}\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/\r",
															"\r",
															"function CreateXCorrelator() {\r",
															"    let xCorrelator;\r",
															"    xCorrelator = \"\";\r",
															"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
															"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
															"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
															"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
															"    xCorrelator += GenerateRandomHexString(12);\r",
															"    return xCorrelator;\r",
															"}\r",
															"\r",
															"function GenerateRandomHexString(length) {\r",
															"    var randomRandomHexString = \"\";\r",
															"    while (randomRandomHexString.length < length) {\r",
															"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
															"    }\r",
															"    return randomRandomHexString.substring(0,length);\r",
															"}\r",
															"\r",
															"\r",
															"function GenerateDummyRemoteProtocol(currentProtocol) {\r",
															"    let alternativeProtocolList;\r",
															"    alternativeProtocolList = [  \"tcp-client-interface-1-0:PROTOCOL_TYPE_HTTP\",\r",
															"                                    \"tcp-client-interface-1-0:PROTOCOL_TYPE_HTTPS\"\r",
															"                                ];\r",
															"    let indexOfCurrentProtocol;\r",
															"    indexOfCurrentProtocol = alternativeProtocolList.indexOf(currentProtocol);\r",
															"    if (indexOfCurrentProtocol > -1) {\r",
															"        alternativeProtocolList.splice(indexOfCurrentProtocol, 1);\r",
															"    }\r",
															"\r",
															"    let alternativeProtocol;\r",
															"    let alternativeProtocolIndex;\r",
															"    alternativeProtocolIndex = Math.floor(Math.random() * alternativeProtocolList.length);\r",
															"    alternativeProtocol = alternativeProtocolList[alternativeProtocolIndex]; \r",
															"\r",
															"    return alternativeProtocol;\r",
															"}\r",
															"\r",
															"\r",
															"function FindHttpServerApplicationName(ltpList) {\r",
															"    let applicationName;\r",
															"    applicationName = \"\";\r",
															"    for( let i=0; i<ltpList.length; i++ ) {\r",
															"        let sampleUuid;\r",
															"        sampleUuid = ltpList[i][\"uuid\"];\r",
															"        if(sampleUuid.includes(\"http-s-\")) {\r",
															"            applicationName = ltpList[i][\"layer-protocol\"][0][\"http-server-interface-1-0:http-server-interface-pac\"][\"http-server-interface-capability\"][\"application-name\"];\r",
															"            return applicationName;\r",
															"        }\r",
															"    }\r",
															"    return applicationName;\r",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Extracting Result\r",
															"****************************************************************************************/\r",
															"var RESPONSE_CODE;\r",
															"try {\r",
															"    let response;\r",
															"    response = pm.response;\r",
															"\r",
															"    RESPONSE_CODE = parseInt(response.code);\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Response Code could not be extracted.\");\r",
															"}    \r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Testing\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    pm.test(\"POST /v1/bequeath-your-data-and-die responds 204\", function () {\r",
															"        pm.expect(RESPONSE_CODE).to.equal(204);\r",
															"    });\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Testing could not be executed.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-mock-response-code",
														"value": "204",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Expected ExecutionAndTraceLog/v1/list-records-of-flow",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"var APPLICATION;\r",
															"var OPERATION_KEY;\r",
															"var applicationProtocol;\r",
															"var applicationAddress;\r",
															"var applicationPort;\r",
															"var xCorrelatorUnderTest;\r",
															"var latestMatch;\r",
															"var numberOfRecords;\r",
															"try {\r",
															"    APPLICATION = pm.environment.get(\"application\");\r",
															"\r",
															"    let executionAndTraceLogTcpClientLtp;\r",
															"    executionAndTraceLogTcpClientLtp = pm.collectionVariables.get(\"executionAndTraceLogTcpClientLtp\");\r",
															"    \r",
															"    applicationProtocol = executionAndTraceLogTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
															"    applicationProtocol = applicationProtocol.substring(('tcp-client-interface-1-0:PROTOCOL_TYPE_').length);\r",
															"    applicationAddress = executionAndTraceLogTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-address\"];\r",
															"    if(applicationAddress.hasOwnProperty(\"ip-address\")) {\r",
															"        applicationAddress = applicationAddress[\"ip-address\"][\"ipv-4-address\"];\r",
															"    } else {\r",
															"        applicationAddress = applicationAddress[\"domain-name\"];\r",
															"    }\r",
															"    applicationPort = executionAndTraceLogTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-port\"];\r",
															"\r",
															"    OPERATION_KEY = pm.collectionVariables.get(\"listRecordsOfFlowOperationKey\");\r",
															"    xCorrelatorUnderTest = pm.collectionVariables.get(\"xCorrelator\");\r",
															"    latestMatch = 0;\r",
															"    numberOfRecords = 100;\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(error)\r",
															"    console.log(\"! Input Data could not be loaded.\");\r",
															"}\r",
															"\r",
															"/****************************************************************************************\r",
															"* Defining Dummy Parameters\r",
															"****************************************************************************************/\r",
															"var USER_NAME;\r",
															"var ORIGINATOR;\r",
															"var X_CORRELATOR;\r",
															"var TRACE_INDICATOR;\r",
															"var CUSTOMER_JOURNEY;\r",
															"try {\r",
															"    USER_NAME = APPLICATION.userName;\r",
															"    ORIGINATOR = \"Postman\";\r",
															"    X_CORRELATOR = CreateXCorrelator();\r",
															"    TRACE_INDICATOR = \"1\";\r",
															"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
															"    \r",
															"} catch (error) {\r",
															"    console.log(\"! Could not define dummy values for parameters. \");\r",
															"}\r",
															"\r",
															"/****************************************************************************************\r",
															"* Defining Request Body\r",
															"****************************************************************************************/\r",
															"var REQUEST_BODY;\r",
															"try {\r",
															"    REQUEST_BODY = '{'\r",
															"                + '\"x-correlator\": \"' + xCorrelatorUnderTest +'\",'\r",
															"                + '\"latest-match\": ' + latestMatch + ','\r",
															"                + '\"number-of-records\":' + numberOfRecords\r",
															"                + '}';\r",
															"} catch (error) {\r",
															"    console.log(\"!Could not define request body. \");\r",
															"}\r",
															"\r",
															"/****************************************************************************************\r",
															"* Setting Collection Variables\r",
															"****************************************************************************************/\r",
															"/****************************************************************************************\r",
															"* Setting delay\r",
															"****************************************************************************************/\r",
															"setTimeout(function(){\r",
															"\r",
															"}, 3000);\r",
															"/****************************************************************************************\r",
															"* Setting Local Variables and Preparing the Request\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    let URI;\r",
															"    URI = applicationProtocol + \"://\" + applicationAddress + \":\" + applicationPort + \"/v1/list-records-of-flow\";\r",
															"    //URI = \"http://9d098835-4e91-48f3-9761-04a82ff2843e.mock.pstmn.io/v1/list-records-of-flow\";\r",
															"\r",
															"    let ACCEPT;\r",
															"    ACCEPT = \"application/json\";\r",
															"\r",
															"    let CONTENT_TYPE;\r",
															"    CONTENT_TYPE = \"application/json\";\r",
															"\r",
															"    pm.variables.clear();\r",
															"\r",
															"    pm.variables.set(\"uri\", URI);\r",
															"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
															"\r",
															"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
															"\r",
															"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
															"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
															"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
															"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
															"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
															"\r",
															"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
															"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(error);\r",
															"    console.log(\"! Local variables could not be set.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/\r",
															"function CreateXCorrelator() {\r",
															"    let xCorrelator;\r",
															"    xCorrelator = \"\";\r",
															"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
															"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
															"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
															"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
															"    xCorrelator += GenerateRandomHexString(12);\r",
															"    return xCorrelator;\r",
															"}\r",
															"\r",
															"function GenerateRandomHexString(length) {\r",
															"    var randomRandomHexString = \"\";\r",
															"    while (randomRandomHexString.length < length) {\r",
															"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
															"    }\r",
															"    return randomRandomHexString.substring(0, length);\r",
															"}\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"var expectedXCorrelator;\r",
															"var expectedUser;\r",
															"var expectedOriginator;\r",
															"var expectedTraceIndicator;\r",
															"var expectedApplicationName;\r",
															"var expectedReleaseNumber;\r",
															"var expectedOperationName;\r",
															"try {\r",
															"    expectedXCorrelator = pm.collectionVariables.get(\"xCorrelator\");\r",
															"    expectedUser = pm.collectionVariables.get(\"user\");\r",
															"    expectedOriginator = pm.collectionVariables.get(\"currentOriginator\");\r",
															"    expectedTraceIndicator = pm.collectionVariables.get(\"traceIndicator\");\r",
															"\r",
															"    let expectedHttpClientLtp;\r",
															"    expectedHttpClientLtp = pm.collectionVariables.get(\"applicationLayerTopologyHttpClientLtp\");\r",
															"    expectedApplicationName = expectedHttpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
															"    expectedReleaseNumber = expectedHttpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"release-number\"];\r",
															"\r",
															"    let expectedOperationClient;\r",
															"    expectedOperationClient = pm.collectionVariables.get(\"updateLtpOperationClientLtp\");\r",
															"    expectedOperationName = expectedOperationClient[\"layer-protocol\"][0][\"operation-client-interface-1-0:operation-client-interface-pac\"][\"operation-client-interface-configuration\"][\"operation-name\"];\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Could not load Input Data. \");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Extracting Result\r",
															"****************************************************************************************/\r",
															"var RESPONSE_CODE;\r",
															"var serviceRecordList;\r",
															"try {\r",
															"    let response;\r",
															"    response = pm.response;\r",
															"    \r",
															"    RESPONSE_CODE = parseInt(response.code);\r",
															"\r",
															"    if(Math.floor(RESPONSE_CODE/100) === 2) {\r",
															"        serviceRecordList = JSON.parse(response.stream);\r",
															"    }\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Response Code could not be extracted.\");\r",
															"}    \r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Testing\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    pm.test(\"POST ExecutionAndTraceLog/v1/list-records-of-flow responds 200\", function () {\r",
															"        pm.expect(RESPONSE_CODE).to.equal(200);\r",
															"    });\r",
															"\r",
															"    let foundAnEntryWithTheExpectedHeaderValuesInEatl;\r",
															"    foundAnEntryWithTheExpectedHeaderValuesInEatl = false;\r",
															"    let responseCodeofTriggeredForwarding;\r",
															"    responseCodeofTriggeredForwarding = 0;\r",
															"    for(let i=0; i<serviceRecordList.length; i++)  {\r",
															"        if( serviceRecordList[i][\"application-name\"] == expectedApplicationName\r",
															"                && serviceRecordList[i][\"release-number\"] == expectedReleaseNumber\r",
															"                && serviceRecordList[i][\"operation-name\"] == expectedOperationName\r",
															"                && serviceRecordList[i][\"x-correlator\"] == expectedXCorrelator\r",
															"                && serviceRecordList[i][\"user\"] == expectedUser\r",
															"                && serviceRecordList[i][\"originator\"] == expectedOriginator\r",
															"                && serviceRecordList[i][\"trace-indicator\"].includes(expectedTraceIndicator) ) {\r",
															"\r",
															"            foundAnEntryWithTheExpectedHeaderValuesInEatl = true;\r",
															"            responseCodeofTriggeredForwarding =  serviceRecordList[i][\"response-code\"];\r",
															"            break;\r",
															"        }\r",
															"    }\r",
															"\r",
															"    if(foundAnEntryWithTheExpectedHeaderValuesInEatl) {\r",
															"        pm.test(\"protocol Update in LTP is successfully notified to ALT with response-code 204\", function () {\r",
															"            pm.expect(responseCodeofTriggeredForwarding).to.equal(204);        \r",
															"        });\r",
															"    } else {\r",
															"        pm.test(\"protocol Update in LTP is successfully notified to ALT\", function () {\r",
															"            pm.expect(foundAnEntryWithTheExpectedHeaderValuesInEatl).to.be.true;        \r",
															"        });\r",
															"    }  \r",
															"\r",
															"} catch (error) {\r",
															"    console.log(error);\r",
															"    console.log(\"! Testing could not be executed.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-mock-response-code",
														"value": "200",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "initial newRelease/remote-protocol",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"var APPLICATION;\r",
															"var newReleaseTcpClientUuid;\r",
															"var initialReleaseRemoteProtocol;\r",
															"try {\r",
															"    APPLICATION = pm.environment.get(\"application\");\r",
															"    \r",
															"    let newReleaseTcpClientLtp;\r",
															"    newReleaseTcpClientLtp = pm.collectionVariables.get(\"newReleaseTcpClientLtp\");\r",
															"\r",
															"    newReleaseTcpClientUuid = newReleaseTcpClientLtp[\"uuid\"];\r",
															"\r",
															"    initialReleaseRemoteProtocol = newReleaseTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Variables could not be loaded.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Setting Local Variables and Preparing the Request\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    let URI;\r",
															"    URI = APPLICATION.serverUrl \r",
															"            + \"/core-model-1-4:control-construct/logical-termination-point=\" \r",
															"            + newReleaseTcpClientUuid\r",
															"            + \"/layer-protocol=0/tcp-client-interface-1-0:tcp-client-interface-pac/tcp-client-interface-configuration/remote-protocol\";\r",
															"\r",
															"    let REQUEST_BODY;\r",
															"    REQUEST_BODY = '{ '\r",
															"                    +   '\"tcp-client-interface-1-0:remote-protocol\": \"' + initialReleaseRemoteProtocol + '\"'\r",
															"                    + ' }';\r",
															"\r",
															"    let AUTHORIZATION;\r",
															"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
															"\r",
															"    let ACCEPT;\r",
															"    ACCEPT = \"application/json\";\r",
															"\r",
															"    let CONTENT_TYPE;\r",
															"    CONTENT_TYPE = \"application/json\";\r",
															"\r",
															"\r",
															"    pm.variables.clear();\r",
															"\r",
															"    pm.variables.set(\"uri\", URI);\r",
															"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
															"\r",
															"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
															"\r",
															"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
															"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(error)\r",
															"    console.log(\"! Local variables could not be set.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-mock-response-code",
														"value": "204",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Check /core-model-1-4:control-construct",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"var APPLICATION;\r",
															"var AUTHORIZATION;\r",
															"try {\r",
															"    APPLICATION = pm.environment.get(\"application\");\r",
															"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
															"\r",
															"    oamPath = \"/core-model-1-4:control-construct\";\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Environment variables could not be loaded.\");\r",
															"}\r",
															"\r",
															"/****************************************************************************************\r",
															"* Defining Request Body\r",
															"****************************************************************************************/\r",
															"var REQUEST_BODY;\r",
															"try {\r",
															"    REQUEST_BODY = \"\";\r",
															"} catch (error) {\r",
															"    console.log(\"!Could not define request body. \");\r",
															"}\r",
															"\r",
															"/****************************************************************************************\r",
															"* Setting Local Variables and Preparing the Request\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    let URI;\r",
															"    URI = APPLICATION.serverUrl + oamPath;\r",
															"\r",
															"    let ACCEPT;\r",
															"    ACCEPT = \"application/json\";\r",
															"\r",
															"    let CONTENT_TYPE;\r",
															"    CONTENT_TYPE = \"application/json\";\r",
															"\r",
															"    pm.variables.clear();\r",
															"\r",
															"    pm.variables.set(\"uri\", URI);\r",
															"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
															"\r",
															"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
															"\r",
															"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
															"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Local variables could not be set.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"var expectedLogicalTerminationPoint;\r",
															"var expectedForwardingConstruct;\r",
															"try {\r",
															"    expectedLogicalTerminationPoint = pm.collectionVariables.get(\"ltpList\");\r",
															"    expectedForwardingConstruct = pm.collectionVariables.get(\"fcList\");\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Collection variables could not be loaded.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Extracting Result\r",
															"****************************************************************************************/\r",
															"var RESPONSE_CODE;\r",
															"var RESPONSE;\r",
															"try {\r",
															"    let response;\r",
															"    response = pm.response;\r",
															"\r",
															"    RESPONSE_CODE = parseInt(response.code);\r",
															"\r",
															"    if (Math.floor(RESPONSE_CODE / 100) === 2) {\r",
															"        RESPONSE = JSON.parse(response.stream);\r",
															"    } else {\r",
															"        RESPONSE = [];\r",
															"    }\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Result value lists could not be extracted.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Testing\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    pm.test(\"GET /core-model-1-4:control-construct responds 200\", function () {\r",
															"        pm.expect(RESPONSE_CODE).to.equal(200);\r",
															"    });\r",
															"\r",
															"    let actualLtpList;\r",
															"    actualLtpList = RESPONSE[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
															"\r",
															"    pm.test(\"Received logical-termination-point is same as intial instance \", function () {\r",
															"        pm.expect(actualLtpList).to.deep.equal(expectedLogicalTerminationPoint);\r",
															"    });\r",
															"\r",
															"    let actualFcList;\r",
															"    actualFcList = RESPONSE[\"core-model-1-4:control-construct\"][\"forwarding-domain\"][0][\"forwarding-construct\"];\r",
															"\r",
															"    pm.test(\"Received forwarding-construct is same as intial instance \", function () {\r",
															"        pm.expect(actualFcList).to.deep.equal(expectedForwardingConstruct);\r",
															"    });\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Testing could not be executed.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-mock-response-code",
														"value": "200",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"description": "##Gets new-application-protocol update trigger update-ltp to ALT?\n#### Requires:\n- ExecutionAndTraceLog/OamLog server to operate\n\n#### Preparation:\n- GETing CC (/core-model-1-4:control-construct)\n  - search CC for output fc-port of ServiceRequestCausesLoggingRequest, \nits corresponding op-c, http-c and tcp-c, storing them for later verification request. \n  - searching CC for output-fc-port of ServiceRequestCausesLtpUpdateRequest, its corresponding op-c, http-c, storing them.\n  - searching CC for op-s of /v1/bequeath-your-data-and-die, storing operation-key\n  - searcing CC for output port of PromptForBequeathingDataCausesTransferOfListOfApplications, find corresponding op-c, http-c and tcp-c, store them.\n- GETting EaTL/CC (while using IP, protocol and port from above)\n  - searching CC for op-c of /v1/list-records-of-flow, storing operation-key\n- POST /v1/bequeath-your-data-and-die with\n  - new-application-name and new-application-release attribute according to chosen http-c\n  -  new-application-protocol with random generated value as per the spec\n  - new-application-port, new-application-address according to chosen tcp-c\n  - operation-key from above\n  - reasonable parameters\n\n#### Testing:\n- POST ExecutionAndTraceLog/v1/list-records-of-flow with \n   - IP, protocol and port from above\n   - operation-key from above\n   - DummyValue of x-correlator\n   - checking response for entry with application data from ServiceRequestCausesLtpUpdateRequest\n   - checking same record for containing DummyXCorrelator &DummyTraceIndicator\n\n#### Clearing:\n- PUT NewRelease/remote-protocol with original value\n\n#### Clearance check:\n- Check if the logical-termination-point instance is the same as initial configuration\n- Check if the forwarding-construct instance is the same as initial configuration"
								},
								{
									"name": "new-application-address update",
									"item": [
										{
											"name": "ipv-4-address update",
											"item": [
												{
													"name": "reference /core-model-1-4:control-construct",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"console.log(\"\\n-----/v1/bequeath-your-data-and-die acceptance -- new-application-address/ipv-4-address attribute update notified to ALT -------------------------------\");\r",
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Environment variables could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/core-model-1-4:control-construct\";\r",
																	"\r",
																	"    let REQUEST_BODY;\r",
																	"    REQUEST_BODY = \"\";\r",
																	"\r",
																	"    let AUTHORIZATION;\r",
																	"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var ltpList;\r",
																	"var fcList;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"    \r",
																	"    let responseCode;\r",
																	"    responseCode = parseInt(response.code);\r",
																	"    \r",
																	"    if ( Math.floor(responseCode/100) === 2 ) {\r",
																	"        let responseObject;\r",
																	"        responseObject = JSON.parse(response.stream);\r",
																	"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																	"        fcList = responseObject[\"core-model-1-4:control-construct\"][\"forwarding-domain\"][0][\"forwarding-construct\"];\r",
																	"\r",
																	"    } else {\r",
																	"        ltpList = [];\r",
																	"        fcList = [];\r",
																	"    }\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! ltpList could not be extracted.\");\r",
																	"}\r",
																	"\r",
																	"var currentOperationServer;\r",
																	"var executionAndTraceLogHttpClientLtp;\r",
																	"var executionAndTraceLogTcpClientLtp;\r",
																	"var newReleaseHttpClientLtp;\r",
																	"var newReleaseTcpClientLtp;\r",
																	"var applicationLayerTopologyHttpClientLtp;\r",
																	"var updateLtpOperationClientLtp;\r",
																	"try {\r",
																	"    currentOperationServer = FindOperationServer(\"/v1/bequeath-your-data-and-die\", ltpList);\r",
																	"\r",
																	"    //Execution And Trace Log\r",
																	"    let recordServiceRequestOperationClientLtp = FindOperationClientUsingCallback(\"ServiceRequestCausesLoggingRequest\", fcList, ltpList)\r",
																	"    executionAndTraceLogHttpClientLtp = FindServingLtp(recordServiceRequestOperationClientLtp, ltpList);\r",
																	"    executionAndTraceLogTcpClientLtp = FindServingLtp(executionAndTraceLogHttpClientLtp, ltpList);\r",
																	"\r",
																	"    //Bequeath Transfer Of List Of Applications\r",
																	"    let bequeathingDataCausesTransferOfListOfApplicationsOperationClientLtp = FindOperationClientUsingCallback(\"PromptForBequeathingDataCausesTransferOfListOfApplications\", fcList, ltpList)\r",
																	"    newReleaseHttpClientLtp = FindServingLtp(bequeathingDataCausesTransferOfListOfApplicationsOperationClientLtp, ltpList);\r",
																	"    newReleaseTcpClientLtp = FindServingLtp(newReleaseHttpClientLtp, ltpList);\r",
																	"    \r",
																	"    //Ltp Update Request\r",
																	"    updateLtpOperationClientLtp = FindOperationClientUsingCallback(\"ServiceRequestCausesLtpUpdateRequest\", fcList, ltpList)\r",
																	"    applicationLayerTopologyHttpClientLtp = FindServingLtp(updateLtpOperationClientLtp, ltpList);\r",
																	"    \r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Reference objects could not be extracted.\");\r",
																	"} \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.collectionVariables.clear();\r",
																	"    \r",
																	"    pm.collectionVariables.set(\"currentOperationServer\", currentOperationServer);\r",
																	"    pm.collectionVariables.set(\"executionAndTraceLogHttpClientLtp\", executionAndTraceLogHttpClientLtp);\r",
																	"    pm.collectionVariables.set(\"executionAndTraceLogTcpClientLtp\", executionAndTraceLogTcpClientLtp);\r",
																	"    pm.collectionVariables.set(\"newReleaseHttpClientLtp\", newReleaseHttpClientLtp);\r",
																	"    pm.collectionVariables.set(\"newReleaseTcpClientLtp\", newReleaseTcpClientLtp);\r",
																	"    pm.collectionVariables.set(\"applicationLayerTopologyHttpClientLtp\", applicationLayerTopologyHttpClientLtp);\r",
																	"    pm.collectionVariables.set(\"updateLtpOperationClientLtp\", updateLtpOperationClientLtp);\r",
																	"    pm.collectionVariables.set(\"ltpList\", ltpList);\r",
																	"    pm.collectionVariables.set(\"fcList\", fcList);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Collection variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"function FindOperationServer(operationName, ltpList) {\r",
																	"    let operationServer;\r",
																	"    operationServer = \"\";\r",
																	"    try {\r",
																	"        let sampleUuid;\r",
																	"        for(let i=0; i<ltpList.length; i++) {\r",
																	"            sampleUuid = ltpList[i][\"uuid\"];\r",
																	"            if(sampleUuid.includes(\"op-s-\")) {\r",
																	"                let sampleOperationName;\r",
																	"                sampleOperationName = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
																	"                if(sampleOperationName == operationName) {\r",
																	"                    operationServer = ltpList[i];\r",
																	"                    return operationServer;\r",
																	"                }\r",
																	"            }\r",
																	"        }\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Exception in function : FindOperationServer. \");\r",
																	"    }\r",
																	"    return operationServer;\r",
																	"}\r",
																	"\r",
																	"function FindOutputFcPortList(forwardingName, fcList) {\r",
																	"    let outputFcPortList;\r",
																	"    outputFcPortList = [];\r",
																	"    try {\r",
																	"        for( let i=0; i<fcList.length; i++ ) {\r",
																	"            for(let j=0; j<fcList[i][\"name\"].length; j++) {               \r",
																	"                if(fcList[i][\"name\"][j][\"value\"] == forwardingName) {\r",
																	"                    fcPortList = fcList[i][\"fc-port\"];\r",
																	"                    for(let k=0;k<fcPortList.length;k++) {\r",
																	"                        if(fcPortList[k][\"port-direction\"] == \"core-model-1-4:PORT_DIRECTION_TYPE_OUTPUT\") {\r",
																	"                            outputFcPortList.push(fcPortList[k]);\r",
																	"                        }\r",
																	"                    }\r",
																	"                    return outputFcPortList;\r",
																	"                }\r",
																	"            }\r",
																	"        }\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
																	"    }\r",
																	"    return outputFcPortList;\r",
																	"}\r",
																	"\r",
																	"function FindActualInstanceByUuid(expectedUuid, actualLtpList) {\r",
																	"    let actualInstance;\r",
																	"    actualInstance = {};\r",
																	"    try {\r",
																	"        for ( let i=0; i<actualLtpList.length; i++ ) {\r",
																	"            let sampleUuid;\r",
																	"            sampleUuid = actualLtpList[i][\"uuid\"];\r",
																	"            if( sampleUuid == expectedUuid ) {\r",
																	"                actualInstance = actualLtpList[i];\r",
																	"                return actualInstance;\r",
																	"            }\r",
																	"        }\r",
																	"\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
																	"    }\r",
																	"    return undefined;\r",
																	"}\r",
																	"\r",
																	"function FindServingLtp(clientLtp, ltpList) {\r",
																	"    let servingLtp;\r",
																	"    servingLtp = {};\r",
																	"    try{\r",
																	"        let serverLtpUuid;\r",
																	"        serverLtpUuid = clientLtp[\"server-ltp\"][0];\r",
																	"        for( let i=0; i<ltpList.length; i++ ) {\r",
																	"            let sampleUuid;\r",
																	"            sampleUuid = ltpList[i][\"uuid\"];\r",
																	"            if( sampleUuid == serverLtpUuid ) {\r",
																	"                servingLtp = ltpList[i];\r",
																	"                return servingLtp;\r",
																	"            }\r",
																	"        }\r",
																	"    } catch(error) {\r",
																	"        console.log(error);\r",
																	"        console.log(\"! Exception in function : FindServingLtp. \")\r",
																	"    }\r",
																	"    return servingLtp;\r",
																	"}\r",
																	"\r",
																	"function FindOperationClientUsingCallback(callback, fcList, ltpList) {\r",
																	"    let operationClientLtp\r",
																	"    try {\r",
																	"        let outputFcPortList = FindOutputFcPortList(callback, fcList);\r",
																	"        let randomOutputFcPort = outputFcPortList[Math.floor(Math.random() * outputFcPortList.length)];\r",
																	"        let outputLtpUuid = randomOutputFcPort[\"logical-termination-point\"];\r",
																	"        operationClientLtp = FindActualInstanceByUuid(outputLtpUuid, ltpList);\r",
																	"    } catch (error) {\r",
																	"        console.log(error);\r",
																	"        console.log(\"! Exception in function FindOperationClientUsingCallback. \");\r",
																	"    }\r",
																	"    return  operationClientLtp\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "GET",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "200",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "reference ExecutionAndTraceLog/core-model-1-4:control-construct",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"var AUTHORIZATION;\r",
																	"var applicationProtocol;\r",
																	"var applicationAddress;\r",
																	"var applicationPort;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"    let executionAndTraceLogTcpClientLtp;\r",
																	"    executionAndTraceLogTcpClientLtp = pm.collectionVariables.get(\"executionAndTraceLogTcpClientLtp\");\r",
																	"\r",
																	"    applicationProtocol = executionAndTraceLogTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
																	"    applicationProtocol = applicationProtocol.substring(('tcp-client-interface-1-0:PROTOCOL_TYPE_').length);\r",
																	"    applicationAddress = executionAndTraceLogTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-address\"];\r",
																	"    if(applicationAddress.hasOwnProperty(\"ip-address\")) {\r",
																	"        applicationAddress = applicationAddress[\"ip-address\"][\"ipv-4-address\"];\r",
																	"    } else {\r",
																	"        applicationAddress = applicationAddress[\"domain-name\"];\r",
																	"    }\r",
																	"    applicationPort = executionAndTraceLogTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-port\"];\r",
																	" \r",
																	"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Environment variables could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Request Body\r",
																	"****************************************************************************************/\r",
																	"var REQUEST_BODY;\r",
																	"try {\r",
																	"    REQUEST_BODY = \"\";\r",
																	"} catch (error) {\r",
																	"    console.log(\"!Could not define request body. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = applicationProtocol + \"://\" + applicationAddress + \":\" + applicationPort + \"/core-model-1-4:control-construct\";\r",
																	"    //URI = \"http://9d098835-4e91-48f3-9761-04a82ff2843e.mock.pstmn.io\" + \"/core-model-1-4:control-construct\";\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var ltpList;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"    \r",
																	"    let responseCode;\r",
																	"    responseCode = parseInt(response.code);\r",
																	"    \r",
																	"    if ( Math.floor(responseCode/100) === 2 ) {\r",
																	"        let responseObject;\r",
																	"        responseObject = JSON.parse(response.stream);\r",
																	"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																	"\r",
																	"    } else {\r",
																	"        ltpList = [];\r",
																	"    }\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! ltpList could not be extracted.\");\r",
																	"}\r",
																	"\r",
																	"var listRecordsOfFlowOperationKey;\r",
																	"try {\r",
																	"    listRecordsOfFlowOperationKey = FindOperationKeyForOperationName(\"/v1/list-records-of-flow\", ltpList);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Reference objects could not be extracted.\");\r",
																	"} \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.collectionVariables.set(\"listRecordsOfFlowOperationKey\", listRecordsOfFlowOperationKey);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Collection variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"function FindOperationKeyForOperationName(operationName, ltpList) {\r",
																	"    let operationKey;\r",
																	"    operationKey = \"\";\r",
																	"    try {\r",
																	"         let sampleUuid;\r",
																	"         for ( let i=0; i<ltpList.length; i++) {\r",
																	"            sampleUuid = ltpList[i][\"uuid\"];\r",
																	"            if(sampleUuid.includes(\"op-s-\")){\r",
																	"                let sampleOperationName;\r",
																	"                sampleOperationName = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
																	"                if(sampleOperationName == operationName) {\r",
																	"                    operationKey = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																	"                    return operationKey; \r",
																	"                }\r",
																	"            }\r",
																	"         }\r",
																	"\r",
																	"    } catch (error) {\r",
																	"        console.log(\" ! Exception in function : FindOperationKeyForOperationName\")\r",
																	"    }\r",
																	"    return operationKey;\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "200",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "sampling /v1/bequeath-your-data-and-die",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"var OPERATION_KEY;\r",
																	"var CURRENT_ORIGINATOR;\r",
																	"var newApplicationName;\r",
																	"var newApplicationRelease;\r",
																	"var newApplicationProtocol;\r",
																	"var dummyApplicationAddress;\r",
																	"var newApplicationPort;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"    let ltpList;\r",
																	"    ltpList = APPLICATION[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																	"\r",
																	"    CURRENT_ORIGINATOR = FindHttpServerApplicationName(ltpList);\r",
																	"\r",
																	"    let currentOperationServer;\r",
																	"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
																	"    \r",
																	"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																	"\r",
																	"    let newReleaseHttpClientLtp;\r",
																	"    newReleaseHttpClientLtp = pm.collectionVariables.get(\"newReleaseHttpClientLtp\");\r",
																	"\r",
																	"    newApplicationName = newReleaseHttpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
																	"\r",
																	"    newApplicationRelease = newReleaseHttpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"release-number\"];\r",
																	"\r",
																	"    let newReleaseTcpClientLtp;\r",
																	"    newReleaseTcpClientLtp = pm.collectionVariables.get(\"newReleaseTcpClientLtp\");\r",
																	"\r",
																	"    newApplicationProtocol = newReleaseTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
																	"    newApplicationProtocol = newApplicationProtocol.substring(('tcp-client-interface-1-0:PROTOCOL_TYPE_').length);\r",
																	"\r",
																	"    let dummyIpv4Address = RandomIpAddress();\r",
																	"    dummyApplicationAddress = {\r",
																	"        \"ip-address\": {\r",
																	"            \"ipv-4-address\": dummyIpv4Address\r",
																	"        }\r",
																	"    };\r",
																	"\r",
																	"    newApplicationPort = newReleaseTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-port\"];\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Input Data could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Dummy Parameters\r",
																	"****************************************************************************************/\r",
																	"var USER_NAME;\r",
																	"var ORIGINATOR;\r",
																	"var X_CORRELATOR;\r",
																	"var TRACE_INDICATOR;\r",
																	"var CUSTOMER_JOURNEY;\r",
																	"try {\r",
																	"    USER_NAME = APPLICATION.userName;\r",
																	"    ORIGINATOR = \"Postman\";\r",
																	"    X_CORRELATOR = CreateXCorrelator();\r",
																	"    TRACE_INDICATOR = \"1\";\r",
																	"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																	"    \r",
																	"} catch (error) {\r",
																	"    console.log(\"! Could not define dummy values for parameters. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Request Body\r",
																	"****************************************************************************************/\r",
																	"var REQUEST_BODY;\r",
																	"try {\r",
																	"    REQUEST_BODY = '{'\r",
																	"        + '\"new-application-name\" : ' + '\"' + newApplicationName + '\",'\r",
																	"        + '\"new-application-release\" : ' + '\"' + newApplicationRelease + '\",'\r",
																	"        + '\"new-application-protocol\" : ' + '\"' + newApplicationProtocol + '\",'\r",
																	"        + '\"new-application-address\" : ' + JSON.stringify(dummyApplicationAddress) + ','\r",
																	"        + '\"new-application-port\" : ' +  newApplicationPort\r",
																	"    +'}';\r",
																	"} catch (error) {\r",
																	"    console.log(\"!Could not define request body. \");\r",
																	"}\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.collectionVariables.set(\"user\", USER_NAME);\r",
																	"    pm.collectionVariables.set(\"originator\", ORIGINATOR);\r",
																	"    pm.collectionVariables.set(\"xCorrelator\", X_CORRELATOR);\r",
																	"    pm.collectionVariables.set(\"traceIndicator\", TRACE_INDICATOR);\r",
																	"    pm.collectionVariables.set(\"customerJourney\", CUSTOMER_JOURNEY);\r",
																	"    pm.collectionVariables.set(\"currentOriginator\", CURRENT_ORIGINATOR);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Collection variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/v1/bequeath-your-data-and-die\";\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																	"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																	"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																	"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																	"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"function CreateXCorrelator() {\r",
																	"    let xCorrelator;\r",
																	"    xCorrelator = \"\";\r",
																	"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(12);\r",
																	"    return xCorrelator;\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomHexString(length) {\r",
																	"    var randomRandomHexString = \"\";\r",
																	"    while (randomRandomHexString.length < length) {\r",
																	"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																	"    }\r",
																	"    return randomRandomHexString.substring(0,length);\r",
																	"}\r",
																	"\r",
																	"function RandomIpAddress() {\r",
																	"    let randomAddress\r",
																	"    let addressParts = [];\r",
																	"    for ( let i=0; i<4; i++ ) {\r",
																	"        addressParts[i] = String(Math.floor(Math.random() * 256));\r",
																	"    }\r",
																	"    randomAddress = addressParts[0] + \".\" + addressParts[1] + \".\" + addressParts[2] + \".\" + addressParts[3];\r",
																	"    return randomAddress;\r",
																	"}\r",
																	"\r",
																	"function FindHttpServerApplicationName(ltpList) {\r",
																	"    let applicationName;\r",
																	"    applicationName = \"\";\r",
																	"    for( let i=0; i<ltpList.length; i++ ) {\r",
																	"        let sampleUuid;\r",
																	"        sampleUuid = ltpList[i][\"uuid\"];\r",
																	"        if(sampleUuid.includes(\"http-s-\")) {\r",
																	"            applicationName = ltpList[i][\"layer-protocol\"][0][\"http-server-interface-1-0:http-server-interface-pac\"][\"http-server-interface-capability\"][\"application-name\"];\r",
																	"            return applicationName;\r",
																	"        }\r",
																	"    }\r",
																	"    return applicationName;\r",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var RESPONSE_CODE;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"\r",
																	"    RESPONSE_CODE = parseInt(response.code);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Response Code could not be extracted.\");\r",
																	"}    \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Testing\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.test(\"POST /v1/bequeath-your-data-and-die responds 204\", function () {\r",
																	"        pm.expect(RESPONSE_CODE).to.equal(204);\r",
																	"    });\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Testing could not be executed.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "204",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Expected ExecutionAndTraceLog/v1/list-records-of-flow",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"var OPERATION_KEY;\r",
																	"var applicationProtocol;\r",
																	"var applicationAddress;\r",
																	"var applicationPort;\r",
																	"var xCorrelatorUnderTest;\r",
																	"var latestMatch;\r",
																	"var numberOfRecords;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"    let executionAndTraceLogTcpClientLtp;\r",
																	"    executionAndTraceLogTcpClientLtp = pm.collectionVariables.get(\"executionAndTraceLogTcpClientLtp\");\r",
																	"    \r",
																	"    applicationProtocol = executionAndTraceLogTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
																	"    applicationProtocol = applicationProtocol.substring(('tcp-client-interface-1-0:PROTOCOL_TYPE_').length);\r",
																	"    applicationAddress = executionAndTraceLogTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-address\"];\r",
																	"    if(applicationAddress.hasOwnProperty(\"ip-address\")) {\r",
																	"        applicationAddress = applicationAddress[\"ip-address\"][\"ipv-4-address\"];\r",
																	"    } else {\r",
																	"        applicationAddress = applicationAddress[\"domain-name\"];\r",
																	"    }\r",
																	"    applicationPort = executionAndTraceLogTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-port\"];\r",
																	"\r",
																	"    OPERATION_KEY = pm.collectionVariables.get(\"listRecordsOfFlowOperationKey\");\r",
																	"    xCorrelatorUnderTest = pm.collectionVariables.get(\"xCorrelator\");\r",
																	"    latestMatch = 0;\r",
																	"    numberOfRecords = 100;\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error)\r",
																	"    console.log(\"! Input Data could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Dummy Parameters\r",
																	"****************************************************************************************/\r",
																	"var USER_NAME;\r",
																	"var ORIGINATOR;\r",
																	"var X_CORRELATOR;\r",
																	"var TRACE_INDICATOR;\r",
																	"var CUSTOMER_JOURNEY;\r",
																	"try {\r",
																	"    USER_NAME = APPLICATION.userName;\r",
																	"    ORIGINATOR = \"Postman\";\r",
																	"    X_CORRELATOR = CreateXCorrelator();\r",
																	"    TRACE_INDICATOR = \"1\";\r",
																	"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																	"    \r",
																	"} catch (error) {\r",
																	"    console.log(\"! Could not define dummy values for parameters. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Request Body\r",
																	"****************************************************************************************/\r",
																	"var REQUEST_BODY;\r",
																	"try {\r",
																	"    REQUEST_BODY = '{'\r",
																	"                + '\"x-correlator\": \"' + xCorrelatorUnderTest +'\",'\r",
																	"                + '\"latest-match\": ' + latestMatch + ','\r",
																	"                + '\"number-of-records\":' + numberOfRecords\r",
																	"                + '}';\r",
																	"} catch (error) {\r",
																	"    console.log(\"!Could not define request body. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"/****************************************************************************************\r",
																	"* Setting delay\r",
																	"****************************************************************************************/\r",
																	"setTimeout(function(){\r",
																	"\r",
																	"}, 3000);\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = applicationProtocol + \"://\" + applicationAddress + \":\" + applicationPort + \"/v1/list-records-of-flow\";\r",
																	"    //URI = \"http://9d098835-4e91-48f3-9761-04a82ff2843e.mock.pstmn.io/v1/list-records-of-flow\";\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																	"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																	"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																	"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																	"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"function CreateXCorrelator() {\r",
																	"    let xCorrelator;\r",
																	"    xCorrelator = \"\";\r",
																	"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(12);\r",
																	"    return xCorrelator;\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomHexString(length) {\r",
																	"    var randomRandomHexString = \"\";\r",
																	"    while (randomRandomHexString.length < length) {\r",
																	"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																	"    }\r",
																	"    return randomRandomHexString.substring(0, length);\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var expectedXCorrelator;\r",
																	"var expectedUser;\r",
																	"var expectedOriginator;\r",
																	"var expectedTraceIndicator;\r",
																	"var expectedApplicationName;\r",
																	"var expectedReleaseNumber;\r",
																	"var expectedOperationName;\r",
																	"try {\r",
																	"    expectedXCorrelator = pm.collectionVariables.get(\"xCorrelator\");\r",
																	"    expectedUser = pm.collectionVariables.get(\"user\");\r",
																	"    expectedOriginator = pm.collectionVariables.get(\"currentOriginator\");\r",
																	"    expectedTraceIndicator = pm.collectionVariables.get(\"traceIndicator\");\r",
																	"\r",
																	"    let expectedHttpClientLtp;\r",
																	"    expectedHttpClientLtp = pm.collectionVariables.get(\"applicationLayerTopologyHttpClientLtp\");\r",
																	"    expectedApplicationName = expectedHttpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
																	"    expectedReleaseNumber = expectedHttpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"release-number\"];\r",
																	"\r",
																	"    let expectedOperationClient;\r",
																	"    expectedOperationClient = pm.collectionVariables.get(\"updateLtpOperationClientLtp\");\r",
																	"    expectedOperationName = expectedOperationClient[\"layer-protocol\"][0][\"operation-client-interface-1-0:operation-client-interface-pac\"][\"operation-client-interface-configuration\"][\"operation-name\"];\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error)\r",
																	"    console.log(\"! Could not load Input Data. \");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var RESPONSE_CODE;\r",
																	"var serviceRecordList;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"    \r",
																	"    RESPONSE_CODE = parseInt(response.code);\r",
																	"\r",
																	"    if(Math.floor(RESPONSE_CODE/100) === 2) {\r",
																	"        serviceRecordList = JSON.parse(response.stream);\r",
																	"    }\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Response Code could not be extracted.\");\r",
																	"}    \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Testing\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.test(\"POST ExecutionAndTraceLog/v1/list-records-of-flow responds 200\", function () {\r",
																	"        pm.expect(RESPONSE_CODE).to.equal(200);\r",
																	"    });\r",
																	"\r",
																	"    let foundAnEntryWithTheExpectedHeaderValuesInEatl;\r",
																	"    foundAnEntryWithTheExpectedHeaderValuesInEatl = false;\r",
																	"    let responseCodeofTriggeredForwarding;\r",
																	"    responseCodeofTriggeredForwarding = 0;\r",
																	"    for(let i=0; i<serviceRecordList.length; i++)  {\r",
																	"        if( serviceRecordList[i][\"application-name\"] == expectedApplicationName\r",
																	"                && serviceRecordList[i][\"release-number\"] == expectedReleaseNumber\r",
																	"                && serviceRecordList[i][\"operation-name\"] == expectedOperationName\r",
																	"                && serviceRecordList[i][\"x-correlator\"] == expectedXCorrelator\r",
																	"                && serviceRecordList[i][\"user\"] == expectedUser\r",
																	"                && serviceRecordList[i][\"originator\"] == expectedOriginator\r",
																	"                && serviceRecordList[i][\"trace-indicator\"].includes(expectedTraceIndicator) ) {\r",
																	"\r",
																	"            foundAnEntryWithTheExpectedHeaderValuesInEatl = true;\r",
																	"            responseCodeofTriggeredForwarding =  serviceRecordList[i][\"response-code\"];\r",
																	"            break;\r",
																	"        }\r",
																	"    }\r",
																	"\r",
																	"    if(foundAnEntryWithTheExpectedHeaderValuesInEatl) {\r",
																	"        pm.test(\"ipv-4-address Update in LTP is successfully notified to ALT with response-code 204\", function () {\r",
																	"            pm.expect(responseCodeofTriggeredForwarding).to.equal(204);        \r",
																	"        });\r",
																	"    } else {\r",
																	"        pm.test(\"ipv-4-address Update in LTP is successfully notified to ALT\", function () {\r",
																	"            pm.expect(foundAnEntryWithTheExpectedHeaderValuesInEatl).to.be.true;        \r",
																	"        });\r",
																	"    }  \r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Testing could not be executed.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "200",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "initial newRelease/remote-address",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"var newReleaseTcpClientUuid;\r",
																	"var initialReleaseRemoteAddress;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"    \r",
																	"    let newReleaseTcpClientLtp;\r",
																	"    newReleaseTcpClientLtp = pm.collectionVariables.get(\"newReleaseTcpClientLtp\");\r",
																	"\r",
																	"    newReleaseTcpClientUuid = newReleaseTcpClientLtp[\"uuid\"];\r",
																	"\r",
																	"    initialReleaseRemoteAddress = newReleaseTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-address\"];\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Variables could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl \r",
																	"            + \"/core-model-1-4:control-construct/logical-termination-point=\"\r",
																	"            + newReleaseTcpClientUuid\r",
																	"            + \"/layer-protocol=0/tcp-client-interface-1-0:tcp-client-interface-pac/tcp-client-interface-configuration/remote-address\";\r",
																	"\r",
																	"    let REQUEST_BODY;\r",
																	"    REQUEST_BODY = '{ '\r",
																	"                    +   '\"tcp-client-interface-1-0:remote-address\": ' + JSON.stringify(initialReleaseRemoteAddress)\r",
																	"                    + ' }';\r",
																	"\r",
																	"    let AUTHORIZATION;\r",
																	"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error)\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "204",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Check /core-model-1-4:control-construct",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"var AUTHORIZATION;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																	"\r",
																	"    oamPath = \"/core-model-1-4:control-construct\";\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Environment variables could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Request Body\r",
																	"****************************************************************************************/\r",
																	"var REQUEST_BODY;\r",
																	"try {\r",
																	"    REQUEST_BODY = \"\";\r",
																	"} catch (error) {\r",
																	"    console.log(\"!Could not define request body. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + oamPath;\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var expectedLogicalTerminationPoint;\r",
																	"var expectedForwardingConstruct;\r",
																	"try {\r",
																	"    expectedLogicalTerminationPoint = pm.collectionVariables.get(\"ltpList\");\r",
																	"    expectedForwardingConstruct = pm.collectionVariables.get(\"fcList\");\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Collection variables could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var RESPONSE_CODE;\r",
																	"var RESPONSE;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"\r",
																	"    RESPONSE_CODE = parseInt(response.code);\r",
																	"\r",
																	"    if (Math.floor(RESPONSE_CODE / 100) === 2) {\r",
																	"        RESPONSE = JSON.parse(response.stream);\r",
																	"    } else {\r",
																	"        RESPONSE = [];\r",
																	"    }\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Result value lists could not be extracted.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Testing\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.test(\"GET /core-model-1-4:control-construct responds 200\", function () {\r",
																	"        pm.expect(RESPONSE_CODE).to.equal(200);\r",
																	"    });\r",
																	"\r",
																	"    let actualLtpList;\r",
																	"    actualLtpList = RESPONSE[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																	"\r",
																	"    pm.test(\"Received logical-termination-point is same as intial instance \", function () {\r",
																	"        pm.expect(actualLtpList).to.deep.equal(expectedLogicalTerminationPoint);\r",
																	"    });\r",
																	"\r",
																	"    let actualFcList;\r",
																	"    actualFcList = RESPONSE[\"core-model-1-4:control-construct\"][\"forwarding-domain\"][0][\"forwarding-construct\"];\r",
																	"\r",
																	"    pm.test(\"Received forwarding-construct is same as intial instance \", function () {\r",
																	"        pm.expect(actualFcList).to.deep.equal(expectedForwardingConstruct);\r",
																	"    });\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Testing could not be executed.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "200",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "domain-name update",
											"item": [
												{
													"name": "reference /core-model-1-4:control-construct",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"console.log(\"\\n-----/v1/bequeath-your-data-and-die acceptance -- new-application-address/domain-name attribute update notified to ALT -------------------------------\");\r",
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Environment variables could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/core-model-1-4:control-construct\";\r",
																	"\r",
																	"    let REQUEST_BODY;\r",
																	"    REQUEST_BODY = \"\";\r",
																	"\r",
																	"    let AUTHORIZATION;\r",
																	"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var ltpList;\r",
																	"var fcList;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"    \r",
																	"    let responseCode;\r",
																	"    responseCode = parseInt(response.code);\r",
																	"    \r",
																	"    if ( Math.floor(responseCode/100) === 2 ) {\r",
																	"        let responseObject;\r",
																	"        responseObject = JSON.parse(response.stream);\r",
																	"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																	"        fcList = responseObject[\"core-model-1-4:control-construct\"][\"forwarding-domain\"][0][\"forwarding-construct\"];\r",
																	"\r",
																	"    } else {\r",
																	"        ltpList = [];\r",
																	"        fcList = [];\r",
																	"    }\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! ltpList could not be extracted.\");\r",
																	"}\r",
																	"\r",
																	"var currentOperationServer;\r",
																	"var executionAndTraceLogHttpClientLtp;\r",
																	"var executionAndTraceLogTcpClientLtp;\r",
																	"var newReleaseHttpClientLtp;\r",
																	"var newReleaseTcpClientLtp;\r",
																	"var applicationLayerTopologyHttpClientLtp;\r",
																	"var updateLtpOperationClientLtp;\r",
																	"try {\r",
																	"    currentOperationServer = FindOperationServer(\"/v1/bequeath-your-data-and-die\", ltpList);\r",
																	"\r",
																	"    //Execution And Trace Log\r",
																	"    let recordServiceRequestOperationClientLtp = FindOperationClientUsingCallback(\"ServiceRequestCausesLoggingRequest\", fcList, ltpList)\r",
																	"    executionAndTraceLogHttpClientLtp = FindServingLtp(recordServiceRequestOperationClientLtp, ltpList);\r",
																	"    executionAndTraceLogTcpClientLtp = FindServingLtp(executionAndTraceLogHttpClientLtp, ltpList);\r",
																	"\r",
																	"    //Bequeath Transfer Of List Of Applications\r",
																	"    let bequeathingDataCausesTransferOfListOfApplicationsOperationClientLtp = FindOperationClientUsingCallback(\"PromptForBequeathingDataCausesTransferOfListOfApplications\", fcList, ltpList)\r",
																	"    newReleaseHttpClientLtp = FindServingLtp(bequeathingDataCausesTransferOfListOfApplicationsOperationClientLtp, ltpList);\r",
																	"    newReleaseTcpClientLtp = FindServingLtp(newReleaseHttpClientLtp, ltpList);\r",
																	"    \r",
																	"    //Ltp Update Request\r",
																	"    updateLtpOperationClientLtp = FindOperationClientUsingCallback(\"ServiceRequestCausesLtpUpdateRequest\", fcList, ltpList)\r",
																	"    applicationLayerTopologyHttpClientLtp = FindServingLtp(updateLtpOperationClientLtp, ltpList);\r",
																	"    \r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Reference objects could not be extracted.\");\r",
																	"} \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.collectionVariables.clear();\r",
																	"    \r",
																	"    pm.collectionVariables.set(\"currentOperationServer\", currentOperationServer);\r",
																	"    pm.collectionVariables.set(\"executionAndTraceLogHttpClientLtp\", executionAndTraceLogHttpClientLtp);\r",
																	"    pm.collectionVariables.set(\"executionAndTraceLogTcpClientLtp\", executionAndTraceLogTcpClientLtp);\r",
																	"    pm.collectionVariables.set(\"newReleaseHttpClientLtp\", newReleaseHttpClientLtp);\r",
																	"    pm.collectionVariables.set(\"newReleaseTcpClientLtp\", newReleaseTcpClientLtp);\r",
																	"    pm.collectionVariables.set(\"applicationLayerTopologyHttpClientLtp\", applicationLayerTopologyHttpClientLtp);\r",
																	"    pm.collectionVariables.set(\"updateLtpOperationClientLtp\", updateLtpOperationClientLtp);\r",
																	"    pm.collectionVariables.set(\"ltpList\", ltpList);\r",
																	"    pm.collectionVariables.set(\"fcList\", fcList);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Collection variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"function FindOperationServer(operationName, ltpList) {\r",
																	"    let operationServer;\r",
																	"    operationServer = \"\";\r",
																	"    try {\r",
																	"        let sampleUuid;\r",
																	"        for(let i=0; i<ltpList.length; i++) {\r",
																	"            sampleUuid = ltpList[i][\"uuid\"];\r",
																	"            if(sampleUuid.includes(\"op-s-\")) {\r",
																	"                let sampleOperationName;\r",
																	"                sampleOperationName = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
																	"                if(sampleOperationName == operationName) {\r",
																	"                    operationServer = ltpList[i];\r",
																	"                    return operationServer;\r",
																	"                }\r",
																	"            }\r",
																	"        }\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Exception in function : FindOperationServer. \");\r",
																	"    }\r",
																	"    return operationServer;\r",
																	"}\r",
																	"\r",
																	"function FindOutputFcPortList(forwardingName, fcList) {\r",
																	"    let outputFcPortList;\r",
																	"    outputFcPortList = [];\r",
																	"    try {\r",
																	"        for( let i=0; i<fcList.length; i++ ) {\r",
																	"            for(let j=0; j<fcList[i][\"name\"].length; j++) {               \r",
																	"                if(fcList[i][\"name\"][j][\"value\"] == forwardingName) {\r",
																	"                    fcPortList = fcList[i][\"fc-port\"];\r",
																	"                    for(let k=0;k<fcPortList.length;k++) {\r",
																	"                        if(fcPortList[k][\"port-direction\"] == \"core-model-1-4:PORT_DIRECTION_TYPE_OUTPUT\") {\r",
																	"                            outputFcPortList.push(fcPortList[k]);\r",
																	"                        }\r",
																	"                    }\r",
																	"                    return outputFcPortList;\r",
																	"                }\r",
																	"            }\r",
																	"        }\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
																	"    }\r",
																	"    return outputFcPortList;\r",
																	"}\r",
																	"\r",
																	"function FindActualInstanceByUuid(expectedUuid, actualLtpList) {\r",
																	"    let actualInstance;\r",
																	"    actualInstance = {};\r",
																	"    try {\r",
																	"        for ( let i=0; i<actualLtpList.length; i++ ) {\r",
																	"            let sampleUuid;\r",
																	"            sampleUuid = actualLtpList[i][\"uuid\"];\r",
																	"            if( sampleUuid == expectedUuid ) {\r",
																	"                actualInstance = actualLtpList[i];\r",
																	"                return actualInstance;\r",
																	"            }\r",
																	"        }\r",
																	"\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
																	"    }\r",
																	"    return undefined;\r",
																	"}\r",
																	"\r",
																	"function FindServingLtp(clientLtp, ltpList) {\r",
																	"    let servingLtp;\r",
																	"    servingLtp = {};\r",
																	"    try{\r",
																	"        let serverLtpUuid;\r",
																	"        serverLtpUuid = clientLtp[\"server-ltp\"][0];\r",
																	"        for( let i=0; i<ltpList.length; i++ ) {\r",
																	"            let sampleUuid;\r",
																	"            sampleUuid = ltpList[i][\"uuid\"];\r",
																	"            if( sampleUuid == serverLtpUuid ) {\r",
																	"                servingLtp = ltpList[i];\r",
																	"                return servingLtp;\r",
																	"            }\r",
																	"        }\r",
																	"    } catch(error) {\r",
																	"        console.log(error);\r",
																	"        console.log(\"! Exception in function : FindServingLtp. \")\r",
																	"    }\r",
																	"    return servingLtp;\r",
																	"}\r",
																	"\r",
																	"function FindOperationClientUsingCallback(callback, fcList, ltpList) {\r",
																	"    let operationClientLtp\r",
																	"    try {\r",
																	"        let outputFcPortList = FindOutputFcPortList(callback, fcList);\r",
																	"        let randomOutputFcPort = outputFcPortList[Math.floor(Math.random() * outputFcPortList.length)];\r",
																	"        let outputLtpUuid = randomOutputFcPort[\"logical-termination-point\"];\r",
																	"        operationClientLtp = FindActualInstanceByUuid(outputLtpUuid, ltpList);\r",
																	"    } catch (error) {\r",
																	"        console.log(error);\r",
																	"        console.log(\"! Exception in function FindOperationClientUsingCallback. \");\r",
																	"    }\r",
																	"    return  operationClientLtp\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "GET",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "200",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "reference ExecutionAndTraceLog/core-model-1-4:control-construct",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"var AUTHORIZATION;\r",
																	"var applicationProtocol;\r",
																	"var applicationAddress;\r",
																	"var applicationPort;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"    let executionAndTraceLogTcpClientLtp;\r",
																	"    executionAndTraceLogTcpClientLtp = pm.collectionVariables.get(\"executionAndTraceLogTcpClientLtp\");\r",
																	"\r",
																	"    applicationProtocol = executionAndTraceLogTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
																	"    applicationProtocol = applicationProtocol.substring(('tcp-client-interface-1-0:PROTOCOL_TYPE_').length);\r",
																	"    applicationAddress = executionAndTraceLogTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-address\"];\r",
																	"    if(applicationAddress.hasOwnProperty(\"ip-address\")) {\r",
																	"        applicationAddress = applicationAddress[\"ip-address\"][\"ipv-4-address\"];\r",
																	"    } else {\r",
																	"        applicationAddress = applicationAddress[\"domain-name\"];\r",
																	"    }\r",
																	"    applicationPort = executionAndTraceLogTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-port\"];\r",
																	" \r",
																	"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Environment variables could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Request Body\r",
																	"****************************************************************************************/\r",
																	"var REQUEST_BODY;\r",
																	"try {\r",
																	"    REQUEST_BODY = \"\";\r",
																	"} catch (error) {\r",
																	"    console.log(\"!Could not define request body. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = applicationProtocol + \"://\" + applicationAddress + \":\" + applicationPort + \"/core-model-1-4:control-construct\";\r",
																	"    //URI = \"http://9d098835-4e91-48f3-9761-04a82ff2843e.mock.pstmn.io\" + \"/core-model-1-4:control-construct\";\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var ltpList;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"    \r",
																	"    let responseCode;\r",
																	"    responseCode = parseInt(response.code);\r",
																	"    \r",
																	"    if ( Math.floor(responseCode/100) === 2 ) {\r",
																	"        let responseObject;\r",
																	"        responseObject = JSON.parse(response.stream);\r",
																	"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																	"\r",
																	"    } else {\r",
																	"        ltpList = [];\r",
																	"    }\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! ltpList could not be extracted.\");\r",
																	"}\r",
																	"\r",
																	"var listRecordsOfFlowOperationKey;\r",
																	"try {\r",
																	"    listRecordsOfFlowOperationKey = FindOperationKeyForOperationName(\"/v1/list-records-of-flow\", ltpList);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Reference objects could not be extracted.\");\r",
																	"} \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.collectionVariables.set(\"listRecordsOfFlowOperationKey\", listRecordsOfFlowOperationKey);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Collection variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"function FindOperationKeyForOperationName(operationName, ltpList) {\r",
																	"    let operationKey;\r",
																	"    operationKey = \"\";\r",
																	"    try {\r",
																	"         let sampleUuid;\r",
																	"         for ( let i=0; i<ltpList.length; i++) {\r",
																	"            sampleUuid = ltpList[i][\"uuid\"];\r",
																	"            if(sampleUuid.includes(\"op-s-\")){\r",
																	"                let sampleOperationName;\r",
																	"                sampleOperationName = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
																	"                if(sampleOperationName == operationName) {\r",
																	"                    operationKey = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																	"                    return operationKey; \r",
																	"                }\r",
																	"            }\r",
																	"         }\r",
																	"\r",
																	"    } catch (error) {\r",
																	"        console.log(\" ! Exception in function : FindOperationKeyForOperationName\")\r",
																	"    }\r",
																	"    return operationKey;\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "200",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "sampling /v1/bequeath-your-data-and-die",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"var OPERATION_KEY;\r",
																	"var CURRENT_ORIGINATOR;\r",
																	"var newApplicationName;\r",
																	"var newApplicationRelease;\r",
																	"var newApplicationProtocol;\r",
																	"var dummyApplicationAddress;\r",
																	"var newApplicationPort;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"    let ltpList;\r",
																	"    ltpList = APPLICATION[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																	"\r",
																	"    CURRENT_ORIGINATOR = FindHttpServerApplicationName(ltpList);\r",
																	"\r",
																	"    let currentOperationServer;\r",
																	"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
																	"    \r",
																	"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																	"\r",
																	"    let newReleaseHttpClientLtp;\r",
																	"    newReleaseHttpClientLtp = pm.collectionVariables.get(\"newReleaseHttpClientLtp\");\r",
																	"\r",
																	"    newApplicationName = newReleaseHttpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
																	"\r",
																	"    newApplicationRelease = newReleaseHttpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"release-number\"];\r",
																	"\r",
																	"    let newReleaseTcpClientLtp;\r",
																	"    newReleaseTcpClientLtp = pm.collectionVariables.get(\"newReleaseTcpClientLtp\");\r",
																	"\r",
																	"    newApplicationProtocol = newReleaseTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
																	"    newApplicationProtocol = newApplicationProtocol.substring(('tcp-client-interface-1-0:PROTOCOL_TYPE_').length);\r",
																	"\r",
																	"    let dummyDomainName = RandomDomainName();\r",
																	"    dummyApplicationAddress = {\r",
																	"        \"domain-name\": dummyDomainName\r",
																	"    };\r",
																	"\r",
																	"    newApplicationPort = newReleaseTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-port\"];\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Input Data could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Dummy Parameters\r",
																	"****************************************************************************************/\r",
																	"var USER_NAME;\r",
																	"var ORIGINATOR;\r",
																	"var X_CORRELATOR;\r",
																	"var TRACE_INDICATOR;\r",
																	"var CUSTOMER_JOURNEY;\r",
																	"try {\r",
																	"    USER_NAME = APPLICATION.userName;\r",
																	"    ORIGINATOR = \"Postman\";\r",
																	"    X_CORRELATOR = CreateXCorrelator();\r",
																	"    TRACE_INDICATOR = \"1\";\r",
																	"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																	"    \r",
																	"} catch (error) {\r",
																	"    console.log(\"! Could not define dummy values for parameters. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Request Body\r",
																	"****************************************************************************************/\r",
																	"var REQUEST_BODY;\r",
																	"try {\r",
																	"    REQUEST_BODY = '{'\r",
																	"        + '\"new-application-name\" : ' + '\"' + newApplicationName + '\",'\r",
																	"        + '\"new-application-release\" : ' + '\"' + newApplicationRelease + '\",'\r",
																	"        + '\"new-application-protocol\" : ' + '\"' + newApplicationProtocol + '\",'\r",
																	"        + '\"new-application-address\" : ' + JSON.stringify(dummyApplicationAddress) + ','\r",
																	"        + '\"new-application-port\" : ' +  newApplicationPort\r",
																	"    +'}';\r",
																	"} catch (error) {\r",
																	"    console.log(\"!Could not define request body. \");\r",
																	"}\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.collectionVariables.set(\"user\", USER_NAME);\r",
																	"    pm.collectionVariables.set(\"originator\", ORIGINATOR);\r",
																	"    pm.collectionVariables.set(\"xCorrelator\", X_CORRELATOR);\r",
																	"    pm.collectionVariables.set(\"traceIndicator\", TRACE_INDICATOR);\r",
																	"    pm.collectionVariables.set(\"customerJourney\", CUSTOMER_JOURNEY);\r",
																	"    pm.collectionVariables.set(\"currentOriginator\", CURRENT_ORIGINATOR);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Collection variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/v1/bequeath-your-data-and-die\";\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																	"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																	"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																	"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																	"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"function CreateXCorrelator() {\r",
																	"    let xCorrelator;\r",
																	"    xCorrelator = \"\";\r",
																	"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(12);\r",
																	"    return xCorrelator;\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomHexString(length) {\r",
																	"    var randomRandomHexString = \"\";\r",
																	"    while (randomRandomHexString.length < length) {\r",
																	"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																	"    }\r",
																	"    return randomRandomHexString.substring(0,length);\r",
																	"}\r",
																	"\r",
																	"\r",
																	"function RandomDomainName() {\r",
																	"    let randomAddress;\r",
																	"    let dummySubdomain = GenerateRandomString(Math.floor(1 + Math.random() * 10));\r",
																	"    let randomDomainPartLength = Math.floor(2 + Math.random() * 5);\r",
																	"    let dummyDomainName = \"\";\r",
																	"    for(let i=0; i<randomDomainPartLength; i += 2 ) {\r",
																	"        dummyDomainName = dummyDomainName + GenerateRandomString(Math.floor(1 + Math.random() * 4));\r",
																	"        dummyDomainName = dummyDomainName + GenerateRandomSeparator();\r",
																	"        dummyDomainName = dummyDomainName + GenerateRandomString(Math.floor(1 + Math.random() * 4));\r",
																	"    }\r",
																	"    let dummyTopLevelDomain = GenerateRandomString(Math.floor(2 + Math.random() * 5));\r",
																	"    randomAddress = dummySubdomain + \".\" + dummyDomainName + \".\" + dummyTopLevelDomain; \r",
																	"    return randomAddress;\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomString(length) {\r",
																	"    let randomString;\r",
																	"    randomString = \"\";\r",
																	"    try {\r",
																	"        let characters = \"abcdefghijklmnopqrstuvwxyz\";\r",
																	"        let charactersLength = characters.length;\r",
																	"        for (let i = 0; i < length; i++) {\r",
																	"            randomString += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
																	"        }\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Could not generate random string. \");\r",
																	"    }\r",
																	"    return randomString;\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomSeparator() {\r",
																	"    let separators = [\".\", \"-\"];\r",
																	"    let randomSeparator = separators[Math.floor(Math.random() * separators.length)];\r",
																	"    return randomSeparator;\r",
																	"}\r",
																	"\r",
																	"function FindHttpServerApplicationName(ltpList) {\r",
																	"    let applicationName;\r",
																	"    applicationName = \"\";\r",
																	"    for( let i=0; i<ltpList.length; i++ ) {\r",
																	"        let sampleUuid;\r",
																	"        sampleUuid = ltpList[i][\"uuid\"];\r",
																	"        if(sampleUuid.includes(\"http-s-\")) {\r",
																	"            applicationName = ltpList[i][\"layer-protocol\"][0][\"http-server-interface-1-0:http-server-interface-pac\"][\"http-server-interface-capability\"][\"application-name\"];\r",
																	"            return applicationName;\r",
																	"        }\r",
																	"    }\r",
																	"    return applicationName;\r",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var RESPONSE_CODE;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"\r",
																	"    RESPONSE_CODE = parseInt(response.code);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Response Code could not be extracted.\");\r",
																	"}    \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Testing\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.test(\"POST /v1/bequeath-your-data-and-die responds 204\", function () {\r",
																	"        pm.expect(RESPONSE_CODE).to.equal(204);\r",
																	"    });\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Testing could not be executed.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "204",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Expected ExecutionAndTraceLog/v1/list-records-of-flow",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"var OPERATION_KEY;\r",
																	"var applicationProtocol;\r",
																	"var applicationAddress;\r",
																	"var applicationPort;\r",
																	"var xCorrelatorUnderTest;\r",
																	"var latestMatch;\r",
																	"var numberOfRecords;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"    let executionAndTraceLogTcpClientLtp;\r",
																	"    executionAndTraceLogTcpClientLtp = pm.collectionVariables.get(\"executionAndTraceLogTcpClientLtp\");\r",
																	"    \r",
																	"    applicationProtocol = executionAndTraceLogTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
																	"    applicationProtocol = applicationProtocol.substring(('tcp-client-interface-1-0:PROTOCOL_TYPE_').length);\r",
																	"    applicationAddress = executionAndTraceLogTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-address\"];\r",
																	"    if(applicationAddress.hasOwnProperty(\"ip-address\")) {\r",
																	"        applicationAddress = applicationAddress[\"ip-address\"][\"ipv-4-address\"];\r",
																	"    } else {\r",
																	"        applicationAddress = applicationAddress[\"domain-name\"];\r",
																	"    }\r",
																	"    applicationPort = executionAndTraceLogTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-port\"];\r",
																	"\r",
																	"    OPERATION_KEY = pm.collectionVariables.get(\"listRecordsOfFlowOperationKey\");\r",
																	"    xCorrelatorUnderTest = pm.collectionVariables.get(\"xCorrelator\");\r",
																	"    latestMatch = 0;\r",
																	"    numberOfRecords = 100;\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error)\r",
																	"    console.log(\"! Input Data could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Dummy Parameters\r",
																	"****************************************************************************************/\r",
																	"var USER_NAME;\r",
																	"var ORIGINATOR;\r",
																	"var X_CORRELATOR;\r",
																	"var TRACE_INDICATOR;\r",
																	"var CUSTOMER_JOURNEY;\r",
																	"try {\r",
																	"    USER_NAME = APPLICATION.userName;\r",
																	"    ORIGINATOR = \"Postman\";\r",
																	"    X_CORRELATOR = CreateXCorrelator();\r",
																	"    TRACE_INDICATOR = \"1\";\r",
																	"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																	"    \r",
																	"} catch (error) {\r",
																	"    console.log(\"! Could not define dummy values for parameters. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Request Body\r",
																	"****************************************************************************************/\r",
																	"var REQUEST_BODY;\r",
																	"try {\r",
																	"    REQUEST_BODY = '{'\r",
																	"                + '\"x-correlator\": \"' + xCorrelatorUnderTest +'\",'\r",
																	"                + '\"latest-match\": ' + latestMatch + ','\r",
																	"                + '\"number-of-records\":' + numberOfRecords\r",
																	"                + '}';\r",
																	"} catch (error) {\r",
																	"    console.log(\"!Could not define request body. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"/****************************************************************************************\r",
																	"* Setting delay\r",
																	"****************************************************************************************/\r",
																	"setTimeout(function(){\r",
																	"\r",
																	"}, 3000);\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = applicationProtocol + \"://\" + applicationAddress + \":\" + applicationPort + \"/v1/list-records-of-flow\";\r",
																	"    //URI = \"http://9d098835-4e91-48f3-9761-04a82ff2843e.mock.pstmn.io/v1/list-records-of-flow\";\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																	"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																	"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																	"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																	"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"function CreateXCorrelator() {\r",
																	"    let xCorrelator;\r",
																	"    xCorrelator = \"\";\r",
																	"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(12);\r",
																	"    return xCorrelator;\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomHexString(length) {\r",
																	"    var randomRandomHexString = \"\";\r",
																	"    while (randomRandomHexString.length < length) {\r",
																	"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																	"    }\r",
																	"    return randomRandomHexString.substring(0, length);\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var expectedXCorrelator;\r",
																	"var expectedUser;\r",
																	"var expectedOriginator;\r",
																	"var expectedTraceIndicator;\r",
																	"var expectedApplicationName;\r",
																	"var expectedReleaseNumber;\r",
																	"var expectedOperationName;\r",
																	"try {\r",
																	"    expectedXCorrelator = pm.collectionVariables.get(\"xCorrelator\");\r",
																	"    expectedUser = pm.collectionVariables.get(\"user\");\r",
																	"    expectedOriginator = pm.collectionVariables.get(\"currentOriginator\");\r",
																	"    expectedTraceIndicator = pm.collectionVariables.get(\"traceIndicator\");\r",
																	"\r",
																	"    let expectedHttpClientLtp;\r",
																	"    expectedHttpClientLtp = pm.collectionVariables.get(\"applicationLayerTopologyHttpClientLtp\");\r",
																	"    expectedApplicationName = expectedHttpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
																	"    expectedReleaseNumber = expectedHttpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"release-number\"];\r",
																	"\r",
																	"    let expectedOperationClient;\r",
																	"    expectedOperationClient = pm.collectionVariables.get(\"updateLtpOperationClientLtp\");\r",
																	"    expectedOperationName = expectedOperationClient[\"layer-protocol\"][0][\"operation-client-interface-1-0:operation-client-interface-pac\"][\"operation-client-interface-configuration\"][\"operation-name\"];\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Could not load Input Data. \");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var RESPONSE_CODE;\r",
																	"var serviceRecordList;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"    \r",
																	"    RESPONSE_CODE = parseInt(response.code);\r",
																	"\r",
																	"    if(Math.floor(RESPONSE_CODE/100) === 2) {\r",
																	"        serviceRecordList = JSON.parse(response.stream);\r",
																	"    }\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Response Code could not be extracted.\");\r",
																	"}    \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Testing\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.test(\"POST ExecutionAndTraceLog/v1/list-records-of-flow responds 200\", function () {\r",
																	"        pm.expect(RESPONSE_CODE).to.equal(200);\r",
																	"    });\r",
																	"\r",
																	"    let foundAnEntryWithTheExpectedHeaderValuesInEatl;\r",
																	"    foundAnEntryWithTheExpectedHeaderValuesInEatl = false;\r",
																	"    let responseCodeofTriggeredForwarding;\r",
																	"    responseCodeofTriggeredForwarding = 0;\r",
																	"    for(let i=0; i<serviceRecordList.length; i++)  {\r",
																	"        if( serviceRecordList[i][\"application-name\"] == expectedApplicationName\r",
																	"                && serviceRecordList[i][\"release-number\"] == expectedReleaseNumber\r",
																	"                && serviceRecordList[i][\"operation-name\"] == expectedOperationName\r",
																	"                && serviceRecordList[i][\"x-correlator\"] == expectedXCorrelator\r",
																	"                && serviceRecordList[i][\"user\"] == expectedUser\r",
																	"                && serviceRecordList[i][\"originator\"] == expectedOriginator\r",
																	"                && serviceRecordList[i][\"trace-indicator\"].includes(expectedTraceIndicator) ) {\r",
																	"\r",
																	"            foundAnEntryWithTheExpectedHeaderValuesInEatl = true;\r",
																	"            responseCodeofTriggeredForwarding =  serviceRecordList[i][\"response-code\"];\r",
																	"            break;\r",
																	"        }\r",
																	"    }\r",
																	"\r",
																	"    if(foundAnEntryWithTheExpectedHeaderValuesInEatl) {\r",
																	"        pm.test(\"domain-name update in LTP is successfully notified to ALT with response-code 204\", function () {\r",
																	"            pm.expect(responseCodeofTriggeredForwarding).to.equal(204);        \r",
																	"        });\r",
																	"    } else {\r",
																	"        pm.test(\"domain-name update in LTP is successfully notified to ALT\", function () {\r",
																	"            pm.expect(foundAnEntryWithTheExpectedHeaderValuesInEatl).to.be.true;        \r",
																	"        });\r",
																	"    }  \r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Testing could not be executed.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "200",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "initial newRelease/remote-address",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"var newReleaseTcpClientUuid;\r",
																	"var initialReleaseRemoteAddress;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"    \r",
																	"    let newReleaseTcpClientLtp;\r",
																	"    newReleaseTcpClientLtp = pm.collectionVariables.get(\"newReleaseTcpClientLtp\");\r",
																	"\r",
																	"    newReleaseTcpClientUuid = newReleaseTcpClientLtp[\"uuid\"];\r",
																	"\r",
																	"    initialReleaseRemoteAddress = newReleaseTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-address\"];\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Variables could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl \r",
																	"            + \"/core-model-1-4:control-construct/logical-termination-point=\"\r",
																	"            + newReleaseTcpClientUuid\r",
																	"            + \"/layer-protocol=0/tcp-client-interface-1-0:tcp-client-interface-pac/tcp-client-interface-configuration/remote-address\";\r",
																	"\r",
																	"    let REQUEST_BODY;\r",
																	"    REQUEST_BODY = '{ '\r",
																	"                    +   '\"tcp-client-interface-1-0:remote-address\": ' + JSON.stringify(initialReleaseRemoteAddress)\r",
																	"                    + ' }';\r",
																	"\r",
																	"    let AUTHORIZATION;\r",
																	"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error)\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "204",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Check /core-model-1-4:control-construct",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"var AUTHORIZATION;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																	"\r",
																	"    oamPath = \"/core-model-1-4:control-construct\";\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Environment variables could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Request Body\r",
																	"****************************************************************************************/\r",
																	"var REQUEST_BODY;\r",
																	"try {\r",
																	"    REQUEST_BODY = \"\";\r",
																	"} catch (error) {\r",
																	"    console.log(\"!Could not define request body. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + oamPath;\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var expectedLogicalTerminationPoint;\r",
																	"var expectedForwardingConstruct;\r",
																	"try {\r",
																	"    expectedLogicalTerminationPoint = pm.collectionVariables.get(\"ltpList\");\r",
																	"    expectedForwardingConstruct = pm.collectionVariables.get(\"fcList\");\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Collection variables could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var RESPONSE_CODE;\r",
																	"var RESPONSE;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"\r",
																	"    RESPONSE_CODE = parseInt(response.code);\r",
																	"\r",
																	"    if (Math.floor(RESPONSE_CODE / 100) === 2) {\r",
																	"        RESPONSE = JSON.parse(response.stream);\r",
																	"    } else {\r",
																	"        RESPONSE = [];\r",
																	"    }\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Result value lists could not be extracted.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Testing\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.test(\"GET /core-model-1-4:control-construct responds 200\", function () {\r",
																	"        pm.expect(RESPONSE_CODE).to.equal(200);\r",
																	"    });\r",
																	"\r",
																	"    let actualLtpList;\r",
																	"    actualLtpList = RESPONSE[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																	"\r",
																	"    pm.test(\"Received logical-termination-point is same as intial instance \", function () {\r",
																	"        pm.expect(actualLtpList).to.deep.equal(expectedLogicalTerminationPoint);\r",
																	"    });\r",
																	"\r",
																	"    let actualFcList;\r",
																	"    actualFcList = RESPONSE[\"core-model-1-4:control-construct\"][\"forwarding-domain\"][0][\"forwarding-construct\"];\r",
																	"\r",
																	"    pm.test(\"Received forwarding-construct is same as intial instance \", function () {\r",
																	"        pm.expect(actualFcList).to.deep.equal(expectedForwardingConstruct);\r",
																	"    });\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Testing could not be executed.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "200",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												}
											]
										}
									],
									"description": "##Gets new-application-address update trigger update-ltp to ALT?\n#### Requires:\n- ExecutionAndTraceLog/OamLog server to operate\"\n\n#### Preparation:\n- GETing CC (/core-model-1-4:control-construct)\n  - search CC for output fc-port of ServiceRequestCausesLoggingRequest, \nits corresponding op-c, http-c and tcp-c, storing them for later verification request. \n  - searching CC for output-fc-port of ServiceRequestCausesLtpUpdateRequest, its corresponding op-c, http-c, storing them.\n  - searching CC for op-s of /v1/bequeath-your-data-and-die, storing operation-key\n  - searcing CC for output port of PromptForBequeathingDataCausesTransferOfListOfApplications, find corresponding op-c, http-c and tcp-c, store them.\n- GETting EaTL/CC (while using IP, protocol and port from above)\n  - searching CC for op-c of /v1/list-records-of-flow, storing operation-key\n- POST /v1/bequeath-your-data-and-die with\n  - new-application-name and new-application-release attribute according to chosen http-c\n  - new-application-address with random generated dummy values (assure sufficiently high probability that set does not exist!)\n  - new-application-protocol and new-application-port according to chosen tcp-c\n  - operation-key from above\n  - reasonable parameters\n\n#### Testing:\n- POST ExecutionAndTraceLog/v1/list-records-of-flow with \n   - IP, protocol and port from above\n   - operation-key from above\n   - DummyValue of x-correlator\n   - checking response for entry with application data from ServiceRequestCausesLtpUpdateRequest\n   - checking same record for containing DummyXCorrelator &DummyTraceIndicator\n\n#### Clearing:\n- PUT NewRelease/remote-address with original value\n\n#### Clearance check:\n- Check if the logical-termination-point instance is the same as initial configuration\n- Check if the forwarding-construct instance is the same as initial configuration"
								},
								{
									"name": "new-application-port update",
									"item": [
										{
											"name": "reference /core-model-1-4:control-construct",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n-----/v1/bequeath-your-data-and-die acceptance -- new-application-port attribute update notified to ALT -------------------------------\");\r",
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"var APPLICATION;\r",
															"try {\r",
															"    APPLICATION = pm.environment.get(\"application\");\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Environment variables could not be loaded.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Setting Local Variables and Preparing the Request\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    let URI;\r",
															"    URI = APPLICATION.serverUrl + \"/core-model-1-4:control-construct\";\r",
															"\r",
															"    let REQUEST_BODY;\r",
															"    REQUEST_BODY = \"\";\r",
															"\r",
															"    let AUTHORIZATION;\r",
															"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
															"\r",
															"    let ACCEPT;\r",
															"    ACCEPT = \"application/json\";\r",
															"\r",
															"    let CONTENT_TYPE;\r",
															"    CONTENT_TYPE = \"application/json\";\r",
															"\r",
															"\r",
															"    pm.variables.clear();\r",
															"\r",
															"    pm.variables.set(\"uri\", URI);\r",
															"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
															"\r",
															"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
															"\r",
															"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
															"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Local variables could not be set.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Extracting Result\r",
															"****************************************************************************************/\r",
															"var ltpList;\r",
															"var fcList;\r",
															"try {\r",
															"    let response;\r",
															"    response = pm.response;\r",
															"    \r",
															"    let responseCode;\r",
															"    responseCode = parseInt(response.code);\r",
															"    \r",
															"    if ( Math.floor(responseCode/100) === 2 ) {\r",
															"        let responseObject;\r",
															"        responseObject = JSON.parse(response.stream);\r",
															"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
															"        fcList = responseObject[\"core-model-1-4:control-construct\"][\"forwarding-domain\"][0][\"forwarding-construct\"];\r",
															"\r",
															"    } else {\r",
															"        ltpList = [];\r",
															"        fcList = [];\r",
															"    }\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! ltpList could not be extracted.\");\r",
															"}\r",
															"\r",
															"var currentOperationServer;\r",
															"var executionAndTraceLogHttpClientLtp;\r",
															"var executionAndTraceLogTcpClientLtp;\r",
															"var newReleaseHttpClientLtp;\r",
															"var newReleaseTcpClientLtp;\r",
															"var applicationLayerTopologyHttpClientLtp;\r",
															"var updateLtpOperationClientLtp;\r",
															"try {\r",
															"    currentOperationServer = FindOperationServer(\"/v1/bequeath-your-data-and-die\", ltpList);\r",
															"\r",
															"    //Execution And Trace Log\r",
															"    let recordServiceRequestOperationClientLtp = FindOperationClientUsingCallback(\"ServiceRequestCausesLoggingRequest\", fcList, ltpList)\r",
															"    executionAndTraceLogHttpClientLtp = FindServingLtp(recordServiceRequestOperationClientLtp, ltpList);\r",
															"    executionAndTraceLogTcpClientLtp = FindServingLtp(executionAndTraceLogHttpClientLtp, ltpList);\r",
															"\r",
															"    //Bequeath Transfer Of List Of Applications\r",
															"    let bequeathingDataCausesTransferOfListOfApplicationsOperationClientLtp = FindOperationClientUsingCallback(\"PromptForBequeathingDataCausesTransferOfListOfApplications\", fcList, ltpList)\r",
															"    newReleaseHttpClientLtp = FindServingLtp(bequeathingDataCausesTransferOfListOfApplicationsOperationClientLtp, ltpList);\r",
															"    newReleaseTcpClientLtp = FindServingLtp(newReleaseHttpClientLtp, ltpList);\r",
															"    \r",
															"    //Ltp Update Request\r",
															"    updateLtpOperationClientLtp = FindOperationClientUsingCallback(\"ServiceRequestCausesLtpUpdateRequest\", fcList, ltpList)\r",
															"    applicationLayerTopologyHttpClientLtp = FindServingLtp(updateLtpOperationClientLtp, ltpList);\r",
															"    \r",
															"} catch (error) {\r",
															"    console.log(error);\r",
															"    console.log(\"! Reference objects could not be extracted.\");\r",
															"} \r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Setting Collection Variables\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    pm.collectionVariables.clear();\r",
															"    \r",
															"    pm.collectionVariables.set(\"currentOperationServer\", currentOperationServer);\r",
															"    pm.collectionVariables.set(\"executionAndTraceLogHttpClientLtp\", executionAndTraceLogHttpClientLtp);\r",
															"    pm.collectionVariables.set(\"executionAndTraceLogTcpClientLtp\", executionAndTraceLogTcpClientLtp);\r",
															"    pm.collectionVariables.set(\"newReleaseHttpClientLtp\", newReleaseHttpClientLtp);\r",
															"    pm.collectionVariables.set(\"newReleaseTcpClientLtp\", newReleaseTcpClientLtp);\r",
															"    pm.collectionVariables.set(\"applicationLayerTopologyHttpClientLtp\", applicationLayerTopologyHttpClientLtp);\r",
															"    pm.collectionVariables.set(\"updateLtpOperationClientLtp\", updateLtpOperationClientLtp);\r",
															"    pm.collectionVariables.set(\"ltpList\", ltpList);\r",
															"    pm.collectionVariables.set(\"fcList\", fcList);\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Collection variables could not be set.\");\r",
															"}\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/\r",
															"\r",
															"function FindOperationServer(operationName, ltpList) {\r",
															"    let operationServer;\r",
															"    operationServer = \"\";\r",
															"    try {\r",
															"        let sampleUuid;\r",
															"        for(let i=0; i<ltpList.length; i++) {\r",
															"            sampleUuid = ltpList[i][\"uuid\"];\r",
															"            if(sampleUuid.includes(\"op-s-\")) {\r",
															"                let sampleOperationName;\r",
															"                sampleOperationName = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
															"                if(sampleOperationName == operationName) {\r",
															"                    operationServer = ltpList[i];\r",
															"                    return operationServer;\r",
															"                }\r",
															"            }\r",
															"        }\r",
															"    } catch (error) {\r",
															"        console.log(\"! Exception in function : FindOperationServer. \");\r",
															"    }\r",
															"    return operationServer;\r",
															"}\r",
															"\r",
															"function FindOutputFcPortList(forwardingName, fcList) {\r",
															"    let outputFcPortList;\r",
															"    outputFcPortList = [];\r",
															"    try {\r",
															"        for( let i=0; i<fcList.length; i++ ) {\r",
															"            for(let j=0; j<fcList[i][\"name\"].length; j++) {               \r",
															"                if(fcList[i][\"name\"][j][\"value\"] == forwardingName) {\r",
															"                    fcPortList = fcList[i][\"fc-port\"];\r",
															"                    for(let k=0;k<fcPortList.length;k++) {\r",
															"                        if(fcPortList[k][\"port-direction\"] == \"core-model-1-4:PORT_DIRECTION_TYPE_OUTPUT\") {\r",
															"                            outputFcPortList.push(fcPortList[k]);\r",
															"                        }\r",
															"                    }\r",
															"                    return outputFcPortList;\r",
															"                }\r",
															"            }\r",
															"        }\r",
															"    } catch (error) {\r",
															"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
															"    }\r",
															"    return outputFcPortList;\r",
															"}\r",
															"\r",
															"function FindActualInstanceByUuid(expectedUuid, actualLtpList) {\r",
															"    let actualInstance;\r",
															"    actualInstance = {};\r",
															"    try {\r",
															"        for ( let i=0; i<actualLtpList.length; i++ ) {\r",
															"            let sampleUuid;\r",
															"            sampleUuid = actualLtpList[i][\"uuid\"];\r",
															"            if( sampleUuid == expectedUuid ) {\r",
															"                actualInstance = actualLtpList[i];\r",
															"                return actualInstance;\r",
															"            }\r",
															"        }\r",
															"\r",
															"    } catch (error) {\r",
															"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
															"    }\r",
															"    return undefined;\r",
															"}\r",
															"\r",
															"function FindServingLtp(clientLtp, ltpList) {\r",
															"    let servingLtp;\r",
															"    servingLtp = {};\r",
															"    try{\r",
															"        let serverLtpUuid;\r",
															"        serverLtpUuid = clientLtp[\"server-ltp\"][0];\r",
															"        for( let i=0; i<ltpList.length; i++ ) {\r",
															"            let sampleUuid;\r",
															"            sampleUuid = ltpList[i][\"uuid\"];\r",
															"            if( sampleUuid == serverLtpUuid ) {\r",
															"                servingLtp = ltpList[i];\r",
															"                return servingLtp;\r",
															"            }\r",
															"        }\r",
															"    } catch(error) {\r",
															"        console.log(error);\r",
															"        console.log(\"! Exception in function : FindServingLtp. \")\r",
															"    }\r",
															"    return servingLtp;\r",
															"}\r",
															"\r",
															"function FindOperationClientUsingCallback(callback, fcList, ltpList) {\r",
															"    let operationClientLtp\r",
															"    try {\r",
															"        let outputFcPortList = FindOutputFcPortList(callback, fcList);\r",
															"        let randomOutputFcPort = outputFcPortList[Math.floor(Math.random() * outputFcPortList.length)];\r",
															"        let outputLtpUuid = randomOutputFcPort[\"logical-termination-point\"];\r",
															"        operationClientLtp = FindActualInstanceByUuid(outputLtpUuid, ltpList);\r",
															"    } catch (error) {\r",
															"        console.log(error);\r",
															"        console.log(\"! Exception in function FindOperationClientUsingCallback. \");\r",
															"    }\r",
															"    return  operationClientLtp\r",
															"}\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "x-mock-response-code",
														"value": "200",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "reference ExecutionAndTraceLog/core-model-1-4:control-construct",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"var APPLICATION;\r",
															"var AUTHORIZATION;\r",
															"var applicationProtocol;\r",
															"var applicationAddress;\r",
															"var applicationPort;\r",
															"try {\r",
															"    APPLICATION = pm.environment.get(\"application\");\r",
															"\r",
															"    let executionAndTraceLogTcpClientLtp;\r",
															"    executionAndTraceLogTcpClientLtp = pm.collectionVariables.get(\"executionAndTraceLogTcpClientLtp\");\r",
															"\r",
															"    applicationProtocol = executionAndTraceLogTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
															"    applicationProtocol = applicationProtocol.substring(('tcp-client-interface-1-0:PROTOCOL_TYPE_').length);\r",
															"    applicationAddress = executionAndTraceLogTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-address\"];\r",
															"    if(applicationAddress.hasOwnProperty(\"ip-address\")) {\r",
															"        applicationAddress = applicationAddress[\"ip-address\"][\"ipv-4-address\"];\r",
															"    } else {\r",
															"        applicationAddress = applicationAddress[\"domain-name\"];\r",
															"    }\r",
															"    applicationPort = executionAndTraceLogTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-port\"];\r",
															" \r",
															"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Environment variables could not be loaded.\");\r",
															"}\r",
															"\r",
															"/****************************************************************************************\r",
															"* Defining Request Body\r",
															"****************************************************************************************/\r",
															"var REQUEST_BODY;\r",
															"try {\r",
															"    REQUEST_BODY = \"\";\r",
															"} catch (error) {\r",
															"    console.log(\"!Could not define request body. \");\r",
															"}\r",
															"\r",
															"/****************************************************************************************\r",
															"* Setting Local Variables and Preparing the Request\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    let URI;\r",
															"    URI = applicationProtocol + \"://\" + applicationAddress + \":\" + applicationPort + \"/core-model-1-4:control-construct\";\r",
															"    //URI = \"http://9d098835-4e91-48f3-9761-04a82ff2843e.mock.pstmn.io\" + \"/core-model-1-4:control-construct\";\r",
															"\r",
															"    let ACCEPT;\r",
															"    ACCEPT = \"application/json\";\r",
															"\r",
															"    let CONTENT_TYPE;\r",
															"    CONTENT_TYPE = \"application/json\";\r",
															"\r",
															"    pm.variables.clear();\r",
															"\r",
															"    pm.variables.set(\"uri\", URI);\r",
															"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
															"\r",
															"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
															"\r",
															"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
															"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Local variables could not be set.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Extracting Result\r",
															"****************************************************************************************/\r",
															"var ltpList;\r",
															"try {\r",
															"    let response;\r",
															"    response = pm.response;\r",
															"    \r",
															"    let responseCode;\r",
															"    responseCode = parseInt(response.code);\r",
															"    \r",
															"    if ( Math.floor(responseCode/100) === 2 ) {\r",
															"        let responseObject;\r",
															"        responseObject = JSON.parse(response.stream);\r",
															"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
															"\r",
															"    } else {\r",
															"        ltpList = [];\r",
															"    }\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! ltpList could not be extracted.\");\r",
															"}\r",
															"\r",
															"var listRecordsOfFlowOperationKey;\r",
															"try {\r",
															"    listRecordsOfFlowOperationKey = FindOperationKeyForOperationName(\"/v1/list-records-of-flow\", ltpList);\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(error);\r",
															"    console.log(\"! Reference objects could not be extracted.\");\r",
															"} \r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Setting Collection Variables\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    pm.collectionVariables.set(\"listRecordsOfFlowOperationKey\", listRecordsOfFlowOperationKey);\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Collection variables could not be set.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/\r",
															"function FindOperationKeyForOperationName(operationName, ltpList) {\r",
															"    let operationKey;\r",
															"    operationKey = \"\";\r",
															"    try {\r",
															"         let sampleUuid;\r",
															"         for ( let i=0; i<ltpList.length; i++) {\r",
															"            sampleUuid = ltpList[i][\"uuid\"];\r",
															"            if(sampleUuid.includes(\"op-s-\")){\r",
															"                let sampleOperationName;\r",
															"                sampleOperationName = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
															"                if(sampleOperationName == operationName) {\r",
															"                    operationKey = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
															"                    return operationKey; \r",
															"                }\r",
															"            }\r",
															"         }\r",
															"\r",
															"    } catch (error) {\r",
															"        console.log(\" ! Exception in function : FindOperationKeyForOperationName\")\r",
															"    }\r",
															"    return operationKey;\r",
															"}\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-mock-response-code",
														"value": "200",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "sampling /v1/bequeath-your-data-and-die",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"var APPLICATION;\r",
															"var OPERATION_KEY;\r",
															"var CURRENT_ORIGINATOR;\r",
															"var newApplicationName;\r",
															"var newApplicationRelease;\r",
															"var newApplicationProtocol;\r",
															"var newApplicationAddress;\r",
															"var dummyApplicationPort;\r",
															"try {\r",
															"    APPLICATION = pm.environment.get(\"application\");\r",
															"\r",
															"    let ltpList;\r",
															"    ltpList = APPLICATION[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
															"\r",
															"    CURRENT_ORIGINATOR = FindHttpServerApplicationName(ltpList);\r",
															"\r",
															"    let currentOperationServer;\r",
															"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
															"    \r",
															"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
															"\r",
															"    let newReleaseHttpClientLtp;\r",
															"    newReleaseHttpClientLtp = pm.collectionVariables.get(\"newReleaseHttpClientLtp\");\r",
															"\r",
															"    newApplicationName = newReleaseHttpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
															"\r",
															"    newApplicationRelease = newReleaseHttpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"release-number\"];\r",
															"\r",
															"    let newReleaseTcpClientLtp;\r",
															"    newReleaseTcpClientLtp = pm.collectionVariables.get(\"newReleaseTcpClientLtp\");\r",
															"\r",
															"    newApplicationProtocol = newReleaseTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
															"    newApplicationProtocol = newApplicationProtocol.substring(('tcp-client-interface-1-0:PROTOCOL_TYPE_').length);\r",
															"    \r",
															"    newApplicationAddress = newReleaseTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-address\"];\r",
															"\r",
															"    dummyApplicationPort = RandomTcpPort();\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(error);\r",
															"    console.log(\"! Input Data could not be loaded.\");\r",
															"}\r",
															"\r",
															"/****************************************************************************************\r",
															"* Defining Dummy Parameters\r",
															"****************************************************************************************/\r",
															"var USER_NAME;\r",
															"var ORIGINATOR;\r",
															"var X_CORRELATOR;\r",
															"var TRACE_INDICATOR;\r",
															"var CUSTOMER_JOURNEY;\r",
															"try {\r",
															"    USER_NAME = APPLICATION.userName;\r",
															"    ORIGINATOR = \"Postman\";\r",
															"    X_CORRELATOR = CreateXCorrelator();\r",
															"    TRACE_INDICATOR = \"1\";\r",
															"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
															"    \r",
															"} catch (error) {\r",
															"    console.log(\"! Could not define dummy values for parameters. \");\r",
															"}\r",
															"\r",
															"/****************************************************************************************\r",
															"* Defining Request Body\r",
															"****************************************************************************************/\r",
															"var REQUEST_BODY;\r",
															"try {\r",
															"    REQUEST_BODY = '{'\r",
															"        + '\"new-application-name\" : ' + '\"' + newApplicationName + '\",'\r",
															"        + '\"new-application-release\" : ' + '\"' + newApplicationRelease + '\",'\r",
															"        + '\"new-application-protocol\" : ' + '\"' + newApplicationProtocol + '\",'\r",
															"        + '\"new-application-address\" : ' + JSON.stringify(newApplicationAddress) + ','\r",
															"        + '\"new-application-port\" : ' +  dummyApplicationPort\r",
															"    +'}';\r",
															"} catch (error) {\r",
															"    console.log(\"!Could not define request body. \");\r",
															"}\r",
															"/****************************************************************************************\r",
															"* Setting Collection Variables\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    pm.collectionVariables.set(\"user\", USER_NAME);\r",
															"    pm.collectionVariables.set(\"originator\", ORIGINATOR);\r",
															"    pm.collectionVariables.set(\"xCorrelator\", X_CORRELATOR);\r",
															"    pm.collectionVariables.set(\"traceIndicator\", TRACE_INDICATOR);\r",
															"    pm.collectionVariables.set(\"customerJourney\", CUSTOMER_JOURNEY);\r",
															"    pm.collectionVariables.set(\"currentOriginator\", CURRENT_ORIGINATOR);\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Collection variables could not be set.\");\r",
															"}\r",
															"\r",
															"/****************************************************************************************\r",
															"* Setting Local Variables and Preparing the Request\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    let URI;\r",
															"    URI = APPLICATION.serverUrl + \"/v1/bequeath-your-data-and-die\";\r",
															"\r",
															"    let ACCEPT;\r",
															"    ACCEPT = \"application/json\";\r",
															"\r",
															"    let CONTENT_TYPE;\r",
															"    CONTENT_TYPE = \"application/json\";\r",
															"\r",
															"    pm.variables.clear();\r",
															"\r",
															"    pm.variables.set(\"uri\", URI);\r",
															"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
															"\r",
															"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
															"\r",
															"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
															"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
															"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
															"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
															"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
															"\r",
															"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
															"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(error);\r",
															"    console.log(\"! Local variables could not be set.\");\r",
															"}\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/\r",
															"\r",
															"function CreateXCorrelator() {\r",
															"    let xCorrelator;\r",
															"    xCorrelator = \"\";\r",
															"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
															"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
															"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
															"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
															"    xCorrelator += GenerateRandomHexString(12);\r",
															"    return xCorrelator;\r",
															"}\r",
															"\r",
															"function GenerateRandomHexString(length) {\r",
															"    var randomRandomHexString = \"\";\r",
															"    while (randomRandomHexString.length < length) {\r",
															"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
															"    }\r",
															"    return randomRandomHexString.substring(0,length);\r",
															"}\r",
															"\r",
															"function RandomTcpPort() {\r",
															"    let randomPort;\r",
															"    randomPort = 2000 + Math.floor( Math.random() * 1000 );\r",
															"    return randomPort;\r",
															"}\r",
															"\r",
															"function FindHttpServerApplicationName(ltpList) {\r",
															"    let applicationName;\r",
															"    applicationName = \"\";\r",
															"    for( let i=0; i<ltpList.length; i++ ) {\r",
															"        let sampleUuid;\r",
															"        sampleUuid = ltpList[i][\"uuid\"];\r",
															"        if(sampleUuid.includes(\"http-s-\")) {\r",
															"            applicationName = ltpList[i][\"layer-protocol\"][0][\"http-server-interface-1-0:http-server-interface-pac\"][\"http-server-interface-capability\"][\"application-name\"];\r",
															"            return applicationName;\r",
															"        }\r",
															"    }\r",
															"    return applicationName;\r",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Extracting Result\r",
															"****************************************************************************************/\r",
															"var RESPONSE_CODE;\r",
															"try {\r",
															"    let response;\r",
															"    response = pm.response;\r",
															"\r",
															"    RESPONSE_CODE = parseInt(response.code);\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Response Code could not be extracted.\");\r",
															"}    \r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Testing\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    pm.test(\"POST /v1/bequeath-your-data-and-die responds 204\", function () {\r",
															"        pm.expect(RESPONSE_CODE).to.equal(204);\r",
															"    });\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Testing could not be executed.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-mock-response-code",
														"value": "204",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Expected ExecutionAndTraceLog/v1/list-records-of-flow",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"var APPLICATION;\r",
															"var OPERATION_KEY;\r",
															"var applicationProtocol;\r",
															"var applicationAddress;\r",
															"var applicationPort;\r",
															"var xCorrelatorUnderTest;\r",
															"var latestMatch;\r",
															"var numberOfRecords;\r",
															"try {\r",
															"    APPLICATION = pm.environment.get(\"application\");\r",
															"\r",
															"    let executionAndTraceLogTcpClientLtp;\r",
															"    executionAndTraceLogTcpClientLtp = pm.collectionVariables.get(\"executionAndTraceLogTcpClientLtp\");\r",
															"    \r",
															"    applicationProtocol = executionAndTraceLogTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
															"    applicationProtocol = applicationProtocol.substring(('tcp-client-interface-1-0:PROTOCOL_TYPE_').length);\r",
															"    applicationAddress = executionAndTraceLogTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-address\"];\r",
															"    if(applicationAddress.hasOwnProperty(\"ip-address\")) {\r",
															"        applicationAddress = applicationAddress[\"ip-address\"][\"ipv-4-address\"];\r",
															"    } else {\r",
															"        applicationAddress = applicationAddress[\"domain-name\"];\r",
															"    }\r",
															"    applicationPort = executionAndTraceLogTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-port\"];\r",
															"\r",
															"    OPERATION_KEY = pm.collectionVariables.get(\"listRecordsOfFlowOperationKey\");\r",
															"    xCorrelatorUnderTest = pm.collectionVariables.get(\"xCorrelator\");\r",
															"    latestMatch = 0;\r",
															"    numberOfRecords = 100;\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(error)\r",
															"    console.log(\"! Input Data could not be loaded.\");\r",
															"}\r",
															"\r",
															"/****************************************************************************************\r",
															"* Defining Dummy Parameters\r",
															"****************************************************************************************/\r",
															"var USER_NAME;\r",
															"var ORIGINATOR;\r",
															"var X_CORRELATOR;\r",
															"var TRACE_INDICATOR;\r",
															"var CUSTOMER_JOURNEY;\r",
															"try {\r",
															"    USER_NAME = APPLICATION.userName;\r",
															"    ORIGINATOR = \"Postman\";\r",
															"    X_CORRELATOR = CreateXCorrelator();\r",
															"    TRACE_INDICATOR = \"1\";\r",
															"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
															"    \r",
															"} catch (error) {\r",
															"    console.log(\"! Could not define dummy values for parameters. \");\r",
															"}\r",
															"\r",
															"/****************************************************************************************\r",
															"* Defining Request Body\r",
															"****************************************************************************************/\r",
															"var REQUEST_BODY;\r",
															"try {\r",
															"    REQUEST_BODY = '{'\r",
															"                + '\"x-correlator\": \"' + xCorrelatorUnderTest +'\",'\r",
															"                + '\"latest-match\": ' + latestMatch + ','\r",
															"                + '\"number-of-records\":' + numberOfRecords\r",
															"                + '}';\r",
															"} catch (error) {\r",
															"    console.log(\"!Could not define request body. \");\r",
															"}\r",
															"\r",
															"/****************************************************************************************\r",
															"* Setting Collection Variables\r",
															"****************************************************************************************/\r",
															"/****************************************************************************************\r",
															"* Setting delay\r",
															"****************************************************************************************/\r",
															"setTimeout(function(){\r",
															"\r",
															"}, 3000);\r",
															"/****************************************************************************************\r",
															"* Setting Local Variables and Preparing the Request\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    let URI;\r",
															"    URI = applicationProtocol + \"://\" + applicationAddress + \":\" + applicationPort + \"/v1/list-records-of-flow\";\r",
															"    //URI = \"http://9d098835-4e91-48f3-9761-04a82ff2843e.mock.pstmn.io/v1/list-records-of-flow\";\r",
															"\r",
															"    let ACCEPT;\r",
															"    ACCEPT = \"application/json\";\r",
															"\r",
															"    let CONTENT_TYPE;\r",
															"    CONTENT_TYPE = \"application/json\";\r",
															"\r",
															"    pm.variables.clear();\r",
															"\r",
															"    pm.variables.set(\"uri\", URI);\r",
															"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
															"\r",
															"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
															"\r",
															"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
															"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
															"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
															"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
															"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
															"\r",
															"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
															"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(error);\r",
															"    console.log(\"! Local variables could not be set.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/\r",
															"function CreateXCorrelator() {\r",
															"    let xCorrelator;\r",
															"    xCorrelator = \"\";\r",
															"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
															"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
															"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
															"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
															"    xCorrelator += GenerateRandomHexString(12);\r",
															"    return xCorrelator;\r",
															"}\r",
															"\r",
															"function GenerateRandomHexString(length) {\r",
															"    var randomRandomHexString = \"\";\r",
															"    while (randomRandomHexString.length < length) {\r",
															"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
															"    }\r",
															"    return randomRandomHexString.substring(0, length);\r",
															"}\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"var expectedXCorrelator;\r",
															"var expectedUser;\r",
															"var expectedOriginator;\r",
															"var expectedTraceIndicator;\r",
															"var expectedApplicationName;\r",
															"var expectedReleaseNumber;\r",
															"var expectedOperationName;\r",
															"try {\r",
															"    expectedXCorrelator = pm.collectionVariables.get(\"xCorrelator\");\r",
															"    expectedUser = pm.collectionVariables.get(\"user\");\r",
															"    expectedOriginator = pm.collectionVariables.get(\"currentOriginator\");\r",
															"    expectedTraceIndicator = pm.collectionVariables.get(\"traceIndicator\");\r",
															"\r",
															"    let expectedHttpClientLtp;\r",
															"    expectedHttpClientLtp = pm.collectionVariables.get(\"applicationLayerTopologyHttpClientLtp\");\r",
															"    expectedApplicationName = expectedHttpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
															"    expectedReleaseNumber = expectedHttpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"release-number\"];\r",
															"\r",
															"    let expectedOperationClient;\r",
															"    expectedOperationClient = pm.collectionVariables.get(\"updateLtpOperationClientLtp\");\r",
															"    expectedOperationName = expectedOperationClient[\"layer-protocol\"][0][\"operation-client-interface-1-0:operation-client-interface-pac\"][\"operation-client-interface-configuration\"][\"operation-name\"];\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Could not load Input Data. \");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Extracting Result\r",
															"****************************************************************************************/\r",
															"var RESPONSE_CODE;\r",
															"var serviceRecordList;\r",
															"try {\r",
															"    let response;\r",
															"    response = pm.response;\r",
															"    \r",
															"    RESPONSE_CODE = parseInt(response.code);\r",
															"\r",
															"    if(Math.floor(RESPONSE_CODE/100) === 2) {\r",
															"        serviceRecordList = JSON.parse(response.stream);\r",
															"    }\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Response Code could not be extracted.\");\r",
															"}    \r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Testing\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    pm.test(\"POST ExecutionAndTraceLog/v1/list-records-of-flow responds 200\", function () {\r",
															"        pm.expect(RESPONSE_CODE).to.equal(200);\r",
															"    });\r",
															"\r",
															"    let foundAnEntryWithTheExpectedHeaderValuesInEatl;\r",
															"    foundAnEntryWithTheExpectedHeaderValuesInEatl = false;\r",
															"    let responseCodeofTriggeredForwarding;\r",
															"    responseCodeofTriggeredForwarding = 0;\r",
															"    for(let i=0; i<serviceRecordList.length; i++)  {\r",
															"        if( serviceRecordList[i][\"application-name\"] == expectedApplicationName\r",
															"                && serviceRecordList[i][\"release-number\"] == expectedReleaseNumber\r",
															"                && serviceRecordList[i][\"operation-name\"] == expectedOperationName\r",
															"                && serviceRecordList[i][\"x-correlator\"] == expectedXCorrelator\r",
															"                && serviceRecordList[i][\"user\"] == expectedUser\r",
															"                && serviceRecordList[i][\"originator\"] == expectedOriginator\r",
															"                && serviceRecordList[i][\"trace-indicator\"].includes(expectedTraceIndicator) ) {\r",
															"\r",
															"            foundAnEntryWithTheExpectedHeaderValuesInEatl = true;\r",
															"            responseCodeofTriggeredForwarding =  serviceRecordList[i][\"response-code\"];\r",
															"            break;\r",
															"        }\r",
															"    }\r",
															"\r",
															"    if(foundAnEntryWithTheExpectedHeaderValuesInEatl) {\r",
															"        pm.test(\"port Update in LTP is successfully notified to ALT with response-code 204\", function () {\r",
															"            pm.expect(responseCodeofTriggeredForwarding).to.equal(204);        \r",
															"        });\r",
															"    } else {\r",
															"        pm.test(\"port Update in LTP is successfully notified to ALT\", function () {\r",
															"            pm.expect(foundAnEntryWithTheExpectedHeaderValuesInEatl).to.be.true;        \r",
															"        });\r",
															"    }  \r",
															"\r",
															"} catch (error) {\r",
															"    console.log(error);\r",
															"    console.log(\"! Testing could not be executed.\");\r",
															"}\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-mock-response-code",
														"value": "200",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "initial newRelease/remote-port",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"var APPLICATION;\r",
															"var newReleaseTcpClientUuid;\r",
															"var initialReleaseRemotePort;\r",
															"try {\r",
															"    APPLICATION = pm.environment.get(\"application\");\r",
															"    \r",
															"    let newReleaseTcpClientLtp;\r",
															"    newReleaseTcpClientLtp = pm.collectionVariables.get(\"newReleaseTcpClientLtp\");\r",
															"\r",
															"    newReleaseTcpClientUuid = newReleaseTcpClientLtp[\"uuid\"];\r",
															"\r",
															"    initialReleaseRemotePort = newReleaseTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-port\"];\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Variables could not be loaded.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Setting Local Variables and Preparing the Request\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    let URI;\r",
															"    URI = APPLICATION.serverUrl \r",
															"            + \"/core-model-1-4:control-construct/logical-termination-point=\" \r",
															"            + newReleaseTcpClientUuid\r",
															"            + \"/layer-protocol=0/tcp-client-interface-1-0:tcp-client-interface-pac/tcp-client-interface-configuration/remote-port\";\r",
															"\r",
															"    let REQUEST_BODY;\r",
															"    REQUEST_BODY = '{ '\r",
															"                    +   '\"tcp-client-interface-1-0:remote-port\": ' + initialReleaseRemotePort\r",
															"                    + ' }';\r",
															"\r",
															"    let AUTHORIZATION;\r",
															"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
															"\r",
															"    let ACCEPT;\r",
															"    ACCEPT = \"application/json\";\r",
															"\r",
															"    let CONTENT_TYPE;\r",
															"    CONTENT_TYPE = \"application/json\";\r",
															"\r",
															"\r",
															"    pm.variables.clear();\r",
															"\r",
															"    pm.variables.set(\"uri\", URI);\r",
															"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
															"\r",
															"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
															"\r",
															"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
															"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(error)\r",
															"    console.log(\"! Local variables could not be set.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-mock-response-code",
														"value": "204",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Check /core-model-1-4:control-construct",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"var APPLICATION;\r",
															"var AUTHORIZATION;\r",
															"try {\r",
															"    APPLICATION = pm.environment.get(\"application\");\r",
															"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
															"\r",
															"    oamPath = \"/core-model-1-4:control-construct\";\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Environment variables could not be loaded.\");\r",
															"}\r",
															"\r",
															"/****************************************************************************************\r",
															"* Defining Request Body\r",
															"****************************************************************************************/\r",
															"var REQUEST_BODY;\r",
															"try {\r",
															"    REQUEST_BODY = \"\";\r",
															"} catch (error) {\r",
															"    console.log(\"!Could not define request body. \");\r",
															"}\r",
															"\r",
															"/****************************************************************************************\r",
															"* Setting Local Variables and Preparing the Request\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    let URI;\r",
															"    URI = APPLICATION.serverUrl + oamPath;\r",
															"\r",
															"    let ACCEPT;\r",
															"    ACCEPT = \"application/json\";\r",
															"\r",
															"    let CONTENT_TYPE;\r",
															"    CONTENT_TYPE = \"application/json\";\r",
															"\r",
															"    pm.variables.clear();\r",
															"\r",
															"    pm.variables.set(\"uri\", URI);\r",
															"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
															"\r",
															"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
															"\r",
															"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
															"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Local variables could not be set.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"var expectedLogicalTerminationPoint;\r",
															"var expectedForwardingConstruct;\r",
															"try {\r",
															"    expectedLogicalTerminationPoint = pm.collectionVariables.get(\"ltpList\");\r",
															"    expectedForwardingConstruct = pm.collectionVariables.get(\"fcList\");\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Collection variables could not be loaded.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Extracting Result\r",
															"****************************************************************************************/\r",
															"var RESPONSE_CODE;\r",
															"var RESPONSE;\r",
															"try {\r",
															"    let response;\r",
															"    response = pm.response;\r",
															"\r",
															"    RESPONSE_CODE = parseInt(response.code);\r",
															"\r",
															"    if (Math.floor(RESPONSE_CODE / 100) === 2) {\r",
															"        RESPONSE = JSON.parse(response.stream);\r",
															"    } else {\r",
															"        RESPONSE = [];\r",
															"    }\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Result value lists could not be extracted.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Testing\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    pm.test(\"GET /core-model-1-4:control-construct responds 200\", function () {\r",
															"        pm.expect(RESPONSE_CODE).to.equal(200);\r",
															"    });\r",
															"\r",
															"    let actualLtpList;\r",
															"    actualLtpList = RESPONSE[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
															"\r",
															"    pm.test(\"Received logical-termination-point is same as intial instance \", function () {\r",
															"        pm.expect(actualLtpList).to.deep.equal(expectedLogicalTerminationPoint);\r",
															"    });\r",
															"\r",
															"    let actualFcList;\r",
															"    actualFcList = RESPONSE[\"core-model-1-4:control-construct\"][\"forwarding-domain\"][0][\"forwarding-construct\"];\r",
															"\r",
															"    pm.test(\"Received forwarding-construct is same as intial instance \", function () {\r",
															"        pm.expect(actualFcList).to.deep.equal(expectedForwardingConstruct);\r",
															"    });\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Testing could not be executed.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-mock-response-code",
														"value": "200",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"description": "##Gets new-application-port update trigger update-ltp to ALT?\n#### Requires:\n- ExecutionAndTraceLog/OamLog server to operate\n\n#### Preparation:\n- GETing CC (/core-model-1-4:control-construct)\n  - search CC for output fc-port of ServiceRequestCausesLoggingRequest, \nits corresponding op-c, http-c and tcp-c, storing them for later verification request. \n  - searching CC for output-fc-port of ServiceRequestCausesLtpUpdateRequest, its corresponding op-c, http-c, storing them.\n  - searching CC for op-s of /v1/bequeath-your-data-and-die, storing operation-key\n  - searcing CC for output port of PromptForBequeathingDataCausesTransferOfListOfApplications, find corresponding op-c, http-c and tcp-c, store them.\n- GETting EaTL/CC (while using IP, protocol and port from above)\n  - searching CC for op-c of /v1/list-records-of-flow, storing operation-key\n- POST /v1/bequeath-your-data-and-die with\n  - new-application-name and new-application-release attribute according to chosen http-c\n  -  new-application-port with random generated value within specified range\n  - new-application-protocol, new-application-address according to chosen tcp-c\n  - operation-key from above\n  - reasonable parameters\n\n#### Testing:\n- POST ExecutionAndTraceLog/v1/list-records-of-flow with \n   - IP, protocol and port from above\n   - operation-key from above\n   - DummyValue of x-correlator\n   - checking response for entry with application data from ServiceRequestCausesLtpUpdateRequest\n   - checking same record for containing DummyXCorrelator &DummyTraceIndicator\n\n#### Clearing:\n- PUT NewRelease/remote-port with original value\n\n#### Clearance check:\n- Check if the logical-termination-point instance is the same as initial configuration\n- Check if the forwarding-construct instance is the same as initial configuration"
								}
							]
						}
					]
				},
				{
					"name": "Exit",
					"item": [
						{
							"name": "for exiting /v1/bequeath-your-data-and-die",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"/****************************************************************************************\r",
											"* Loading Input Data\r",
											"****************************************************************************************/\r",
											"var URI;\r",
											"try {\r",
											"    URI = pm.environment.get(\"dummyUri\");\r",
											"\r",
											"} catch (error) {\r",
											"    console.log(\"! Loading Input Data failed.\");\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Updating Environmental Variables and Determining the next Step\r",
											"****************************************************************************************/\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Setting Local Variables and Preparing the Request\r",
											"****************************************************************************************/\r",
											"try {\r",
											"    pm.variables.clear();\r",
											"\r",
											"    let REQUEST_BODY;\r",
											"    REQUEST_BODY = \"\";\r",
											"\r",
											"    let AUTHORIZATION;\r",
											"    AUTHORIZATION = \"\";\r",
											"\r",
											"    let OPERATION_KEY;\r",
											"    OPERATION_KEY = \"\";\r",
											"\r",
											"    pm.variables.set(\"uri\", URI);\r",
											"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
											"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
											"    pm.request.headers.upsert({key:\"operationKey\", value:OPERATION_KEY});\r",
											"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});\r",
											"    pm.request.headers.upsert({key:\"Content-Type\", value:\"application/json\"});\r",
											"\r",
											"} catch (error) {\r",
											"    console.log(\"! Setting Local Variables and Preparing the Request failed.\");\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Functions\r",
											"****************************************************************************************/\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{uri}}",
									"host": [
										"{{uri}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Termination",
			"item": [
				{
					"name": "=====> JustJumpToTarget =====>",
					"item": [
						{
							"name": "=====> JustJumpToTarget =====>",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(\"\\n----- JustJumpToTarget --------------------------------------------------\");",
											"/****************************************************************************************",
											"* ",
											"* This is a request for daily working with the Validator.",
											"* It just makes the program flow jumping to the Request named \"=====> Target =====>\".",
											"* ",
											"****************************************************************************************/",
											" ",
											" ",
											"/****************************************************************************************",
											"* Loading Input Data",
											"****************************************************************************************/",
											"try {",
											"    var URI;",
											"    URI = pm.environment.get(\"dummyUri\");",
											"",
											"} catch (error) {",
											"    console.log(\"! Environment variables could not be loaded.\");",
											"}",
											"",
											"",
											"/****************************************************************************************",
											"* Setting up Local Variables and Preparing the Request",
											"****************************************************************************************/",
											"try {",
											"    pm.variables.clear();",
											"",
											"    postman.setNextRequest(\"=====> Target =====>\");",
											"",
											"    pm.variables.set(\"uri\", URI);",
											"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
											"",
											"} catch (error) {",
											"    console.log(\"! Local variables could not be set.\");",
											"}",
											"",
											"",
											"/****************************************************************************************",
											"* Functions",
											"****************************************************************************************/",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{uri}}",
									"host": [
										"{{uri}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "=====> Target =====>",
					"item": [
						{
							"name": "=====> Target =====>",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(\"\\n----- Target --------------------------------------------------\");",
											"/****************************************************************************************",
											"* ",
											"* Here starts the execution of specific validation tests",
											"* ",
											"****************************************************************************************/",
											"",
											"",
											"/****************************************************************************************",
											"* Loading Input Data",
											"****************************************************************************************/",
											"try {",
											"    var URI;",
											"    URI = pm.environment.get(\"dummyUri\");",
											"",
											"} catch (error) {",
											"    console.log(\"! Environment variables could not be loaded.\");",
											"}",
											"",
											"",
											"/****************************************************************************************",
											"* Setting up Local Variables and Preparing the Request",
											"****************************************************************************************/",
											"try {",
											"    pm.variables.clear();",
											"",
											"    pm.variables.set(\"uri\", URI);",
											"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
											"",
											"} catch (error) {",
											"    console.log(\"! Local variables could not be set.\");",
											"}",
											"",
											"",
											"/****************************************************************************************",
											"* Functions",
											"****************************************************************************************/",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{uri}}",
									"host": [
										"{{uri}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "=====> JustJumpToTheEnd =====>",
					"item": [
						{
							"name": "=====> JustJumpToTheEnd =====>",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(\"\\n----- JustJumpToEnd --------------------------------------------------\");",
											"/****************************************************************************************",
											"* ",
											"* This is a request for daily working with the Validator.",
											"* It just makes the program flow jumping to the Request named \"=====> End\".",
											"* ",
											"****************************************************************************************/",
											" ",
											" ",
											"/****************************************************************************************",
											"* Loading Input Data",
											"****************************************************************************************/",
											"try {",
											"    var URI;",
											"    URI = pm.environment.get(\"dummyUri\");",
											"",
											"} catch (error) {",
											"    console.log(\"! Environment variables could not be loaded.\");",
											"}",
											"",
											"",
											"/****************************************************************************************",
											"* Setting up Local Variables and Preparing the Request",
											"****************************************************************************************/",
											"try {",
											"    pm.variables.clear();",
											"",
											"    postman.setNextRequest(\"=====> End\");",
											"",
											"    pm.variables.set(\"uri\", URI);",
											"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
											"",
											"} catch (error) {",
											"    console.log(\"! Local variables could not be set.\");",
											"}",
											"",
											"",
											"/****************************************************************************************",
											"* Functions",
											"****************************************************************************************/",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{uri}}",
									"host": [
										"{{uri}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "=====> End",
					"item": [
						{
							"name": "=====> End",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(\"\\n----- End --------------------------------------------------\");",
											"/****************************************************************************************",
											"* ",
											"* Here ends the validation",
											"*",
											"****************************************************************************************/",
											"",
											"",
											"/****************************************************************************************",
											"* Loading Input Data",
											"****************************************************************************************/",
											"try {",
											"    var URI;",
											"    URI = pm.environment.get(\"dummyUri\");",
											"",
											"} catch (error) {",
											"    console.log(\"! Environment variables could not be loaded.\");",
											"}",
											"",
											"",
											"/****************************************************************************************",
											"* Setting up Local Variables and Preparing the Request",
											"****************************************************************************************/",
											"try {",
											"    pm.variables.clear();",
											"",
											"    pm.variables.set(\"uri\", URI);",
											"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
											"",
											"} catch (error) {",
											"    console.log(\"! Local variables could not be set.\");",
											"}",
											"",
											"",
											"/****************************************************************************************",
											"* Functions",
											"****************************************************************************************/",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{uri}}",
									"host": [
										"{{uri}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "PostTermination",
			"item": [
				{
					"name": "Deep check of CC for being at initial stage",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"\\n----- GET /core-model-1-4:control-construct - cross verifying with the initial data to make sure initial configurations are maintained after test-suite run -------------------------------\");\r",
									"/****************************************************************************************\r",
									"* Loading Input Data\r",
									"****************************************************************************************/\r",
									"var APPLICATION;\r",
									"var AUTHORIZATION;\r",
									"try {\r",
									"    APPLICATION = pm.environment.get(\"application\");\r",
									"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
									"\r",
									"    oamPath = \"/core-model-1-4:control-construct\";\r",
									"\r",
									"} catch (error) {\r",
									"    console.log(\"! Environment variables could not be loaded.\");\r",
									"}\r",
									"\r",
									"/****************************************************************************************\r",
									"* Defining Request Body\r",
									"****************************************************************************************/\r",
									"var REQUEST_BODY;\r",
									"try {\r",
									"    REQUEST_BODY = \"\";\r",
									"} catch (error) {\r",
									"    console.log(\"!Could not define request body. \");\r",
									"}\r",
									"\r",
									"/****************************************************************************************\r",
									"* Setting Local Variables and Preparing the Request\r",
									"****************************************************************************************/\r",
									"try {\r",
									"    let URI;\r",
									"    URI = APPLICATION.serverUrl + oamPath;\r",
									"\r",
									"    let ACCEPT;\r",
									"    ACCEPT = \"application/json\";\r",
									"\r",
									"    let CONTENT_TYPE;\r",
									"    CONTENT_TYPE = \"application/json\";\r",
									"\r",
									"    pm.variables.clear();\r",
									"\r",
									"    pm.variables.set(\"uri\", URI);\r",
									"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
									"\r",
									"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
									"\r",
									"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
									"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
									"\r",
									"} catch (error) {\r",
									"    console.log(\"! Local variables could not be set.\");\r",
									"}\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									"* Functions\r",
									"****************************************************************************************/\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"/****************************************************************************************\r",
									"* Loading Input Data\r",
									"****************************************************************************************/\r",
									"var expectedControlConstruct;\r",
									"let expectedProfileList;\r",
									"var expectedLtpList;\r",
									"var expectedFDList;\r",
									"try {\r",
									"    let APPLICATION;\r",
									"    APPLICATION = pm.environment.get(\"application\");\r",
									"    expectedControlConstruct = APPLICATION[\"core-model-1-4:control-construct\"];\r",
									"    expectedProfileList = expectedControlConstruct[\"profile-collection\"][\"profile\"];\r",
									"    expectedLtpList = expectedControlConstruct[\"logical-termination-point\"];\r",
									"    expectedFDList = expectedControlConstruct[\"forwarding-domain\"];\r",
									"\r",
									"} catch (error) {\r",
									"    console.log(\"! Could not load Input Data. \");\r",
									"}\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									"* Extracting Result\r",
									"****************************************************************************************/\r",
									"var RESPONSE_CODE;\r",
									"var actualControlConstruct;\r",
									"try {\r",
									"    let response;\r",
									"    response = pm.response;\r",
									"\r",
									"    RESPONSE_CODE = parseInt(response.code);\r",
									"\r",
									"    if ( Math.floor(RESPONSE_CODE/100) === 2 ) {\r",
									"        actualControlConstruct = JSON.parse(response.stream);\r",
									"    } else {\r",
									"        actualControlConstruct = {};\r",
									"    }\r",
									"\r",
									"} catch (error) {\r",
									"    console.log(\"! Response Code could not be extracted.\");\r",
									"}    \r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									"* Testing\r",
									"****************************************************************************************/\r",
									"try {\r",
									"    pm.test(\"POST /core-model-1-4:control-construct responds 200\", function () {\r",
									"        pm.expect(RESPONSE_CODE).to.equal(200);\r",
									"    });\r",
									"    pm.test(\"Control construct could be found \" , function () {\r",
									"        pm.expect(actualControlConstruct).to.not.equal(undefined);\r",
									"        pm.expect(Object.keys(actualControlConstruct).length).to.not.equal(0);\r",
									"    });\r",
									"\r",
									"    if( actualControlConstruct != undefined ) { \r",
									"                \r",
									"        pm.test(\"control-construct uuid '\" + expectedControlConstruct[\"uuid\"] + \"' could be found \" , function () {\r",
									"            pm.expect(actualControlConstruct[\"core-model-1-4:control-construct\"][\"uuid\"]).to.not.equal(undefined);\r",
									"            pm.expect(actualControlConstruct[\"core-model-1-4:control-construct\"][\"uuid\"]).to.equal(expectedControlConstruct[\"uuid\"]);\r",
									"        });\r",
									"\r",
									"        //testing profile collection\r",
									"\r",
									"        var actualProfileList;\r",
									"        actualProfileList = actualControlConstruct[\"core-model-1-4:control-construct\"][\"profile-collection\"][\"profile\"];\r",
									"        pm.test(\"profile list could be found \" , function () {\r",
									"            pm.expect(actualProfileList).to.not.equal(undefined);\r",
									"            pm.expect(Object.keys(actualProfileList).length).to.not.equal(0);\r",
									"        });\r",
									"        if(actualProfileList!=undefined) {\r",
									"            for ( let expectedProfileIndex=0; expectedProfileIndex<expectedProfileList.length; expectedProfileIndex++ ) {\r",
									"                let expectedProfileInstance;\r",
									"                expectedProfileInstance = expectedProfileList[expectedProfileIndex];\r",
									"                let actualProfileInstance = FindActualInstance(expectedProfileInstance[\"uuid\"], actualProfileList);\r",
									"                pm.test(\"Profile instance '\" + expectedProfileInstance[\"uuid\"] + \"' could be found \" , function () {\r",
									"                    pm.expect(actualProfileInstance).to.not.equal(undefined);\r",
									"                    pm.expect(Object.keys(actualProfileInstance).length).to.not.equal(0);\r",
									"                });\r",
									"                if(actualProfileInstance != undefined) {\r",
									"                    console.log(\"testing \" + expectedProfileInstance[\"uuid\"]);\r",
									"                    pm.test(\"Provides expected profile-name '\" + expectedProfileInstance[\"profile-name\"] + \"' for \" + expectedProfileInstance[\"uuid\"] + \"'\", function () {\r",
									"                            pm.expect(actualProfileInstance[\"profile-name\"]).to.equal(expectedProfileInstance[\"profile-name\"]);\r",
									"                    });\r",
									"                    if(expectedProfileInstance[\"profile-name\"].includes(\"PROFILE_NAME_TYPE_ACTION_PROFILE\")) {\r",
									"                        let expectedActionProfileCapability;\r",
									"                        expectedActionProfileCapability = expectedProfileInstance[\"action-profile-1-0:action-profile-pac\"][\"action-profile-capability\"];\r",
									"                        let actualActionProfileCapability;\r",
									"                        actualActionProfileCapability = actualProfileInstance[\"action-profile-1-0:action-profile-pac\"][\"action-profile-capability\"];\r",
									"                        pm.test(\"action-profile-capability class could be found for '\" + expectedProfileInstance[\"uuid\"] + \"'\" , function () {\r",
									"                            pm.expect(actualActionProfileCapability).to.not.equal(undefined);\r",
									"                            pm.expect(Object.keys(actualActionProfileCapability).length).to.not.equal(0);\r",
									"                        });\r",
									"                        if(actualActionProfileCapability != undefined) {\r",
									"                            pm.test(\"Provides expected properties in capability class for '\" + expectedProfileInstance[\"uuid\"] + \"'\" , function () {\r",
									"                                pm.expect(actualActionProfileCapability[\"operation-name\"]).to.equal(expectedActionProfileCapability[\"operation-name\"]);\r",
									"                                pm.expect(actualActionProfileCapability[\"label\"]).to.equal(expectedActionProfileCapability[\"label\"]);\r",
									"                                pm.expect(actualActionProfileCapability[\"display-in-new-browser-window\"]).to.equal(expectedActionProfileCapability[\"display-in-new-browser-window\"]);\r",
									"                            });\r",
									"                        }\r",
									"                        let expectedActionProfileConfiguration;\r",
									"                        expectedActionProfileConfiguration = expectedProfileInstance[\"action-profile-1-0:action-profile-pac\"][\"action-profile-configuration\"];\r",
									"                        let actualActionProfileConfiguration;\r",
									"                        actualActionProfileConfiguration = actualProfileInstance[\"action-profile-1-0:action-profile-pac\"][\"action-profile-configuration\"];\r",
									"                        pm.test(\"action-profile-configuration class could be found for '\" + expectedProfileInstance[\"uuid\"] + \"'\" , function () {\r",
									"                            pm.expect(actualActionProfileConfiguration).to.not.equal(undefined);\r",
									"                            pm.expect(Object.keys(actualActionProfileConfiguration).length).to.not.equal(0);\r",
									"                        });\r",
									"                        if(actualActionProfileConfiguration != undefined) {\r",
									"                            pm.test(\"Provides expected properties in configuration class for '\" + expectedProfileInstance[\"uuid\"] + \"'\" , function () {\r",
									"                                pm.expect(actualActionProfileConfiguration[\"consequent-operation-reference\"]).to.equal(expectedActionProfileConfiguration[\"consequent-operation-reference\"]);\r",
									"                            });\r",
									"                        }\r",
									"                    } else if (expectedProfileInstance[\"profile-name\"].includes(\"PROFILE_NAME_TYPE_GENERIC_RESPONSE_PROFILE\")) {\r",
									"                        let expectedResponseProfileCapability;\r",
									"                        expectedResponseProfileCapability = expectedProfileInstance[\"response-profile-1-0:response-profile-pac\"][\"response-profile-capability\"];\r",
									"                        let actualResponseProfileCapability;\r",
									"                        actualResponseProfileCapability = actualProfileInstance[\"response-profile-1-0:response-profile-pac\"][\"response-profile-capability\"];\r",
									"                        pm.test(\"response-profile-capability class could be found for '\" + expectedProfileInstance[\"uuid\"] + \"'\" , function () {\r",
									"                            pm.expect(actualResponseProfileCapability).to.not.equal(undefined);\r",
									"                            pm.expect(Object.keys(actualResponseProfileCapability).length).to.not.equal(0);\r",
									"                        });\r",
									"                        if(actualResponseProfileCapability != undefined) {\r",
									"                            pm.test(\"Provides expected properties in capability class for '\" + expectedProfileInstance[\"uuid\"] + \"'\" , function () {\r",
									"                                pm.expect(actualResponseProfileCapability[\"operation-name\"]).to.equal(expectedResponseProfileCapability[\"operation-name\"]);\r",
									"                                pm.expect(JSON.stringify(actualResponseProfileCapability[\"field-name\"])).to.equal(JSON.stringify(expectedResponseProfileCapability[\"field-name\"]));\r",
									"                                pm.expect(actualResponseProfileCapability[\"datatype\"]).to.equal(expectedResponseProfileCapability[\"datatype\"]);\r",
									"                            });\r",
									"                        }\r",
									"                        let expectedResponseProfileConfiguration;\r",
									"                        expectedResponseProfileConfiguration = expectedProfileInstance[\"response-profile-1-0:response-profile-pac\"][\"response-profile-configuration\"];\r",
									"                        let actualResponseProfileConfiguration;\r",
									"                        actualResponseProfileConfiguration = actualProfileInstance[\"response-profile-1-0:response-profile-pac\"][\"response-profile-configuration\"];\r",
									"                        pm.test(\"response-profile-configuration class could be found for '\" + expectedProfileInstance[\"uuid\"] + \"'\" , function () {\r",
									"                            pm.expect(actualResponseProfileConfiguration).to.not.equal(undefined);\r",
									"                            pm.expect(Object.keys(actualResponseProfileConfiguration).length).to.not.equal(0);\r",
									"                        });\r",
									"                        if(actualResponseProfileConfiguration != undefined) {\r",
									"                            pm.test(\"Provides expected properties in configuration class for '\" + expectedProfileInstance[\"uuid\"] + \"'\" , function () {\r",
									"                                pm.expect(JSON.stringify(actualResponseProfileConfiguration[\"value\"])).to.equal(JSON.stringify(expectedResponseProfileConfiguration[\"value\"]));\r",
									"                            });\r",
									"                        }\r",
									"                    } else if (expectedProfileInstance[\"profile-name\"].includes(\"PROFILE_NAME_TYPE_FILE_PROFILE\")) {\r",
									"                        let expectedFileProfileCapability;\r",
									"                        expectedFileProfileCapability = expectedProfileInstance[\"file-profile-1-0:file-profile-pac\"][\"file-profile-capability\"];\r",
									"                        let actualFileProfileCapability;\r",
									"                        actualFileProfileCapability = actualProfileInstance[\"file-profile-1-0:file-profile-pac\"][\"file-profile-capability\"];\r",
									"                        pm.test(\"file-profile-capability class could be found for '\" + expectedProfileInstance[\"uuid\"] + \"'\" , function () {\r",
									"                            pm.expect(actualFileProfileCapability).to.not.equal(undefined);\r",
									"                            pm.expect(Object.keys(actualFileProfileCapability).length).to.not.equal(0);\r",
									"                        });\r",
									"                        if(actualFileProfileCapability != undefined) {\r",
									"                            pm.test(\"Provides expected properties in capability class for '\" + expectedProfileInstance[\"uuid\"] + \"'\" , function () {\r",
									"                                pm.expect(actualFileProfileCapability[\"file-identifier\"]).to.equal(expectedFileProfileCapability[\"file-identifier\"]);\r",
									"                                pm.expect(actualFileProfileCapability[\"file-description\"]).to.equal(expectedFileProfileCapability[\"file-description\"]);\r",
									"                            });\r",
									"                        }\r",
									"                        let expectedFileProfileConfiguration;\r",
									"                        expectedFileProfileConfiguration = expectedProfileInstance[\"file-profile-1-0:file-profile-pac\"][\"file-profile-configuration\"];\r",
									"                        let actualFileProfileConfiguration;\r",
									"                        actualFileProfileConfiguration = actualProfileInstance[\"file-profile-1-0:file-profile-pac\"][\"file-profile-configuration\"];\r",
									"                        pm.test(\"file-profile-configuration class could be found for '\" + expectedProfileInstance[\"uuid\"] + \"'\" , function () {\r",
									"                            pm.expect(actualFileProfileConfiguration).to.not.equal(undefined);\r",
									"                            pm.expect(Object.keys(actualFileProfileConfiguration).length).to.not.equal(0);\r",
									"                        });\r",
									"                        if(actualFileProfileConfiguration != undefined) {\r",
									"                            pm.test(\"Provides expected properties in configuration class for '\" + expectedProfileInstance[\"uuid\"] + \"'\" , function () {\r",
									"                                pm.expect(actualFileProfileConfiguration[\"value\"]).to.equal(expectedFileProfileConfiguration[\"value\"]);\r",
									"                            });\r",
									"                            if(expectedFileProfileConfiguration.hasOwnProperty(\"user-name\")) {\r",
									"                                pm.expect(actualFileProfileConfiguration[\"user-name\"]).to.equal(expectedFileProfileConfiguration[\"user-name\"]);\r",
									"                            }\r",
									"                            if(expectedFileProfileConfiguration.hasOwnProperty(\"password\")) {\r",
									"                                pm.expect(actualFileProfileConfiguration[\"password\"]).to.equal(expectedFileProfileConfiguration[\"password\"]);\r",
									"                            }\r",
									"                            if(expectedFileProfileConfiguration.hasOwnProperty(\"operation\")) {\r",
									"                                pm.expect(actualFileProfileConfiguration[\"operation\"]).to.equal(expectedFileProfileConfiguration[\"operation\"]);\r",
									"                            }\r",
									"                        }\r",
									"                    } else if (expectedProfileInstance[\"profile-name\"].includes(\"PROFILE_NAME_TYPE_INTEGER_PROFILE\")) {\r",
									"                        let expectedIntegerProfileCapability;\r",
									"                        expectedIntegerProfileCapability = expectedProfileInstance[\"integer-profile-1-0:integer-profile-pac\"][\"integer-profile-capability\"];\r",
									"                        let actualIntegerProfileCapability;\r",
									"                        actualIntegerProfileCapability = actualProfileInstance[\"integer-profile-1-0:integer-profile-pac\"][\"integer-profile-capability\"];\r",
									"                        pm.test(\"integer-profile-capability class could be found for '\" + expectedProfileInstance[\"uuid\"] + \"'\" , function () {\r",
									"                            pm.expect(actualIntegerProfileCapability).to.not.equal(undefined);\r",
									"                            pm.expect(Object.keys(actualIntegerProfileCapability).length).to.not.equal(0);\r",
									"                        });\r",
									"                        if(actualIntegerProfileCapability != undefined) {\r",
									"                            pm.test(\"Provides expected properties in capability class for '\" + expectedProfileInstance[\"uuid\"] + \"'\" , function () {\r",
									"                                pm.expect(actualIntegerProfileCapability[\"integer-name\"]).to.equal(expectedIntegerProfileCapability[\"integer-name\"]);\r",
									"                                if(expectedIntegerProfileCapability.hasOwnProperty(\"unit\")) {\r",
									"                                    pm.expect(actualIntegerProfileCapability[\"unit\"]).to.equal(expectedIntegerProfileCapability[\"unit\"]);\r",
									"                                }\r",
									"                                if(expectedIntegerProfileCapability.hasOwnProperty(\"minimum\")) {\r",
									"                                    pm.expect(actualIntegerProfileCapability[\"minimum\"]).to.equal(expectedIntegerProfileCapability[\"minimum\"]);\r",
									"                                }\r",
									"                                if(expectedIntegerProfileCapability.hasOwnProperty(\"maximum\")) {\r",
									"                                    pm.expect(actualIntegerProfileCapability[\"maximum\"]).to.equal(expectedIntegerProfileCapability[\"maximum\"]);\r",
									"                                }\r",
									"                            });\r",
									"                        }\r",
									"                        let expectedIntegerProfileConfiguration;\r",
									"                        expectedIntegerProfileConfiguration = expectedProfileInstance[\"integer-profile-1-0:integer-profile-pac\"][\"integer-profile-configuration\"];\r",
									"                        let actualIntegerProfileConfiguration;\r",
									"                        actualIntegerProfileConfiguration = actualProfileInstance[\"integer-profile-1-0:integer-profile-pac\"][\"integer-profile-configuration\"];\r",
									"                        pm.test(\"integer-profile-configuration class could be found for '\" + expectedProfileInstance[\"uuid\"] + \"'\" , function () {\r",
									"                            pm.expect(actualIntegerProfileConfiguration).to.not.equal(undefined);\r",
									"                            pm.expect(Object.keys(actualIntegerProfileConfiguration).length).to.not.equal(0);\r",
									"                        });\r",
									"                        if(actualIntegerProfileConfiguration != undefined) {\r",
									"                            pm.test(\"Provides expected properties in configuration class for '\" + expectedProfileInstance[\"uuid\"] + \"'\" , function () {\r",
									"                                pm.expect(actualIntegerProfileConfiguration[\"integer-value\"]).to.equal(expectedIntegerProfileConfiguration[\"integer-value\"]);\r",
									"                            });\r",
									"                        }\r",
									"                    } else if (expectedProfileInstance[\"profile-name\"].includes(\"PROFILE_NAME_TYPE_STRING_PROFILE\")) {\r",
									"                        let expectedStringProfileCapability;\r",
									"                        expectedStringProfileCapability = expectedProfileInstance[\"string-profile-1-0:string-profile-pac\"][\"string-profile-capability\"];\r",
									"                        let actualStringProfileCapability;\r",
									"                        actualStringProfileCapability = actualProfileInstance[\"string-profile-1-0:string-profile-pac\"][\"string-profile-capability\"];\r",
									"                        pm.test(\"string-profile-capability class could be found for '\" + expectedProfileInstance[\"uuid\"] + \"'\" , function () {\r",
									"                            pm.expect(actualStringProfileCapability).to.not.equal(undefined);\r",
									"                            pm.expect(Object.keys(actualStringProfileCapability).length).to.not.equal(0);\r",
									"                        });\r",
									"                        if(actualStringProfileCapability != undefined) {\r",
									"                            pm.test(\"Provides expected properties in capability class for '\" + expectedProfileInstance[\"uuid\"] + \"'\" , function () {\r",
									"                                pm.expect(actualStringProfileCapability[\"string-name\"]).to.equal(expectedStringProfileCapability[\"string-name\"]);\r",
									"                                if(expectedStringProfileCapability.hasOwnProperty(\"enumeration\")) {\r",
									"                                    pm.expect(JSON.stringify(actualStringProfileCapability[\"enumeration\"])).to.equal(JSON.stringify(expectedStringProfileCapability[\"enumeration\"]));\r",
									"                                }\r",
									"                                if(expectedStringProfileCapability.hasOwnProperty(\"pattern\")) {\r",
									"                                    pm.expect(actualStringProfileCapability[\"pattern\"]).to.equal(expectedStringProfileCapability[\"pattern\"]);\r",
									"                                }\r",
									"                            });\r",
									"                        }\r",
									"                        let expectedStringProfileConfiguration;\r",
									"                        expectedStringProfileConfiguration = expectedProfileInstance[\"string-profile-1-0:string-profile-pac\"][\"string-profile-configuration\"];\r",
									"                        let actualStringProfileConfiguration;\r",
									"                        actualStringProfileConfiguration = actualProfileInstance[\"string-profile-1-0:string-profile-pac\"][\"string-profile-configuration\"];\r",
									"                        pm.test(\"string-profile-configuration class could be found for '\" + expectedProfileInstance[\"uuid\"] + \"'\" , function () {\r",
									"                            pm.expect(actualStringProfileConfiguration).to.not.equal(undefined);\r",
									"                            pm.expect(Object.keys(actualStringProfileConfiguration).length).to.not.equal(0);\r",
									"                        });\r",
									"                        if(actualStringProfileConfiguration != undefined) {\r",
									"                            pm.test(\"Provides expected properties in configuration class for '\" + expectedProfileInstance[\"uuid\"] + \"'\" , function () {\r",
									"                                pm.expect(actualStringProfileConfiguration[\"string-value\"]).to.equal(expectedStringProfileConfiguration[\"string-value\"]);\r",
									"                            });\r",
									"                        }\r",
									"                    }\r",
									"                }\r",
									"            }\r",
									"        }\r",
									"\r",
									"        // testcases for logical termination point\r",
									"\r",
									"        var actualLtpList;\r",
									"        actualLtpList = actualControlConstruct[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
									"        pm.test(\"Logical termination point list could be found \" , function () {\r",
									"            pm.expect(actualLtpList).to.not.equal(undefined);\r",
									"            pm.expect(Object.keys(actualLtpList).length).to.not.equal(0);\r",
									"        });\r",
									"        if(actualLtpList != undefined) {\r",
									"            for ( let expectedLtpIndex=0; expectedLtpIndex<expectedLtpList.length; expectedLtpIndex++ ) {\r",
									"                let expectedLtpInstance;\r",
									"                expectedLtpInstance = expectedLtpList[expectedLtpIndex];\r",
									"                let actualLtpInstance = FindActualInstance(expectedLtpInstance[\"uuid\"], actualLtpList);\r",
									"                pm.test(\"LTP instance '\" + expectedLtpInstance[\"uuid\"] + \"' could be found \" , function () {\r",
									"                    pm.expect(actualLtpInstance).to.not.equal(undefined);\r",
									"                    pm.expect(Object.keys(actualLtpInstance).length).to.not.equal(0);\r",
									"                });\r",
									"                if( actualLtpInstance != undefined ) {\r",
									"                    console.log(\"testing \"+ actualLtpInstance[\"uuid\"]);\r",
									"                    pm.test(\"Provides expected ltp-direction '\" + expectedLtpInstance[\"ltp-direction\"] + \"' for '\" + expectedLtpInstance[\"uuid\"] + \"'\", function () {\r",
									"                        pm.expect(actualLtpInstance[\"ltp-direction\"]).to.equal(expectedLtpInstance[\"ltp-direction\"]);\r",
									"                    });\r",
									"                    if(expectedLtpInstance[\"client-ltp\"].length != actualLtpInstance[\"client-ltp\"].length) {\r",
									"                        pm.test(\"Provides expected length of client-ltp list for '\" + expectedLtpInstance[\"uuid\"] + \"'\", function () {\r",
									"                            pm.expect(actualLtpInstance[\"client-ltp\"].length).to.equal(expectedLtpInstance[\"client-ltp\"].length);\r",
									"                        });\r",
									"                    } else {\r",
									"                        if(expectedLtpInstance[\"client-ltp\"].length != 0) {\r",
									"                            let isClientLtpListEqual;\r",
									"                            isClientLtpListEqual = areEqual(actualLtpInstance[\"client-ltp\"], expectedLtpInstance[\"client-ltp\"]); \r",
									"                            pm.test(\"Provides expected client-ltp list for '\" + expectedLtpInstance[\"uuid\"] + \"'\", function () {\r",
									"                                pm.expect(isClientLtpListEqual).to.be.true;\r",
									"                            });\r",
									"                        }\r",
									"                    }\r",
									"                    if(expectedLtpInstance[\"server-ltp\"].length != actualLtpInstance[\"server-ltp\"].length) {\r",
									"                        pm.test(\"Provides expected length of server-ltp list for '\" + expectedLtpInstance[\"uuid\"] + \"'\", function () {\r",
									"                            pm.expect(actualLtpInstance[\"server-ltp\"].length).to.equal(expectedLtpInstance[\"server-ltp\"].length);\r",
									"                        });\r",
									"                    } else {\r",
									"                        if(expectedLtpInstance[\"server-ltp\"].length != 0) {\r",
									"                            let isServerLtpListEqual;\r",
									"                            isServerLtpListEqual = areEqual(actualLtpInstance[\"server-ltp\"], expectedLtpInstance[\"server-ltp\"]); \r",
									"                            pm.test(\"Provides expected server-ltp list for '\" + expectedLtpInstance[\"uuid\"] + \"'\", function () {\r",
									"                                pm.expect(isServerLtpListEqual).to.be.true;\r",
									"                            });\r",
									"                        }\r",
									"                    }\r",
									"                    let expectedLayerProtocol;\r",
									"                    expectedLayerProtocol = expectedLtpInstance[\"layer-protocol\"][0];\r",
									"                    let actualLayerProtocol;\r",
									"                    actualLayerProtocol = actualLtpInstance[\"layer-protocol\"][0];\r",
									"                    pm.test(\"layer-protocol could be found in ltp instance '\" + expectedLtpInstance[\"uuid\"] + \"'\", function () {\r",
									"                        pm.expect(actualLayerProtocol).to.not.equal(undefined);\r",
									"                        pm.expect(Object.keys(actualLayerProtocol).length).to.not.equal(0);\r",
									"                    });\r",
									"                    if( actualLayerProtocol != undefined ) {\r",
									"                         pm.test(\"Provides expected local-id '\" + expectedLayerProtocol[\"local-id\"] + \"' for instance '\" + expectedLtpInstance[\"uuid\"] + \"'\", function () {\r",
									"                            pm.expect(actualLayerProtocol[\"local-id\"]).to.equal(expectedLayerProtocol[\"local-id\"]);\r",
									"                        });\r",
									"                        pm.test(\"Provides expected layer-protocol-name '\" + expectedLayerProtocol[\"layer-protocol-name\"] + \"' for '\" + expectedLtpInstance[\"uuid\"] + \"'\", function () {\r",
									"                            pm.expect(actualLayerProtocol[\"layer-protocol-name\"]).to.equal(expectedLayerProtocol[\"layer-protocol-name\"]);\r",
									"                        });\r",
									"                        if ( expectedLayerProtocol[\"layer-protocol-name\"].includes(\"operation-server-interface-1-0:LAYER_PROTOCOL_NAME_TYPE_OPERATION_LAYER\")) {\r",
									"                            let expectedOperationServerCapability;\r",
									"                            expectedOperationServerCapability = expectedLayerProtocol[\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"];\r",
									"                            let actualOperationServerCapability;\r",
									"                            actualOperationServerCapability = actualLayerProtocol[\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"];\r",
									"                            pm.test(\"operation-server-capability class could be foundfor '\" + expectedLtpInstance[\"uuid\"] + \"'\" , function () {\r",
									"                                pm.expect(actualOperationServerCapability).to.not.equal(undefined);\r",
									"                                pm.expect(Object.keys(actualOperationServerCapability).length).to.not.equal(0);\r",
									"                            });\r",
									"                            if(actualOperationServerCapability != undefined) {\r",
									"                                pm.test(\"Provides expected properties in capability class for '\" + expectedLtpInstance[\"uuid\"] + \"'\" , function () {\r",
									"                                    pm.expect(actualOperationServerCapability[\"operation-name\"]).to.equal(expectedOperationServerCapability[\"operation-name\"]);\r",
									"                                });\r",
									"                            }\r",
									"                            let expectedOperationServerConfiguration;\r",
									"                            expectedOperationServerConfiguration = expectedLayerProtocol[\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"];\r",
									"                            let actualOperationServerConfiguration;\r",
									"                            actualOperationServerConfiguration = actualLayerProtocol[\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"];\r",
									"                            pm.test(\"operation-server-configuration class could be found for '\" + expectedLtpInstance[\"uuid\"] + \"'\" , function () {\r",
									"                                pm.expect(actualOperationServerConfiguration).to.not.equal(undefined);\r",
									"                                pm.expect(Object.keys(actualOperationServerConfiguration).length).to.not.equal(0);\r",
									"                            });\r",
									"                            if(actualOperationServerConfiguration != undefined) {\r",
									"                                pm.test(\"Provides expected properties in configuration class for '\" + expectedLtpInstance[\"uuid\"] + \"'\" , function () {\r",
									"                                    pm.expect(actualOperationServerConfiguration[\"life-cycle-state\"]).to.equal(expectedOperationServerConfiguration[\"life-cycle-state\"]);\r",
									"                                    pm.expect(actualOperationServerConfiguration[\"operation-key\"]).to.equal(expectedOperationServerConfiguration[\"operation-key\"]);\r",
									"                                });\r",
									"                            }\r",
									"                        } else if( expectedLayerProtocol[\"layer-protocol-name\"].includes(\"http-server-interface-1-0:LAYER_PROTOCOL_NAME_TYPE_HTTP_LAYER\") ) {\r",
									"                            let expectedHttpServerCapability;\r",
									"                            expectedHttpServerCapability = expectedLayerProtocol[\"http-server-interface-1-0:http-server-interface-pac\"][\"http-server-interface-capability\"];\r",
									"                            let actualHttpServerCapability;\r",
									"                            actualHttpServerCapability = actualLayerProtocol[\"http-server-interface-1-0:http-server-interface-pac\"][\"http-server-interface-capability\"];\r",
									"                            pm.test(\"http-server-capability class could be found for '\" + expectedLtpInstance[\"uuid\"] + \"'\" , function () {\r",
									"                                pm.expect(actualHttpServerCapability).to.not.equal(undefined);\r",
									"                                pm.expect(Object.keys(actualHttpServerCapability).length).to.not.equal(0);\r",
									"                            });\r",
									"                            if(actualHttpServerCapability != undefined) {\r",
									"                                pm.test(\"Provides expected properties in capability class for '\" + expectedLtpInstance[\"uuid\"] + \"'\" , function () {\r",
									"                                    pm.expect(actualHttpServerCapability[\"application-name\"]).to.equal(expectedHttpServerCapability[\"application-name\"]);\r",
									"                                    pm.expect(actualHttpServerCapability[\"release-number\"]).to.equal(expectedHttpServerCapability[\"release-number\"]);\r",
									"                                    pm.expect(actualHttpServerCapability[\"application-purpose\"]).to.equal(expectedHttpServerCapability[\"application-purpose\"]);\r",
									"                                    pm.expect(actualHttpServerCapability[\"data-update-period\"]).to.equal(expectedHttpServerCapability[\"data-update-period\"]);\r",
									"                                    pm.expect(actualHttpServerCapability[\"owner-name\"]).to.equal(expectedHttpServerCapability[\"owner-name\"]);\r",
									"                                    pm.expect(actualHttpServerCapability[\"owner-email-address\"]).to.equal(expectedHttpServerCapability[\"owner-email-address\"]);\r",
									"                                    pm.expect(JSON.stringify(actualHttpServerCapability[\"release-list\"])).to.equal(JSON.stringify(expectedHttpServerCapability[\"release-list\"]));\r",
									"                                });\r",
									"                            }\r",
									"                        } else if (expectedLayerProtocol[\"layer-protocol-name\"].includes(\"tcp-server-interface-1-0:LAYER_PROTOCOL_NAME_TYPE_TCP_LAYER\") ) {\r",
									"                            let expectedTcpServerConfiguration;\r",
									"                            expectedTcpServerConfiguration = expectedLayerProtocol[\"tcp-server-interface-1-0:tcp-server-interface-pac\"][\"tcp-server-interface-configuration\"];\r",
									"                            let actualTcpServerConfiguration;\r",
									"                            actualTcpServerConfiguration = actualLayerProtocol[\"tcp-server-interface-1-0:tcp-server-interface-pac\"][\"tcp-server-interface-configuration\"];\r",
									"                            pm.test(\"tcp-server-configuration class could be found for '\" + expectedLtpInstance[\"uuid\"] + \"'\" , function () {\r",
									"                                pm.expect(actualTcpServerConfiguration).to.not.equal(undefined);\r",
									"                                pm.expect(Object.keys(actualTcpServerConfiguration).length).to.not.equal(0);\r",
									"                            });\r",
									"                            if(actualTcpServerConfiguration != undefined) {\r",
									"                                pm.test(\"Provides expected properties in configuration class for '\" + expectedLtpInstance[\"uuid\"] + \"'\" , function () {\r",
									"                                    pm.expect(actualTcpServerConfiguration[\"description\"]).to.equal(expectedTcpServerConfiguration[\"description\"]);\r",
									"                                    pm.expect(actualTcpServerConfiguration[\"local-protocol\"]).to.equal(expectedTcpServerConfiguration[\"local-protocol\"]);\r",
									"                                    let addressAttributePresent;\r",
									"                                    addressAttributePresent = expectedTcpServerConfiguration[\"local-address\"].hasOwnProperty(\"ipv-4-address\") || expectedTcpServerConfiguration[\"local-address\"].hasOwnProperty(\"domain-name\");\r",
									"                                    if(addressAttributePresent) {\r",
									"                                        if(expectedTcpServerConfiguration[\"local-address\"].hasOwnProperty(\"ipv-4-address\")) {\r",
									"                                            pm.expect(actualTcpServerConfiguration[\"local-address\"][\"ipv-4-address\"]).to.equal(expectedTcpServerConfiguration[\"local-address\"][\"ipv-4-address\"]);\r",
									"                                        } else if(expectedTcpServerConfiguration[\"local-address\"].hasOwnProperty(\"domain-name\")){\r",
									"                                            pm.expect(actualTcpServerConfiguration[\"local-address\"][\"domain-name\"]).to.equal(expectedTcpServerConfiguration[\"local-address\"][\"domain-name\"]);\r",
									"                                        }\r",
									"                                    } else {\r",
									"                                        pm.expect(addressAttributePresent).to.be.true;\r",
									"                                    }\r",
									"                                    pm.expect(actualTcpServerConfiguration[\"local-port\"]).to.equal(expectedTcpServerConfiguration[\"local-port\"]);\r",
									"                                });\r",
									"                            }\r",
									"                        } else if ( expectedLayerProtocol[\"layer-protocol-name\"].includes(\"operation-client-interface-1-0:LAYER_PROTOCOL_NAME_TYPE_OPERATION_LAYER\") ) {\r",
									"                            let expectedOperationClientConfiguration;\r",
									"                            expectedOperationClientConfiguration = expectedLayerProtocol[\"operation-client-interface-1-0:operation-client-interface-pac\"][\"operation-client-interface-configuration\"];\r",
									"                            let actualOperationClientConfiguration;\r",
									"                            actualOperationClientConfiguration = actualLayerProtocol[\"operation-client-interface-1-0:operation-client-interface-pac\"][\"operation-client-interface-configuration\"];\r",
									"                            pm.test(\"operation-client-configuration class could be found for '\" + expectedLtpInstance[\"uuid\"] + \"'\" , function () {\r",
									"                                pm.expect(actualOperationClientConfiguration).to.not.equal(undefined);\r",
									"                                pm.expect(Object.keys(actualOperationClientConfiguration).length).to.not.equal(0);\r",
									"                            });\r",
									"                            if(actualOperationClientConfiguration != undefined) {\r",
									"                                pm.test(\"Provides expected properties in configuration class for '\" + expectedLtpInstance[\"uuid\"] + \"'\" , function () {\r",
									"                                    pm.expect(actualOperationClientConfiguration[\"operation-name\"]).to.equal(expectedOperationClientConfiguration[\"operation-name\"]);\r",
									"                                    pm.expect(actualOperationClientConfiguration[\"operation-key\"]).to.equal(expectedOperationClientConfiguration[\"operation-key\"]);\r",
									"                                    if(expectedOperationClientConfiguration.hasOwnProperty(\"detailed-logging-is-on\")) {\r",
									"                                        pm.expect(actualOperationClientConfiguration[\"detailed-logging-is-on\"]).to.equal(expectedOperationClientConfiguration[\"detailed-logging-is-on\"]);\r",
									"                                    }\r",
									"                                });\r",
									"                            }\r",
									"                            let expectedOperationClientStatus;\r",
									"                            expectedOperationClientStatus = expectedLayerProtocol[\"operation-client-interface-1-0:operation-client-interface-pac\"][\"operation-client-interface-status\"];\r",
									"                            let actualOperationClientStatus;\r",
									"                            actualOperationClientStatus = actualLayerProtocol[\"operation-client-interface-1-0:operation-client-interface-pac\"][\"operation-client-interface-status\"];\r",
									"                            pm.test(\"operation-client-status class could be found for '\" + expectedLtpInstance[\"uuid\"] + \"'\" , function () {\r",
									"                                pm.expect(actualOperationClientStatus).to.not.equal(undefined);\r",
									"                                pm.expect(Object.keys(actualOperationClientStatus).length).to.not.equal(0);\r",
									"                            });\r",
									"                            if(actualOperationClientStatus != undefined) {\r",
									"                                pm.test(\"Provides expected properties in status class  for '\" + expectedLtpInstance[\"uuid\"] + \"'\" , function () {\r",
									"                                    pm.expect(actualOperationClientStatus[\"operational-state\"]).to.equal(expectedOperationClientStatus[\"operational-state\"]);\r",
									"                                    pm.expect(actualOperationClientStatus[\"life-cycle-state\"]).to.equal(expectedOperationClientStatus[\"life-cycle-state\"]);\r",
									"                                });\r",
									"                            }\r",
									"                        } else if ( expectedLayerProtocol[\"layer-protocol-name\"].includes(\"elasticsearch-client-interface-1-0:LAYER_PROTOCOL_NAME_TYPE_ELASTICSEARCH_LAYER\") ) {\r",
									"                            let expectedElasticSearchClientConfiguration;\r",
									"                            expectedElasticSearchClientConfiguration = expectedLayerProtocol[\"elasticsearch-client-interface-1-0:elasticsearch-client-interface-pac\"][\"elasticsearch-client-interface-configuration\"];\r",
									"                            let actualElasticSearchClientConfiguration;\r",
									"                            actualElasticSearchClientConfiguration = actualLayerProtocol[\"elasticsearch-client-interface-1-0:elasticsearch-client-interface-pac\"][\"elasticsearch-client-interface-configuration\"];\r",
									"                            pm.test(\"elasticsearch-client-configuration class could be found for '\" + expectedLtpInstance[\"uuid\"] + \"'\" , function () {\r",
									"                                pm.expect(actualElasticSearchClientConfiguration).to.not.equal(undefined);\r",
									"                                pm.expect(Object.keys(actualElasticSearchClientConfiguration).length).to.not.equal(0);\r",
									"                            });\r",
									"                            if(actualElasticSearchClientConfiguration != undefined) {\r",
									"                                pm.test(\"Provides expected properties in configuration class for '\" + expectedLtpInstance[\"uuid\"] + \"'\" , function () {\r",
									"                                    pm.expect(actualElasticSearchClientConfiguration[\"auth\"][\"api-key\"]).to.equal(expectedElasticSearchClientConfiguration[\"auth\"][\"api-key\"]);\r",
									"                                    pm.expect(actualElasticSearchClientConfiguration[\"index-alias\"]).to.equal(expectedElasticSearchClientConfiguration[\"index-alias\"]);\r",
									"                                    if(expectedElasticSearchClientConfiguration.hasOwnProperty(\"service-records-policy\")) {\r",
									"                                        pm.expect(JSON.stringify(actualElasticSearchClientConfiguration[\"service-records-policy\"])).to.equal(JSON.stringify(expectedElasticSearchClientConfiguration[\"service-records-policy\"]));\r",
									"                                    }\r",
									"                                });\r",
									"                            }\r",
									"                            let expectedElasticSearchClientStatus;\r",
									"                            expectedElasticSearchClientStatus = expectedLayerProtocol[\"elasticsearch-client-interface-1-0:elasticsearch-client-interface-pac\"][\"elasticsearch-client-interface-configuration\"];\r",
									"                            let actualElasticSearchClientStatus;\r",
									"                            actualElasticSearchClientStatus = actualLayerProtocol[\"elasticsearch-client-interface-1-0:elasticsearch-client-interface-pac\"][\"elasticsearch-client-interface-configuration\"];\r",
									"                            pm.test(\"elasticsearch-client-status class could be found for '\" + expectedLtpInstance[\"uuid\"] + \"'\" , function () {\r",
									"                                pm.expect(actualElasticSearchClientStatus).to.not.equal(undefined);\r",
									"                                pm.expect(Object.keys(actualElasticSearchClientStatus).length).to.not.equal(0);\r",
									"                            });\r",
									"                            if(actualElasticSearchClientStatus != undefined) {\r",
									"                                pm.test(\"Provides expected properties in status class  for '\" + expectedLtpInstance[\"uuid\"] + \"'\" , function () {\r",
									"                                    pm.expect(actualElasticSearchClientStatus[\"operational-state\"]).to.equal(expectedElasticSearchClientStatus[\"operational-state\"]);\r",
									"                                    pm.expect(actualElasticSearchClientStatus[\"life-cycle-state\"]).to.equal(expectedElasticSearchClientStatus[\"life-cycle-state\"]);\r",
									"                                });\r",
									"                            }\r",
									"                        } else if ( expectedLayerProtocol[\"layer-protocol-name\"].includes(\"http-client-interface-1-0:LAYER_PROTOCOL_NAME_TYPE_HTTP_LAYER\") ) {\r",
									"                            let expectedHttpClientConfiguration;\r",
									"                            expectedHttpClientConfiguration = expectedLayerProtocol[\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"];\r",
									"                            let actualHttpClientConfiguration;\r",
									"                            actualHttpClientConfiguration = actualLayerProtocol[\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"];\r",
									"                            pm.test(\"http-client-configuration class could be found for '\" + expectedLtpInstance[\"uuid\"] + \"'\" , function () {\r",
									"                                pm.expect(actualHttpClientConfiguration).to.not.equal(undefined);\r",
									"                                pm.expect(Object.keys(actualHttpClientConfiguration).length).to.not.equal(0);\r",
									"                            });\r",
									"                            if(actualHttpClientConfiguration != undefined) {\r",
									"                                pm.test(\"Provides expected properties in configuration class for '\" + expectedLtpInstance[\"uuid\"] + \"'\" , function () {\r",
									"                                    pm.expect(actualHttpClientConfiguration[\"application-name\"]).to.equal(expectedHttpClientConfiguration[\"application-name\"]);\r",
									"                                    pm.expect(actualHttpClientConfiguration[\"release-number\"]).to.equal(expectedHttpClientConfiguration[\"release-number\"]);\r",
									"                                });\r",
									"                            }\r",
									"                        } else if (expectedLayerProtocol[\"layer-protocol-name\"].includes(\"tcp-client-interface-1-0:LAYER_PROTOCOL_NAME_TYPE_TCP_LAYER\") ) {\r",
									"                            let expectedTcpClientConfiguration;\r",
									"                            expectedTcpClientConfiguration = expectedLayerProtocol[\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"];\r",
									"                            let actualTcpClientConfiguration;\r",
									"                            actualTcpClientConfiguration = actualLayerProtocol[\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"];\r",
									"                            pm.test(\"tcp-client-configuration class could be found for '\" + expectedLtpInstance[\"uuid\"] + \"'\" , function () {\r",
									"                                pm.expect(actualTcpClientConfiguration).to.not.equal(undefined);\r",
									"                                pm.expect(Object.keys(actualTcpClientConfiguration).length).to.not.equal(0);\r",
									"                            });\r",
									"                            if(actualTcpClientConfiguration != undefined) {\r",
									"                                pm.test(\"Provides expected properties in configuration class for '\" + expectedLtpInstance[\"uuid\"] + \"'\" , function () {\r",
									"                                    pm.expect(actualTcpClientConfiguration[\"remote-protocol\"]).to.equal(expectedTcpClientConfiguration[\"remote-protocol\"]);\r",
									"                                    pm.expect(JSON.stringify(actualTcpClientConfiguration[\"remote-address\"])).to.equal(JSON.stringify(expectedTcpClientConfiguration[\"remote-address\"]));\r",
									"                                    pm.expect(actualTcpClientConfiguration[\"remote-port\"]).to.equal(expectedTcpClientConfiguration[\"remote-port\"]);\r",
									"                                });\r",
									"                            }\r",
									"                        }\r",
									"                    }\r",
									"                }\r",
									"            }\r",
									"        }\r",
									"\r",
									"\r",
									"\r",
									"        // testcases for forwarding domain\r",
									"\r",
									"        var actualFDList;\r",
									"        actualFDList = actualControlConstruct[\"core-model-1-4:control-construct\"][\"forwarding-domain\"];\r",
									"        pm.test(\"Forwarding domain could be found \" , function () {\r",
									"            pm.expect(actualFDList).to.not.equal(undefined);\r",
									"            pm.expect(Object.keys(actualFDList).length).to.not.equal(0);\r",
									"        });\r",
									"        if(actualFDList != undefined) {\r",
									"            pm.test(\"Provides invariant number (1) of attributes in forwarding-domain\", function () {\r",
									"                pm.expect(Object.keys(actualFDList).length).to.equal(1);\r",
									"            });\r",
									"            pm.test(\"Provides expected uuid '\" + expectedFDList[0][\"uuid\"] +\"' in forwarding-domain\", function () {\r",
									"                pm.expect(actualFDList[0][\"uuid\"]).to.not.equal(undefined);\r",
									"                pm.expect(actualFDList[0][\"uuid\"]).to.equal(expectedFDList[0][\"uuid\"]);\r",
									"                pm.expect(actualFDList[0][\"uuid\"]).to.be.a(\"String\");\r",
									"            });\r",
									"            var expectedForwardingConstructList;\r",
									"            expectedForwardingConstructList = expectedFDList[0][\"forwarding-construct\"];\r",
									"            var actualForwardingConstructList;\r",
									"            actualForwardingConstructList = actualFDList[0][\"forwarding-construct\"];\r",
									"            pm.test(\"Forwarding construct List could be found \" , function () {\r",
									"                pm.expect(actualForwardingConstructList).to.not.equal(undefined);\r",
									"                pm.expect(Object.keys(actualForwardingConstructList).length).to.not.equal(0);\r",
									"            });\r",
									"\r",
									"            if(actualForwardingConstructList != undefined) {\r",
									"                for(let expectedFCIndex=0; expectedFCIndex<expectedForwardingConstructList.length; expectedFCIndex++) {\r",
									"                    let expectedFCInstance;\r",
									"                    expectedFCInstance = expectedForwardingConstructList[expectedFCIndex];\r",
									"                    let expectedFCInstanceForwardingName;\r",
									"                    for(let i=0;i<expectedFCInstance[\"name\"].length;i++) {\r",
									"                        if(expectedFCInstance[\"name\"][i][\"value-name\"] == \"ForwardingName\") {\r",
									"                            expectedFCInstanceForwardingName = expectedFCInstance[\"name\"][i][\"value\"];\r",
									"                        }\r",
									"                    }\r",
									"                    let actualFCInstance;\r",
									"                    actualFCInstance = FindActualFCInstance(expectedFCInstanceForwardingName, actualForwardingConstructList);\r",
									"                    pm.test(\"Forwarding construct '\" + expectedFCInstanceForwardingName + \"' could be found \" , function () {\r",
									"                        pm.expect(actualFCInstance).to.not.equal(undefined);\r",
									"                        pm.expect(Object.keys(actualFCInstance).length).to.not.equal(0);\r",
									"                    });\r",
									"                    if(actualFCInstance != undefined) {\r",
									"                        console.log(\"testing \" + actualFCInstance[\"uuid\"]);\r",
									"                        pm.test(\"Provides expected uuid '\" + expectedFCInstance[\"uuid\"] +\"' in forwarding-construct\", function () {\r",
									"                            pm.expect(actualFCInstance[\"uuid\"]).to.not.equal(undefined);\r",
									"                            pm.expect(actualFCInstance[\"uuid\"]).to.equal(expectedFCInstance[\"uuid\"]);\r",
									"                            pm.expect(actualFCInstance[\"uuid\"]).to.be.a(\"String\");\r",
									"                        });\r",
									"                        let expectedForwardingKindName;\r",
									"                        for(let i=0;i<expectedFCInstance[\"name\"].length;i++) {\r",
									"                            if(expectedFCInstance[\"name\"][i][\"value-name\"] == \"ForwardingKind\") {\r",
									"                                expectedForwardingKindName = expectedFCInstance[\"name\"][i][\"value\"];\r",
									"                            }\r",
									"                        }\r",
									"                        let actualForwardingKindName;\r",
									"                        for(let i=0;i<actualFCInstance[\"name\"].length;i++) {\r",
									"                            if(actualFCInstance[\"name\"][i][\"value-name\"] == \"ForwardingKind\") {\r",
									"                                actualForwardingKindName = actualFCInstance[\"name\"][i][\"value\"];\r",
									"                            }\r",
									"                        }\r",
									"                        pm.test(\"Provides expected forwarding kind '\" + expectedForwardingKindName +\"' in forwarding-construct\", function () {\r",
									"                            pm.expect(actualForwardingKindName).to.not.equal(undefined);\r",
									"                            pm.expect(actualForwardingKindName).to.equal(expectedForwardingKindName);\r",
									"                            pm.expect(actualForwardingKindName).to.be.a(\"String\");\r",
									"                        });\r",
									"                        pm.test(\"FC port could be found in the forwarding-construct '\" + actualFCInstance[\"uuid\"] + \"'\", function () {\r",
									"                            pm.expect(actualFCInstance[\"fc-port\"]).to.not.equal(undefined);\r",
									"                            pm.expect(Object.keys(actualFCInstance[\"fc-port\"]).length).to.not.equal(0);\r",
									"                        });\r",
									"                        pm.test(\"Provides expected number of fc-port instances '\" + expectedFCInstance[\"fc-port\"].length +\"' in forwarding-construct\", function () {\r",
									"                            pm.expect(actualFCInstance[\"fc-port\"].length).to.equal(expectedFCInstance[\"fc-port\"].length);\r",
									"                        });\r",
									"                        if( actualFCInstance[\"fc-port\"] != undefined ) {\r",
									"                            let actualFcPortList;\r",
									"                            actualFcPortList = actualFCInstance[\"fc-port\"];\r",
									"                            for ( let expectedFcPortIndex=0; expectedFcPortIndex<expectedFCInstance[\"fc-port\"].length; expectedFcPortIndex++ ) {\r",
									"                                let expectedFCPortInstance;\r",
									"                                expectedFCPortInstance = expectedFCInstance[\"fc-port\"][expectedFcPortIndex];\r",
									"                                let expectedFCPortLocalId;\r",
									"                                expectedFCPortLocalId = expectedFCPortInstance[\"local-id\"];\r",
									"                                let actualFcPortInstance;\r",
									"                                actualFcPortInstance = FindActualFCPortInstance(expectedFCPortLocalId, actualFcPortList);\r",
									"                                pm.test(\"Fc-port of local-id '\" + expectedFCPortLocalId + \"' could be found in actual \" , function () {\r",
									"                                    pm.expect(actualFcPortInstance).to.not.equal(undefined);\r",
									"                                    pm.expect(Object.keys(actualFcPortInstance).length).to.not.equal(0);\r",
									"                                });\r",
									"                                if(actualFcPortInstance!=undefined) {\r",
									"                                    pm.test(\"Provides expected port-direction '\" + expectedFCPortInstance[\"port-direction\"] +\"'\", function () {\r",
									"                                        pm.expect(actualFcPortInstance[\"port-direction\"]).to.not.equal(undefined);\r",
									"                                        pm.expect(actualFcPortInstance[\"port-direction\"]).to.equal(expectedFCPortInstance[\"port-direction\"]);\r",
									"                                    });\r",
									"                                    pm.test(\"Provides expected logical-termination-point '\" + expectedFCPortInstance[\"logical-termination-point\"] +\"'\", function () {\r",
									"                                        pm.expect(actualFcPortInstance[\"logical-termination-point\"]).to.not.equal(undefined);\r",
									"                                        pm.expect(actualFcPortInstance[\"logical-termination-point\"]).to.equal(expectedFCPortInstance[\"logical-termination-point\"]);\r",
									"                                    });\r",
									"                                }\r",
									"                            }\r",
									"                        }\r",
									"                    }\r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    }\r",
									"\r",
									"} catch (error) {\r",
									"    console.log(error)\r",
									"    console.log(\"! Testing could not be executed.\");\r",
									"}\r",
									"\r",
									"/****************************************************************************************\r",
									"* Functions\r",
									"****************************************************************************************/\r",
									"function FindActualInstance(expectedUuid, listToBeFiltered) {\r",
									"    let actualInstance;\r",
									"    actualInstance = {};\r",
									"    try {\r",
									"        for( let i=0; i<listToBeFiltered.length; i++ ) {\r",
									"            let sampleUuid;\r",
									"            sampleUuid = listToBeFiltered[i][\"uuid\"];\r",
									"            if(sampleUuid == expectedUuid) {\r",
									"                actualInstance = listToBeFiltered[i];\r",
									"                return actualInstance;\r",
									"            }\r",
									"        }\r",
									"    } catch (error) {\r",
									"        console.log(error);\r",
									"        console.log(\"! Exception in function FindActualInstance. \");\r",
									"    }\r",
									"    return undefined;\r",
									"}\r",
									"\r",
									"function FindActualFCInstance(expectedFCInstanceForwardingName, actualForwardingConstructList) {\r",
									"    let actualFCInstance;\r",
									"    actualFCInstance = {};\r",
									"    try {\r",
									"        for( let i=0; i<actualForwardingConstructList.length; i++ ) {\r",
									"            for(let j=0; j<actualForwardingConstructList[i][\"name\"].length; j++) {               \r",
									"                if(actualForwardingConstructList[i][\"name\"][j][\"value\"] == expectedFCInstanceForwardingName) {\r",
									"                    actualFCInstance = actualForwardingConstructList[i];\r",
									"                    return actualFCInstance;\r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    } catch (error) {\r",
									"        console.log(\"! Exception in function FindActualFCInstance. \");\r",
									"    }\r",
									"    return undefined;\r",
									"}\r",
									"\r",
									"function FindActualFCPortInstance(localId, fcPortList) {\r",
									"    let fcPortInstance;\r",
									"    fcPortInstance = {};\r",
									"    try {\r",
									"        let sampleLocalId;\r",
									"        for( let i=0; i<fcPortList.length; i++ ) {\r",
									"            sampleLocalId = fcPortList[i][\"local-id\"];\r",
									"            if(sampleLocalId == localId) {\r",
									"                fcPortInstance = fcPortList[i];\r",
									"                return fcPortInstance; \r",
									"            }\r",
									"        }\r",
									"    } catch (error) {\r",
									"        console.log(\"! Exception in function FindActualFCPortInstance. \");\r",
									"    }\r",
									"}\r",
									"\r",
									"function areEqual(array1, array2) {\r",
									"  if (array1.length === array2.length) {\r",
									"    return array1.every(element => {\r",
									"      if (array2.includes(element)) {\r",
									"        return true;\r",
									"      }\r",
									"      return false;\r",
									"    });\r",
									"  }\r",
									"  return false;\r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-mock-response-code",
								"value": "200",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{requestBody}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{uri}}",
							"host": [
								"{{uri}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Clearing collection data",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"====================================== Clearing collection data ====================================\");\r",
									"console.log(\"==========================================================================================\");\r",
									"\r",
									"/****************************************************************************************\r",
									"* Setting Local Variables and Preparing the Request\r",
									"****************************************************************************************/\r",
									"try {\r",
									"    \r",
									"    let URI;\r",
									"    URI = pm.environment.get(\"dummyUri\");\r",
									"\r",
									"    pm.variables.set(\"uri\", URI);\r",
									"    pm.request.headers.upsert({ key: \"Authorization\", value: \"\" });\r",
									"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });\r",
									"    pm.request.headers.upsert({ key: \"Content-Type\", value: \"application/json\" });\r",
									"\r",
									"} catch (error) {\r",
									"    console.log(\"! Local variables could not be set.\");\r",
									"}\r",
									"\r",
									"/****************************************************************************************\r",
									"* Functions\r",
									"****************************************************************************************/\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"/****************************************************************************************\r",
									"* Clearing Variables \r",
									"****************************************************************************************/\r",
									"try {\r",
									"    pm.environment.clear();\r",
									"    pm.collectionVariables.clear();\r",
									"    pm.variables.clear();\r",
									"\r",
									"} catch (error) {\r",
									"    console.log(\"! Collection variables could not be set.\");\r",
									"}\r",
									"console.log(pm.collectionVariables)\r",
									"console.log(pm.environment)\r",
									"console.log(pm.variables)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{uri}}",
							"host": [
								"{{uri}}"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}